(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[36],{

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/Terms_conditions.vue?vue&type=script&lang=js&":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/pages/Terms_conditions.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "Terms_conditions",
  components: {},
  data: function data() {
    return {};
  },
  computed: {},
  mounted: function mounted() {},
  methods: {},
  created: function created() {}
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/Terms_conditions.vue?vue&type=template&id=0ec6a9f9&":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/pages/Terms_conditions.vue?vue&type=template&id=0ec6a9f9& ***!
  \********************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function render() {
  var _vm = this,
      _c = _vm._self._c;

  return _vm._m(0);
};

var staticRenderFns = [function () {
  var _vm = this,
      _c = _vm._self._c;

  return _c("div", [_c("section", {
    staticClass: "container-fluid stepsBar"
  }, [_c("div", {
    staticClass: "container mt-5"
  }, [_c("h1", [_vm._v("END USER LICENSE AGREEMENT AND TERMS OF SERVICE")]), _vm._v(" "), _c("p", [_vm._v('This End User License Agreement and Terms of Service (the "EULA") is a binding contract between you, an individual user ("you") or the Subscribing Entity (defined below) on whose behalf you are acting, and VIRTUAL SHOWROOM DESIGN INC. ( “VIRTUAL” "us" or "we") governing your use of VIRTUAL SHOWROOM DESIGN INC. services available through the VIRTUAL SHOWROOM DESIGN website (the "Website") and the VIRTUAL SHOWROOM DESIGN mobile application(s) (the “App(s)”), where those services are the “Service”), as well as your access to and use of the Website and App. BY INSTALLING OR OTHERWISE ACCESSING OR USING THE SERVICE, YOU AGREE THAT YOU HAVE READ, UNDERSTOOD, AND AGREE TO BE BOUND BY THE EULA. IF YOU DO NOT AGREE TO THE EULA, THEN YOU MAY NOT USE THE SERVICE.')]), _vm._v(" "), _c("p", [_vm._v('To have a copy of the EULA and the VIRTUAL SHOWROOM DESIGN Privacy Policy (the "Privacy Policy") sent to you, contact VIRTUAL SHOWROOM DESIGN at '), _c("a", {
    attrs: {
      href: "mailto:ciinfo@wevisu.com"
    }
  }, [_vm._v("ciinfo@wevisu.com")]), _vm._v(".")]), _vm._v(" "), _c("ol", {
    staticClass: "num",
    attrs: {
      type: "1"
    }
  }, [_c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Summary of Material Terms.\n                    "), _c("ol", {
    staticClass: "num font-weight-normal"
  }, [_c("li", [_vm._v("As provided in greater detail in the EULA (and without limiting the express language of the EULA), you acknowledge the following\n                            "), _c("ol", {
    attrs: {
      type: "a"
    }
  }, [_c("li", [_vm._v("you consent to the collection, use, and disclosure of your personally identifiable information in accordance with the Privacy Policy, including with respect to the collection of location information;")]), _vm._v(" "), _c("li", [_vm._v('the App, Website and Service is provided "as is" without warranties of any kind and VIRTUAL’s liability to you is limited; and ')]), _vm._v(" "), _c("li", [_vm._v("disputes arising hereunder will be resolved by binding arbitration.")])])])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("General.\n                    "), _c("p", {
    staticClass: "font-weight-normal"
  }, [_vm._v("The Company is engaged in the business of an online system that offers a multi-vendor marketplace that provides users with engaging, interactive visualization experiences and provides valuable insights for the residential construction and remodeling industry. ")]), _vm._v(" "), _c("p", {
    staticClass: "font-weight-normal"
  }, [_vm._v("This platform allows contractors and designers to create their virtual studios and display and sell various accessories & fittings for living rooms, bathrooms, kitchens, etc. and for potential Customers to view templates, upload their own template, and or hire designers/contractors from the platform. (the “Services”)\n                    ")]), _vm._v(" "), _c("ol", {
    attrs: {
      type: "a"
    }
  }, [_c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v(" Contractors and Designers using the Service may:\n                            "), _c("ol", {
    staticClass: "font-weight-normal",
    attrs: {
      type: "i"
    }
  }, [_c("li", [_vm._v("Add products (without purchasing) to their virtual showroom from multiple vendors.")]), _vm._v(" "), _c("li", [_vm._v("Purchase products from vendors to add to their cart for purchase or add products to their showroom without purchasing.")]), _vm._v(" "), _c("li", [_vm._v("    Collaborate with and/or invite a designer to chat and provide custom room design.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("\n                            Vendor\n                            "), _c("p", [_vm._v(" Vendors using the Service may:")]), _vm._v(" "), _c("ol", [_c("li", [_vm._v("Add products on the Service for use by Contractors and designers to show customers it’s use in virtual show rooms.")]), _vm._v(" "), _c("li", [_vm._v("Sell products on the platform to customers through the Virtual showroom platform.")]), _vm._v(" "), _c("li", [_vm._v("Collaborate with other users to discuss and promote their products.")])])])]), _vm._v(" "), _c("ol", {
    staticClass: "num font-weight-normal"
  }, [_c("li", [_c("u", [_vm._v("Acceptance of Privacy Policy.")]), _vm._v(" Your use of the Service is subject to the Privacy Policy, which is available by email and is hereby incorporated by reference into the EULA. By using the Service, you agree that you have read, understood, and agree to the data collection, use, and disclosure provisions set forth in the Privacy Policy.")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Third Party Fees.")]), _vm._v(" You may incur third party fees through use of the Service, such as fees charged by Vendors (defined below) for products or services. In addition, you may be subject to third party terms, such as Vendors’ warranties and return policies. You acknowledge and agree that you are solely responsible for all such fees incurred by you for use of the Service, and you agree to pay all such fees and abide by all such terms.")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Changes to the EULA.")]), _vm._v(" We may revise the EULA at any time by posting an updated version You should visit this page periodically to review the most current EULA, because you are bound by it. Your continued use of the Service after a change to the EULA constitutes your binding acceptance of the EULA.")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Eligibility.")]), _vm._v(' If you are using or opening an account on the Service on behalf of a company, entity, or organization (each a "Subscribing Entity"), then you represent and warrant that you: (i) are an authorized representative of that Subscribing Entity with the authority to bind such entity to the EULA and (ii) agree on behalf of such Subscribing Entity to bind the Subscribing Entity to the EULA.')]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Children.")]), _vm._v(" No part of the Service is directed to persons under the age of 13. IF YOU ARE UNDER 13 YEARS OF AGE, PLEASE DO NOT USE OR ACCESS THE SERVICE AT ANY TIME OR IN ANY MANNER. If you are under 18 years of age, you represent and agree that you possess the legal consent of your parent or guardian to access and use the Service.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Scope of License to Users.\n                    "), _c("ol", {
    staticClass: "num font-weight-normal"
  }, [_c("li", [_c("u", [_vm._v("License Grant to You.")]), _vm._v(" The Website and App is licensed, not sold, to you for use only under the terms of the EULA. Subject to your complete and ongoing compliance with the terms and conditions of the EULA, VIRTUAL hereby grants you a personal, limited, revocable, non-transferable license to access and use the Website and the App, in both instances solely for your own use or for the use of the Subscribing Entity on whose behalf you are authorized to act to access and receive the Service.")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("License Limitations.")]), _vm._v(" You may not modify, alter, reproduce, or distribute the Website or App. You may not rent, lease, lend, sell, redistribute or sublicense the Service, Website or App. You may not copy, decompile, reverse engineer, cudisassemble, attempt to derive the source code of, modify, or create derivative works of any portion of the Website or App, any updates, or any part thereof (except as and only to the extent any foregoing restriction is prohibited by applicable law), nor attempt to disable or circumvent any security or other technological measure designed to protect the Service, Website or App or any content available through the Service. If you breach these license restrictions, or otherwise exceed the scope of the licenses granted in the EULA, then you may be subject to prosecution and damages, as well as liability for infringement of intellectual property rights, and denial of access to the Service.")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Applicability to Updates.")]), _vm._v(" The terms of the EULA will govern any updates provided to you by VIRTUAL that replace and/or supplement the Website or App, unless such upgrade is accompanied by a separate license or revised EULA, in which case the terms of that license or revised EULA will govern.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Registration and Eligibility.\n                    "), _c("ol", {
    staticClass: "num font-weight-normal"
  }, [_c("li", [_c("u", [_vm._v("Account Types and Registration.")]), _vm._v(" Anyone may browse the public-facing pages of the Website, App, and Service and take the style profile, but to start the custom design plan, the client must register.")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Client.")]), _vm._v(" To become a VIRTUAL Design Client, you must provide your zip code, phone number, email address, name, and password. You will also take a user survey (to help us determine your preferred design styles), provide us photos of your space, and provide us additional information about your room and project. You will also be afforded the opportunity to have a phone call, online chat or email with a contractor. The contractor will then provide you an estimate to accomplish your design. VIRTUAL will provide you a shoppable list of products from VIRTUAL approved vendors.")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Account Security.")]), _vm._v(" Your account is personal to you, and you may not share your account information with, or allow access to your account by, any third party. As you will be responsible for all activity that occurs under your access credentials, you agree to use reasonable efforts to prevent unauthorized access to or use of the Service and to preserve the confidentiality of your username and password, and any device that you use to access the Service. You agree to notify us immediately of any breach in secrecy of your log-in information. If you have any reason to believe that your account information has been compromised or that your account has been accessed by a third party, you agree to immediately notify us by e-mail to "), _c("a", {
    attrs: {
      href: "mailto:ciinfo@wevisu.com"
    }
  }, [_vm._v("ciinfo@wevisu.com")]), _vm._v(". You will be solely responsible for the losses incurred by VIRTUAL and others due to any unauthorized use of your account.")])])]), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Content You Submit; License Grants from You.\n                        "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_c("u", [_vm._v("Your Content.")]), _vm._v(' If you are a Client, you may be able to create, post, or share content, such as messages, comments, or pictures of your space, floor plans and household objects, on or through the Service ("'), _c("b", [_vm._v("Your Content")]), _vm._v('") with VIRTUAL. Your Content may be made public, so do not upload any confidential content. VIRTUAL claims no ownership or control over Your Content. You or a thirdparty licensor, as appropriate, retain all copyright, patent, and trademark rights to any of Your Content that you post on or through the Service. You are responsible for protecting those rights. Separately, you may give VIRTUAL or VIRTUAL’s agent the right to take photos or record video of areas of your home after the design services are complete ("'), _c("b", [_vm._v("After Images")]), _vm._v('").')]), _vm._v(" "), _c("li", [_vm._v("You, and not VIRTUAL, are responsible and liable for Your Content. Because we do not control the Your Content or the content posted on or through the Service by other users (collectively with Your Content, “UGC”), we cannot and do not warrant or guarantee the truthfulness, integrity, suitability, or quality of that UGC. You also agree and understand that by accessing this Service, you may encounter UGC that you may consider to be objectionable. We have no responsibility for any UGC, including without limitation any errors or omissions therein.")]), _vm._v(" "), _c("li", [_vm._v("We may disclose and/or remove UGC. VIRTUAL has certain rights. We have the right (but do not assume the obligation) to:\n                                "), _c("ol", {
    attrs: {
      type: "a"
    }
  }, [_c("li", [_vm._v("monitor all UGC")]), _vm._v(" "), _c("li", [_vm._v("remove or block any UGC at any time without notice at our sole and absolute discretion;")]), _vm._v(" "), _c("li", [_vm._v("disclose any UGC and the identity of the user who posted it in response to a subpoena or whenever we believe that disclosure is appropriate to comply with the law or a court order, to prevent or investigate a possible crime or other violation of law, to protect the rights of VIRTUAL or others, or to enforce these terms; and")]), _vm._v(" "), _c("li", [_vm._v("terminate your access to and use of this Service, or to modify, edit or block your transmissions thereto, for any reason and in our sole discretion.")])])]), _vm._v(" "), _c("li", [_vm._v("    You agree that our exercise of such discretion shall not render us the owners of UGC you post, and that you will retain ownership thereof as described above. ")]), _vm._v(" "), _c("li", [_vm._v("Your Content cannot be unlawful, harmful, hateful, threatening, abusive, harassing, libelous, defamatory, obscene, vulgar, pornographic, profane, racially disparaging, indecent, or invasive of another’s privacy.")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("License Grants to VIRTUAL")]), _vm._v(". By creating, posting, or sharing Your Content on or through the Service, or allowing VIRTUAL to take, obtain, or record After Images, you grant VIRTUAL a world-wide, non-exclusive, sub-licensable, royalty-free, fully paid, transferable, perpetual, irrevocable license to use, modify, remove, publish, transmit, or display Your Content and After Images in any and all media or form of communication now existing or hereinafter developed in order to operate VIRTUAL’s business, and to provide Services, including, without limitation, (a) facilitate a design or recommended product list for the Client (b) advertise and promote the Service, and (c) with regard to After Images only, for any lawful business purpose.")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("You Must Have Rights to the Content You Post.")]), _vm._v(" You represent and warrant that: (i) you own Your Content or otherwise have the right to grant the license set forth in the EULA, (ii) the posting and use of Your Content on or through the Service, or of the After Images does not violate the privacy rights, publicity rights, copyrights, contract rights, intellectual property rights, or any other rights of any person, and (iii) the posting of Your Content on the Service does not result in a breach of contract between you and a third party. You agree to pay for all royalties, fees, and any other monies owing any person by reason of Your Content that you post on or through the Service You also acknowledge and agree that Your Content and After Images is non-confidential and non-proprietary.")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Users may message each other through the Service.")]), _vm._v(" You agree that your use of the Service will not include sending unsolicited marketing messages or broadcasts (i.e. spam). VIRTUAL will utilize any means possible to block spammers and abusers from using the Service If you believe spam originated from the Service, please email us immediately at "), _c("a", {
    attrs: {
      href: "mailto:ciinfo@wevisu.com"
    }
  }, [_vm._v("ciinfo@wevisu.com")]), _vm._v(".")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Fees; Payments.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v('Fees. The estimated fee (the "'), _c("b", [_vm._v("Estimated Fee")]), _vm._v('") for the Service(s) and Items purchased through the Service (e.g., all design package services and merchandise products) will be set forth during the ordering process for Service(s) that you go through on the Website. The Estimated Fee on Items purchased through the Services is based on the price known to VIRTUAL at the time you checkout through the Services. Because VIRTUAL works with a number of Vendors, we do not have control over the pricing of all Items offered through our Services (see Section 7.1). After you place your order, VIRTUAL will notify you of any discrepancies in Item prices, in which case you will have the option of accepting the actual price or rejecting the Item for which the price changed. VIRTUAL will process the order (a) for all Items for which the price did not change from the Estimated Fee, and (b) for all Items for which you have approved a price change from the Estimated Fee (where the final fee for the items in (a) and (b) is the “Fee”). The Fee is due and payable in advance of Client’s design, product recommendation process, or order placement of Items.')]), _vm._v(" "), _c("li", [_c("u", [_vm._v(" Payments.")]), _vm._v(" The Service currently uses third parties to process payments. Our third- party payment processors accept payments through various credit cards, as detailed on the applicable payment screen. All monetary transactions on the Service take place in U.S. Dollars. When you use the Service to place an order for Items, you authorize the purchase and delivery of the Items (subject to any confirmation of Item prices, as stated in Section 6.1). You agree that VIRTUAL will obtain a temporary pre-authorization of your credit card to cover the cost of the Items you have purchased, along with any estimated taxes, fees, and shipping costs, and excluding any unvalidated promotions. You acknowledge that taxes and shipping costs are estimated at the time of checkout, and you agree to any final tax and/or shipping costs as calculated by VIRTUAL, based on your shipping location and the Fee. Your credit card statement will reflect the final total amount charged to you upon order completion. ")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Taxes.")]), _vm._v(' The Fees are exclusive of tax. Clients are responsible for all applicable government taxes, fees, and service charges ("Taxes") resulting from a transaction occurring through the Service. VIRTUAL will collect and remit such Taxes from Clients where required by law, but a Client may be responsible for additional Taxes not collected by VIRTUAL. All taxes are calculated using the Fee. ')]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Refunds.")]), _vm._v(" VIRTUAL may offer any Client a full or partial refund at VIRTUAL's sole discretion. Please email "), _c("a", {
    attrs: {
      href: "mailto:ciinfo@wevisu.com"
    }
  }, [_vm._v("ciinfo@wevisu.com")]), _vm._v(" to request a refund.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Additional Services From VIRTUAL.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_c("u", [_vm._v("Third Party Purchases.")]), _vm._v(' A Client may wish to purchase certain items ("'), _c("b", [_vm._v("Items")]), _vm._v('") offered by third parties (each, a "'), _c("b", [_vm._v("Vendor")]), _vm._v('") through the Service. A Client may wish to utilize bidding local contractors to perform work on behalf of the Client. VIRTUAL will collect the cost of these Items (as part of the Fee) from you in advance of VIRTUAL placing orders with the Vendor for the purchase of the Item(s). All Vendor terms and conditions apply to these purchases of Items, including return policies and shipping costs. Note that while VIRTUAL uses reasonable efforts to display the current and accurate price for Items, the price for Items is dynamic, and the price displayed on the Service for any particular Item is subject to change. VIRTUAL will confirm Item pricing before charging Client’s credit card. ')]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Information.")]), _vm._v(" VIRTUAL may provide/ sell your personal information to third party contractors in order to identify your location, costs, and to facilitate installation.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Third Party Materials; VIRTUAL Content.\n                    "), _c("ol", {
    staticClass: "num font-weight-normal"
  }, [_c("li", [_vm._v('You understand that by using the Service, you may encounter data, information, applications, materials and other content from third parties, including other users (collectively, "'), _c("b", [_vm._v("Third Party Materials")]), _vm._v('"), and data, information, applications, materials and other content from VIRTUAL (collectively, "VIRTUAL Content" and, together with Third Party Materials, but excluding Your Content, "Service Content"), that may be offensive, indecent, or objectionable Nevertheless, you agree to use the Service at your sole risk and that VIRTUAL shall not have any liability to you for any Service Content that may be found to be offensive, indecent, or that is inaccurate, incomplete, untimely, invalid, illegal, indecent, of poor quality or otherwise objectionable You use the Service, and rely upon any Service Content accessible through the Service, at your sole risk. ')]), _vm._v(" "), _c("li", [_vm._v("In addition, third party services and Service Content that may be accessed from, displayed on or linked to your device are not available in all languages or in all countries VIRTUAL makes no representation that the Service, any third party services, and Service Content are appropriate or available for use in any particular location to the extent you choose to access such services or materials, you do so at your own initiative and are responsible for compliance with any and all applicable laws.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Your Use of the Service and Service Content.\n                    "), _c("ol", {
    staticClass: "num font-weight-normal"
  }, [_c("li", [_vm._v("Your right to use the Service is a privilege, not a right, and is expressly conditioned on the following:")]), _vm._v(" "), _c("li", [_vm._v("You may access the Service solely as intended through the provided functionality of the Service and as permitted under the EULA. ")]), _vm._v(" "), _c("li", [_vm._v("You shall not copy, reproduce, distribute, publish, display, perform, transmit, stream or broadcast any part of the Service, Website or App, or content you encounter on through the Service without VIRTUAL's prior written authorization, including, by way of example and not limitation, by doing or engaging in any of the following without VIRTUAL's express written consent:\n                            "), _c("ol", {
    attrs: {
      type: "a"
    }
  }, [_c("li", [_vm._v("altering, defacing, mutilating or otherwise bypassing any approved software through which the Service is made available; and ")]), _vm._v(" "), _c("li", [_vm._v("using any trademarks, service marks, design marks, logos, photographs or other content belonging to VIRTUAL or obtained from the Service. ")])])]), _vm._v(" "), _c("li", [_vm._v("You shall not bypass, circumvent, damage or otherwise interfere with any security or other features of the Website or App designed to control the manner in which the Service is used, harvest or mine Service Content from the Service, or otherwise access or use the Service in a manner inconsistent with individual human usage. You shall not copy or scrape any Service Content. ")]), _vm._v(" "), _c("li", [_vm._v("You shall not undertake, cause, permit or authorize the translation, reverse engineering, disassembling or hacking of any aspect of the Website or Service, including any Service Content available on or through the Service, or attempt to do any of the foregoing, except and solely to the extent permitted by the EULA, the authorized features of the Service, or by law, or otherwise attempt to use or access any portion of the Service other than as intended by VIRTUAL.")]), _vm._v(" "), _c("li", [_vm._v("You shall not use, display, mirror, frame or utilize framing techniques to enclose the Service, including any Service Content available on or through the Service, or any portion thereof, through any other application or website, unless and solely to the extent VIRTUAL makes available the means for embedding any part of the Service or Service Content. ")]), _vm._v(" "), _c("li", [_vm._v("You shall not access, tamper with, or use non-public areas of the Service, VIRTUAL's (and its hosting company's) computer systems and infrastructure, or the technical delivery systems of VIRTUAL's providers. ")]), _vm._v(" "), _c("li", [_vm._v("You shall not harass, abuse, harm or advocate or incite harassment, abuse or harm of another person or group, including VIRTUAL's employees and other users. ")]), _vm._v(" "), _c("li", [_vm._v("You shall not provide any false personal information to VIRTUAL or any other user, or create a false identify or impersonate another person or entity in any way.")]), _vm._v(" "), _c("li", [_vm._v("You shall not create a new account with VIRTUAL, without VIRTUAL's express written consent, if VIRTUAL has previously disabled an account of yours. ")]), _vm._v(" "), _c("li", [_vm._v("You shall not solicit, or attempt to solicit, personal information from other users.")]), _vm._v(" "), _c("li", [_vm._v("You shall not restrict, discourage or inhibit any person from using the Service, disclose personal information about a third person on the Service or obtained from the Service without the consent of such person, or collect information about users.")]), _vm._v(" "), _c("li", [_vm._v("You shall not use the Service, without VIRTUAL's express written consent, to communicate or facilitate any commercial advertisement or solicitation, except as expressly permitted in the EULA. ")]), _vm._v(" "), _c("li", [_vm._v("You shall not gain or attempt to gain unauthorized access to the Service, to other users' accounts, names or personally identifiable information, or to other computers or websites connected or linked to the Service.")]), _vm._v(" "), _c("li", [_vm._v("You shall not post, transmit or otherwise make available any virus, worm, spyware or any other computer code, file or program that may or is intended to disable, overburden, impair, damage or hijack the operation of any hardware, software or telecommunications equipment, or any other aspect of the Service or communications equipment and computers connected to the Service. ")]), _vm._v(" "), _c("li", [_vm._v("You shall not interfere with or disrupt the Service, or networks or servers connected to the Service, or violate the regulations, policies or procedures of such networks or servers. ")]), _vm._v(" "), _c("li", [_vm._v("You shall not violate any applicable federal, state or local laws or regulations or the EULA. ")]), _vm._v(" "), _c("li", [_vm._v("    You shall not assist or permit any persons in engaging in any of the activities describe above.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Consent to Use of Data.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v("You agree that VIRTUAL may collect, use, and sell to third party vendors technical data and related information, including, but not limited to, UDID, contacts, usage data, location and other technical information about your device, system and application software, and peripherals, that is gathered periodically to facilitate the provision of software updates, product support, and other services to you (if any) related to the Service, and to anonymously track and report your activity inside of the Service, including for analytics purposes Please see the Privacy Policy.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Ownership.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v("The Service, Service Content, After Images, and the media and materials contained therein, including all intellectual property rights therein, are the sole and exclusive property of VIRTUAL and its licensors. Except for the limited licenses expressly granted to you under the EULA, no other rights, licenses, or immunities are granted or will be deemed to be granted to you under the EULA, either expressly, or by implication, estoppel or otherwise.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Feedback.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v('We appreciate hearing from our users and welcome your comments regarding the Service Please be advised, however, that if you send us creative ideas, suggestions, inventions, or materials ("Creative Ideas"), we will:\n                            '), _c("ol", {
    attrs: {
      type: "a"
    }
  }, [_c("li", [_vm._v("own, exclusively, all now known or later discovered rights to the Creative Ideas;")]), _vm._v(" "), _c("li", [_vm._v("not be subject to any obligation of confidentiality and will not be liable for any use or disclosure of any Creative Ideas; and")]), _vm._v(" "), _c("li", [_vm._v("be entitled to unrestricted use of the Creative Ideas for any purpose whatsoever, commercial or otherwise, without compensation to you or any other person.")])])])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Consequences of Violating These Terms.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v("We reserve the right to suspend or terminate your account and prevent access to the Service for any reason, at our discretion. We reserve the right to refuse to provide the Service to you in the future. VIRTUAL may review and remove any of Your Content at any time for any reason, including activity which, in its sole judgment: violates the EULA; violates applicable laws, rules, or regulations; is abusive, disruptive, offensive or illegal; or violates the rights of, or harms or threatens the safety of, Users of the Service. You are responsible for any claims, fees, fines, penalties, and other liability incurred by us or others caused by or arising out of your breach of the EULA and your use of the Service.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("VIRTUAL’s Liability.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v("Changes to the Service. We may change, suspend, or discontinue any aspect of the Service at any time, including hours of operation or availability of the Service or any feature, without notice or liability. ")]), _vm._v(" "), _c("li", [_vm._v("User Disputes. We are not responsible for any disputes or disagreements between you and any third party you interact with using the Service. This includes disputes between Clients, vendors, and contractors. You assume all risk associated with dealing with third parties and contractors. You agree to resolve disputes directly with the other party. You release VIRTUAL of all claims, demands, and damages in disputes among users of the Service. You shall not involve us in such disputes. Use caution and common sense when using the Service. If you participate in an Installation, you are solely responsible for your interactions with other Users. You understand that VIRTUAL does not currently conduct background checks, including criminal background checks, on its Users or Vendors. VIRTUAL makes no representations or warranties as to the conduct of Users. IN NO EVENT WILL THE RELEASED PARTIES (AS DEFINED BELOW) BE LIABLE FOR ANY DAMAGES WHATSOEVER, WHETHER DIRECT, INDIRECT, GENERAL, SPECIAL, COMPENSATORY, CONSEQUENTIAL, AND/OR INCIDENTAL, ARISING OUT OF OR RELATING TO THE CONDUCT OF YOU OR ANYONE ELSE IN CONNECTION WITH YOUR USE OF THE SERVICE, INCLUDING WITHOUT LIMITATION, BODILY INJURY, EMOTIONAL DISTRESS, AND/OR ANY OTHER DAMAGES RESULTING FROM COMMUNICATIONS OR MEETINGS WITH OTHER USERS OF THIS SERVICE OR PERSONS YOU MEET THROUGH THE SERVICE. YOU AGREE TO TAKE REASONABLE PRECAUTIONS IN ALL INTERACTIONS WITH OTHER USERS OF THE SERVICE, PARTICULARLY IF YOU MEET OFFLINE OR IN PERSON. YOU ASSUME ALL RISK WHEN ENGAGING THE SERVICES OF ANY OTHER USER AND IN CONNECTION WITH USING THE SERVICE, INCLUDING BUT NOT LIMITED TO ANY RISKS ASSOCIATED WITH OBTAINING SERVICES FROM ANY DESIGNER OR PROVIDING ANY SERVICES TO ANY CLIENT, INCLUDING ALL RISKS OF PHYSICAL OR EMOTIONAL INJURY OR HARM RESULTING ANY WAY OR ARISING OUT OF INSTALLATION SERVICES OR CLIENTS OBTAINED THROUGH THE SERVICE. ALL USERS, INCLUDING CLIENTS AND DESIGNERS, HEREBY EXPRESSLY AGREE NOT TO HOLD THE RELEASED PARTIES LIABLE FOR ANY INSTALLATION, INSTRUCTION, ADVICE OR SERVICES DELIVERED WHICH ORIGINATED THROUGH THE SERVICE AND THE RELEASED PARTIES EXPRESSLY DISCLAIM ANY LIABILITY WHATSOEVER FOR ANY DAMAGE, SUITS, CLAIMS, AND/OR CONTROVERSIES THAT ARISE OR RELATED IN ANY WAY TO THE SERVICE, THE INFORMATION PROVIDED THROUGH THE SERVICE AND THE SERVICES PROVIDED BY OR TO ANY USER OF THE SERVICE.")]), _vm._v(" "), _c("li", [_vm._v("Content Accuracy. We make no representations about accuracy, reliability, completeness, or timeliness of any contents of the Service, including designs. Similarly, we make no representations about accuracy, reliability, completeness, or timeliness of any data from a third-party service provider or the quality or nature of third-party products or services obtained through the Service. Use the Service at your own risk. ")]), _vm._v(" "), _c("li", [_vm._v("Third-Party Websites. The Service may include links to third party websites and applications. You are responsible for evaluating whether you want to access or use them. We are not responsible for and do not endorse any features, content, advertising, products, or other materials on other websites or applications. You assume all risk and we disclaim all liability arising from your use of them. We make no promises and disclaim all liability of specific results from the use of the Service. ")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Termination.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v("The EULA is effective until terminated by you or VIRTUAL. Your rights under the EULA will terminate automatically without notice from VIRTUAL if you fail to comply with any term(s) of the EULA (including by violating any license restriction provided herein). You may terminate the EULA by uninstalling the App or ceasing use of the Service. Upon any termination of the EULA, you must immediately cease all use of the Service. If you are a contractor that was selected by a user to perform work and you terminate your account before you have completely delivered the Project, you may not be allowed to use the Service in the future.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Disclaimer.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v('"Released Parties" include VIRTUAL and its affiliates, officers, employees, agents, partners, and licensors YOU EXPRESSLY UNDERSTAND AND AGREE THAT: (A) YOUR USE OF THE SERVICE IS AT YOUR SOLE RISK, AND THE SERVICE IS PROVIDED ON AN "AS IS" AND "AS AVAILABLE" BASIS AND THE RELEASED PARTIES EXPRESSLY DISCLAIM ALL WARRANTIES OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, WARRANTIES AS TO PRODUCTS OR SERVICES OFFERED BY BUSINESSES LISTED ON THE SERVICE, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT; (B) THE RELEASED PARTIES MAKE NO WARRANTY THAT (i) THE SERVICE WILL MEET YOUR REQUIREMENTS, (ii) THE SERVICE WILL BE UNINTERRUPTED, TIMELY, SECURE, OR ERROR-FREE, (iii) THE RESULTS THAT MAY BE OBTAINED FROM THE USE OF THE SERVICE, INCLUDING DATA, WILL BE ACCURATE OR RELIABLE, (iv) THE QUALITY OF ANY GOODS, DATA OR SERVICE AVAILABLE ON THE SERVICE WILL MEET YOUR EXPECTATIONS AND, (iv) ANY ERRORS IN THE SERVICE WILL BE CORRECTED; AND (C) ANY MATERIAL OBTAINED THROUGH THE USE OF THE SERVICE IS ACCESSED AT YOUR OWN DISCRETION AND RISK, AND YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR COMPUTER SYSTEM OR MOBILE DEVICE OR LOSS OF DATA THAT RESULTS FROM THE USE OF ANY SUCH MATERIAL.')])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Limitation of Liability.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v("YOU EXPRESSLY UNDERSTAND AND AGREE THAT THE RELEASED PARTIES WILL NOT BE LIABLE TO YOU FOR ANY INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, OR EXEMPLARY DAMAGES, INCLUDING, BUT NOT LIMITED TO, DAMAGES FOR LOSS OF PROFITS, GOODWILL, USE, DATA OR OTHER INTANGIBLE LOSSES (EVEN IF VIRTUAL HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES), RESULTING FROM: (i) THE USE OR THE INABILITY TO USE THE SERVICE; (ii) THE COST OF PROCUREMENT OF SUBSTITUTE GOODS AND SERVICES RESULTING FROM ANY GOODS, DATA, INFORMATION OR SERVICES OBTAINED OR MESSAGES RECEIVED OR TRANSACTIONS ENTERED INTO THROUGH, FROM, OR AS A RESULT OF THE SITE; (iii) UNAUTHORIZED ACCESS TO OR ALTERATION OF YOUR TRANSMISSIONS OR DATA; (iv) STATEMENTS OR CONDUCT OF ANY USER OR THIRD PARTY ON THE SERVICE; (v) YOUR RELIANCE ON CONTENT OR DATA MADE AVAILABLE BY US; OR (vi) ANY OTHER MATTER RELATING TO THE SERVICE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF CERTAIN WARRANTIES OR THE LIMITATION OR EXCLUSION OF LIABILITY FOR INCIDENTAL OR CONSEQUENTIAL DAMAGES. ACCORDINGLY, SOME OF THE ABOVE LIMITATIONS IN THIS PARAGRAPH MAY NOT APPLY TO YOU. TO THE FULLEST EXTENT POSSIBLE BY LAW, THE RELEASED PARTIES' MAXIMUM LIABILITY ARISING OUT OF OR IN CONNECTION WITH THE SERVICE OR YOUR USE OF COMPANY CONTENT, REGARDLESS OF THE CAUSE OF ACTION (WHETHER IN CONTRACT, TORT, BREACH OF WARRANTY, OR OTHERWISE), WILL NOT EXCEED THE GREATER OF (A), IF YOU ARE A CLIENT, THE FEES YOU HAVE PAID TO VIRTUAL, (B) IF YOU ARE A DESIGNER, THE FEES PAID BY VIRTUAL TO YOU, AND (C) $100.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Indemnity.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v("You agree to defend, indemnify, and hold harmless the Released Parties from and against any claims, actions, or demands, including without limitation reasonable legal and accounting fees, alleging or resulting from (i) your use of or reliance on any Third-Party Content, (ii) your use of or reliance on any VIRTUAL Content or designs, or (iii) your breach of the EULA. We will provide notice to you promptly of any such claim, suit, or proceeding.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Third Party Disputes.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v("VIRTUAL IS NOT AFFILIATED WITH ANY SERVICE PROVIDER OR THIRD PARTY SERVICE, AND ANY DISPUTE YOU HAVE WITH ANY SERVICE PROVIDER, THIRD PARTY SERVICE OR OTHER THIRD PARTY, INCLUDING, WITHOUT LIMITATION, ANY OTHER USER OF THE SERVICE, IS DIRECTLY BETWEEN YOU AND SUCH THIRD PARTY, AND YOU IRREVOCABLY RELEASE THE RELEASED PARTIES FROM ANY AND ALL CLAIMS, DEMANDS AND DAMAGES (ACTUAL AND CONSEQUENTIAL) OF EVERY KIND AND NATURE, KNOWN AND UNKNOWN, ARISING OUT OF OR IN ANY WAY CONNECTED WITH SUCH DISPUTES.")])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Copyright Policy.\n                    "), _c("ol", {
    staticClass: "font-weight-normal num"
  }, [_c("li", [_vm._v('The Digital Millennium Copyright Act of 1998 (the "DMCA") provides recourse for copyright owners who believe that material appearing on the Internet infringes their rights under U.S. copyright law. If you believe in good faith that materials posted on the Service infringe your copyright, you (or your agent) may send VIRTUAL a "Notification of Claimed Infringement" requesting that the material be removed, or access to it blocked The notice must include the following information:\n                            '), _c("ol", {
    attrs: {
      type: "a"
    }
  }, [_c("li", [_vm._v("A physical or electronic signature of a person authorized to act on behalf of the owner of the works that have been allegedly infringed;")]), _vm._v(" "), _c("li", [_vm._v("Identification of the copyrighted work alleged to have been infringed (or if multiple copyrighted works located on the Service are covered by a single notification, a representative list of such works);")]), _vm._v(" "), _c("li", [_vm._v("Identification of the specific material alleged to be infringing or the subject of infringing activity, and information reasonably sufficient to allow VIRTUAL to locate the material on the Service; ")]), _vm._v(" "), _c("li", [_vm._v("Your name, address, telephone number, and email address (if available);")]), _vm._v(" "), _c("li", [_vm._v("A statement that you have a good faith belief that use of the material in the manner complained of is not authorized by the copyright owner, its agent, or the law; and")]), _vm._v(" "), _c("li", [_vm._v("A statement that the information in the notification is accurate, and under penalty of perjury, that the complaining party is authorized to act on behalf of the owner of an exclusive right that is allegedly infringed.")])])]), _vm._v(" "), _c("li", [_vm._v("If you believe in good faith that a notice of copyright infringement has been wrongly filed against you, the DMCA permits you to send VIRTUAL a counter-notice.")]), _vm._v(" "), _c("li", [_vm._v("Notices and counter-notices must meet the then-current statutory requirements imposed by the DMCA; see http://www.loc.gov/copyright/ for details. If you believe your copyrighted content has been displayed inappropriately on the Service, please contact our Designated Agent as noted below. Consult your legal advisor and see 17 U.S.C. ¤512 before filing a notice or counter-notice as there are penalties for false claims under the DMCA:\n                            "), _c("address", {
    staticClass: "d-block p-3"
  }, [_vm._v("\n                                Designated Copyright Agent"), _c("br"), _vm._v("\n                                VIRTUAL SHOWROOM DESIGN INC"), _c("br"), _vm._v("\n                                1000 HARVEY DR APT #660"), _c("br"), _vm._v("\n                                WALNUT CREEK CA 94597\n                            ")])])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Dispute Resolution.\n                    "), _c("ol", {
    staticClass: "num font-weight-normal"
  }, [_c("li", [_vm._v("The EULA and the relationship between you and VIRTUAL will be governed by the laws of the State of California. You and VIRTUAL agree to submit to the personal and exclusive arbitration of any disputes relating to your use of the Service under the rules of the American Arbitration Association. Any such arbitration, to the extent necessary, shall be conducted in Contra Costa County in the State of California. You covenant not to sue VIRTUAL in any other forum. ")]), _vm._v(" "), _c("li", [_vm._v("You also acknowledge and understand that, with respect to any dispute with the Released Parties arising out of or relating to your use of the Service or the EULA:\n                            "), _c("ol", {
    attrs: {
      type: "a"
    }
  }, [_c("li", [_vm._v("YOU ARE GIVING UP YOUR RIGHT TO HAVE A TRIAL BY JURY;")]), _vm._v(" "), _c("li", [_vm._v("YOU ARE GIVING UP YOUR RIGHT TO SERVE AS A REPRESENTATIVE, AS A PRIVATE ATTORNEY GENERAL, OR IN ANY OTHER REPRESENTATIVE CAPACITY, OR TO PARTICIPATE AS A MEMBER OF A CLASS OF CLAIMANTS, IN ANY LAWSUIT INVOLVING ANY SUCH DISPUTE; AND")]), _vm._v(" "), _c("li", [_vm._v("YOU MUST FILE ANY CLAIM WITHIN ONE (1) YEAR AFTER SUCH CLAIM AROSE OR IT IS FOREVER BARRED.")])])])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Return Policy.\n                    "), _c("ol", {
    staticClass: "num font-weight-normal"
  }, [_c("li", [_vm._v("For Customers:\n                            "), _c("ol", {
    attrs: {
      type: "a"
    }
  }, [_c("li", [_vm._v("Customers have up to 12 days to return any item.")]), _vm._v(" "), _c("li", [_vm._v("Customers must ship the item directly to vendor at their cost.")]), _vm._v(" "), _c("li", [_vm._v("The initial cost to ship the returned item will be deducted from the Customers refund. This is to be considered a “restocking” fee.")]), _vm._v(" "), _c("li", [_vm._v("Refunds only for the item(s) themselves will be credited back to customers' credit/debit cards upon the vendor receipt of a returned item.")])])]), _vm._v(" "), _c("li", [_vm._v("For Vendors:\n                            "), _c("ol", {
    attrs: {
      type: "a"
    }
  }, [_c("li", [_vm._v("Vendors have 30 days to apply a customer’s refund once an item has been returned by Customer.")]), _vm._v(" "), _c("li", [_vm._v("Should a customer return an item, only the cost of the item itself need be reimbursed.")]), _vm._v(" "), _c("li", [_vm._v("All shipping costs, including the vendors initial cost to ship an item will be paid, in full, prior to a refund being initiated. This cost will be deducted automatically from the customer’s refund.")]), _vm._v(" "), _c("li", [_vm._v("The reimbursement of the initial cost to ship an item shall be considered a “restocking” fee and will be sent to the Vendor as such.")])])])])]), _vm._v(" "), _c("li", {
    staticClass: "font-weight-bold"
  }, [_vm._v("Miscellaneous.\n                    "), _c("ol", {
    staticClass: "num font-weight-normal"
  }, [_c("li", [_c("u", [_vm._v("Assignment.")]), _vm._v(" You may not assign this EULA or any of the rights or licenses granted hereunder, directly or indirectly, including by sale, merger, change of control, operation of law or otherwise, without the prior written consent of VIRTUAL. VIRTUAL may assign the EULA, including all its rights hereunder, without restriction.")]), _vm._v(" "), _c("li", [_c("u", [_vm._v("Survival.")]), _vm._v(" The provisions of the EULA that are intended to survive the termination of the EULA by their nature will survive the termination of the EULA, including, but not limited to, Sections 2 (General), 5 (Content You Submit; License Grants from You), 8 (Third Party Software), 9 (Your Use of the Service and Service Content), 10 (Consent to Use of Data), 11 (Ownership), 12 (Feedback), 14 (VIRTUAL's Liability), 15 (Termination), 16 (Disclaimer), 17 (Limitation of Liability), 18 (Indemnity), 19 (Third Party Disputes), 20 (Copyright Policy), 21 (Dispute Resolution), and 22 (Miscellaneous).")]), _vm._v(" "), _c("li", [_vm._v("Consent to Electronic Communications. By using the Service, you consent to receiving certain electronic communications from us as further described in our Privacy Policy. Please read our Privacy Policy to learn more about your choices regarding our electronic communications practices. You agree that any notices, agreements, disclosures, or other communications that we send to you electronically will satisfy any legal communication requirements, including that such communications be in writing.")]), _vm._v(" "), _c("li", [_vm._v("The EULA, together with the Privacy Policy and any other agreements expressly incorporated by reference herein, constitute the entire and exclusive understanding and agreement between you and VIRTUAL regarding your use of and access to the Service, and, except as expressly permitted above, may be amended only by a written agreement signed by authorized representatives of all parties to the EULA. The failure to require performance of any provision will not affect our right to require performance at any time thereafter, nor will a waiver of any breach or default of the EULA or any provision of the EULA constitute a waiver of any subsequent breach or default or a waiver of the provision itself. Use of section headers in the EULA is for convenience only and will not have any impact on the interpretation of particular provisions. In the event that any part of the EULA is held to be invalid or unenforceable, the unenforceable part shall be given effect to the greatest extent possible and the remaining parts will remain in full force and effect. You agree that no joint venture, partnership, employment, or agency relationship exists between you and VIRTUAL as a result of the EULA or use of the Service.")]), _vm._v(" "), _c("li", [_vm._v("Contacting VIRTUAL. You can contact Virtual at\n                            "), _c("address", {
    staticClass: "d-block font-weight-bold"
  }, [_vm._v("\n                                VIRTUAL SHOWROOM DESIGN INC"), _c("br"), _vm._v("\n                                1000 HARVEY DR APT #660"), _c("br"), _vm._v("\n                                WALNUT CREEK CA 94597\n                            ")])])])])])])])]);
}];
render._withStripped = true;


/***/ }),

/***/ "./resources/js/pages/Terms_conditions.vue":
/*!*************************************************!*\
  !*** ./resources/js/pages/Terms_conditions.vue ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Terms_conditions_vue_vue_type_template_id_0ec6a9f9___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Terms_conditions.vue?vue&type=template&id=0ec6a9f9& */ "./resources/js/pages/Terms_conditions.vue?vue&type=template&id=0ec6a9f9&");
/* harmony import */ var _Terms_conditions_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Terms_conditions.vue?vue&type=script&lang=js& */ "./resources/js/pages/Terms_conditions.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _Terms_conditions_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Terms_conditions_vue_vue_type_template_id_0ec6a9f9___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Terms_conditions_vue_vue_type_template_id_0ec6a9f9___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/pages/Terms_conditions.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/pages/Terms_conditions.vue?vue&type=script&lang=js&":
/*!**************************************************************************!*\
  !*** ./resources/js/pages/Terms_conditions.vue?vue&type=script&lang=js& ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Terms_conditions_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./Terms_conditions.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/Terms_conditions.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Terms_conditions_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/pages/Terms_conditions.vue?vue&type=template&id=0ec6a9f9&":
/*!********************************************************************************!*\
  !*** ./resources/js/pages/Terms_conditions.vue?vue&type=template&id=0ec6a9f9& ***!
  \********************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_Terms_conditions_vue_vue_type_template_id_0ec6a9f9___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../node_modules/vue-loader/lib??vue-loader-options!./Terms_conditions.vue?vue&type=template&id=0ec6a9f9& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/Terms_conditions.vue?vue&type=template&id=0ec6a9f9&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_Terms_conditions_vue_vue_type_template_id_0ec6a9f9___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_Terms_conditions_vue_vue_type_template_id_0ec6a9f9___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2pzL3BhZ2VzL1Rlcm1zX2NvbmRpdGlvbnMudnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9wYWdlcy9UZXJtc19jb25kaXRpb25zLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvVGVybXNfY29uZGl0aW9ucy52dWU/MTliMCIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvVGVybXNfY29uZGl0aW9ucy52dWU/YmI2MyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvVGVybXNfY29uZGl0aW9ucy52dWU/NGNiYiJdLCJuYW1lcyI6WyJuYW1lIiwiY29tcG9uZW50cyIsImRhdGEiLCJjb21wdXRlZCIsIm1vdW50ZWQiLCJtZXRob2RzIiwiY3JlYXRlZCIsInJlbmRlciIsIl92bSIsIl9jIiwiX3NlbGYiLCJfbSIsInN0YXRpY1JlbmRlckZucyIsInN0YXRpY0NsYXNzIiwiX3YiLCJhdHRycyIsImhyZWYiLCJ0eXBlIiwiX3dpdGhTdHJpcHBlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQTJRQTtBQUFBO0VBQ0FBLHdCQURBO0VBRUFDLGNBRkE7RUFLQUMsSUFMQSxrQkFLQTtJQUNBO0VBR0EsQ0FUQTtFQVVBQyxZQVZBO0VBYUFDLE9BYkEscUJBYUEsQ0FFQSxDQWZBO0VBZ0JBQyxXQWhCQTtFQW9CQUMsT0FwQkEscUJBb0JBLENBRUE7QUF0QkEsRzs7Ozs7Ozs7Ozs7O0FDM1FBO0FBQUE7QUFBQTtBQUFBLElBQUlDLE1BQU0sR0FBRyxTQUFTQSxNQUFULEdBQWtCO0VBQzdCLElBQUlDLEdBQUcsR0FBRyxJQUFWO0VBQUEsSUFDRUMsRUFBRSxHQUFHRCxHQUFHLENBQUNFLEtBQUosQ0FBVUQsRUFEakI7O0VBRUEsT0FBT0QsR0FBRyxDQUFDRyxFQUFKLENBQU8sQ0FBUCxDQUFQO0FBQ0QsQ0FKRDs7QUFLQSxJQUFJQyxlQUFlLEdBQUcsQ0FDcEIsWUFBWTtF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MGVmZTExODcuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG48ZGl2PlxuICAgIDwhLS0gIENoYW5nZSBQYXNzd29yZCBGb3JtICAtLT5cbiAgICA8c2VjdGlvbiBjbGFzcz1cImNvbnRhaW5lci1mbHVpZCBzdGVwc0JhclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyIG10LTVcIj5cbiAgICAgICAgICAgIDxoMT5FTkQgVVNFUiBMSUNFTlNFIEFHUkVFTUVOVCBBTkQgVEVSTVMgT0YgU0VSVklDRTwvaDE+XG4gICAgICAgICAgICA8cD5UaGlzIEVuZCBVc2VyIExpY2Vuc2UgQWdyZWVtZW50IGFuZCBUZXJtcyBvZiBTZXJ2aWNlICh0aGUgXCJFVUxBXCIpIGlzIGEgYmluZGluZyBjb250cmFjdCBiZXR3ZWVuIHlvdSwgYW4gaW5kaXZpZHVhbCB1c2VyIChcInlvdVwiKSBvciB0aGUgU3Vic2NyaWJpbmcgRW50aXR5IChkZWZpbmVkIGJlbG93KSBvbiB3aG9zZSBiZWhhbGYgeW91IGFyZSBhY3RpbmcsIGFuZCBWSVJUVUFMIFNIT1dST09NIERFU0lHTiBJTkMuICgg4oCcVklSVFVBTOKAnSBcInVzXCIgb3IgXCJ3ZVwiKSBnb3Zlcm5pbmcgeW91ciB1c2Ugb2YgVklSVFVBTCBTSE9XUk9PTSBERVNJR04gSU5DLiBzZXJ2aWNlcyBhdmFpbGFibGUgdGhyb3VnaCB0aGUgVklSVFVBTCBTSE9XUk9PTSBERVNJR04gd2Vic2l0ZSAodGhlIFwiV2Vic2l0ZVwiKSBhbmQgdGhlIFZJUlRVQUwgU0hPV1JPT00gREVTSUdOIG1vYmlsZSBhcHBsaWNhdGlvbihzKSAodGhlIOKAnEFwcChzKeKAnSksIHdoZXJlIHRob3NlIHNlcnZpY2VzIGFyZSB0aGUg4oCcU2VydmljZeKAnSksIGFzIHdlbGwgYXMgeW91ciBhY2Nlc3MgdG8gYW5kIHVzZSBvZiB0aGUgV2Vic2l0ZSBhbmQgQXBwLiBCWSBJTlNUQUxMSU5HIE9SIE9USEVSV0lTRSBBQ0NFU1NJTkcgT1IgVVNJTkcgVEhFIFNFUlZJQ0UsIFlPVSBBR1JFRSBUSEFUIFlPVSBIQVZFIFJFQUQsIFVOREVSU1RPT0QsIEFORCBBR1JFRSBUTyBCRSBCT1VORCBCWSBUSEUgRVVMQS4gSUYgWU9VIERPIE5PVCBBR1JFRSBUTyBUSEUgRVVMQSwgVEhFTiBZT1UgTUFZIE5PVCBVU0UgVEhFIFNFUlZJQ0UuPC9wPlxuICAgICAgICAgICAgPHA+VG8gaGF2ZSBhIGNvcHkgb2YgdGhlIEVVTEEgYW5kIHRoZSBWSVJUVUFMIFNIT1dST09NIERFU0lHTiBQcml2YWN5IFBvbGljeSAodGhlIFwiUHJpdmFjeSBQb2xpY3lcIikgc2VudCB0byB5b3UsIGNvbnRhY3QgVklSVFVBTCBTSE9XUk9PTSBERVNJR04gYXQgPGEgaHJlZj1cIm1haWx0bzpjaWluZm9Ad2V2aXN1LmNvbVwiPmNpaW5mb0B3ZXZpc3UuY29tPC9hPi48L3A+XG4gICAgICAgICAgICA8b2wgY2xhc3M9XCJudW1cIiB0eXBlPVwiMVwiPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImZvbnQtd2VpZ2h0LWJvbGRcIj5TdW1tYXJ5IG9mIE1hdGVyaWFsIFRlcm1zLlxuICAgICAgICAgICAgICAgICAgICA8b2wgY2xhc3M9XCJudW0gZm9udC13ZWlnaHQtbm9ybWFsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXMgcHJvdmlkZWQgaW4gZ3JlYXRlciBkZXRhaWwgaW4gdGhlIEVVTEEgKGFuZCB3aXRob3V0IGxpbWl0aW5nIHRoZSBleHByZXNzIGxhbmd1YWdlIG9mIHRoZSBFVUxBKSwgeW91IGFja25vd2xlZGdlIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2wgdHlwZT1cImFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnlvdSBjb25zZW50IHRvIHRoZSBjb2xsZWN0aW9uLCB1c2UsIGFuZCBkaXNjbG9zdXJlIG9mIHlvdXIgcGVyc29uYWxseSBpZGVudGlmaWFibGUgaW5mb3JtYXRpb24gaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBQcml2YWN5IFBvbGljeSwgaW5jbHVkaW5nIHdpdGggcmVzcGVjdCB0byB0aGUgY29sbGVjdGlvbiBvZiBsb2NhdGlvbiBpbmZvcm1hdGlvbjs8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+dGhlIEFwcCwgV2Vic2l0ZSBhbmQgU2VydmljZSBpcyBwcm92aWRlZCBcImFzIGlzXCIgd2l0aG91dCB3YXJyYW50aWVzIG9mIGFueSBraW5kIGFuZCBWSVJUVUFM4oCZcyBsaWFiaWxpdHkgdG8geW91IGlzIGxpbWl0ZWQ7IGFuZCA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+ZGlzcHV0ZXMgYXJpc2luZyBoZXJldW5kZXIgd2lsbCBiZSByZXNvbHZlZCBieSBiaW5kaW5nIGFyYml0cmF0aW9uLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJmb250LXdlaWdodC1ib2xkXCI+R2VuZXJhbC5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJmb250LXdlaWdodC1ub3JtYWxcIj5UaGUgQ29tcGFueSBpcyBlbmdhZ2VkIGluIHRoZSBidXNpbmVzcyBvZiBhbiBvbmxpbmUgc3lzdGVtIHRoYXQgb2ZmZXJzIGEgbXVsdGktdmVuZG9yIG1hcmtldHBsYWNlIHRoYXQgcHJvdmlkZXMgdXNlcnMgd2l0aCBlbmdhZ2luZywgaW50ZXJhY3RpdmUgdmlzdWFsaXphdGlvbiBleHBlcmllbmNlcyBhbmQgcHJvdmlkZXMgdmFsdWFibGUgaW5zaWdodHMgZm9yIHRoZSByZXNpZGVudGlhbCBjb25zdHJ1Y3Rpb24gYW5kIHJlbW9kZWxpbmcgaW5kdXN0cnkuIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJmb250LXdlaWdodC1ub3JtYWxcIj5UaGlzIHBsYXRmb3JtIGFsbG93cyBjb250cmFjdG9ycyBhbmQgZGVzaWduZXJzIHRvIGNyZWF0ZSB0aGVpciB2aXJ0dWFsIHN0dWRpb3MgYW5kIGRpc3BsYXkgYW5kIHNlbGwgdmFyaW91cyBhY2Nlc3NvcmllcyAmIGZpdHRpbmdzIGZvciBsaXZpbmcgcm9vbXMsIGJhdGhyb29tcywga2l0Y2hlbnMsIGV0Yy4gYW5kIGZvciBwb3RlbnRpYWwgQ3VzdG9tZXJzIHRvIHZpZXcgdGVtcGxhdGVzLCB1cGxvYWQgdGhlaXIgb3duIHRlbXBsYXRlLCBhbmQgb3IgaGlyZSBkZXNpZ25lcnMvY29udHJhY3RvcnMgZnJvbSB0aGUgcGxhdGZvcm0uICh0aGUg4oCcU2VydmljZXPigJ0pXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPG9sIHR5cGU9XCJhXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJmb250LXdlaWdodC1ib2xkXCI+IENvbnRyYWN0b3JzIGFuZCBEZXNpZ25lcnMgdXNpbmcgdGhlIFNlcnZpY2UgbWF5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbCB0eXBlPVwiaVwiIGNsYXNzPVwiZm9udC13ZWlnaHQtbm9ybWFsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZGQgcHJvZHVjdHMgKHdpdGhvdXQgcHVyY2hhc2luZykgdG8gdGhlaXIgdmlydHVhbCBzaG93cm9vbSBmcm9tIG11bHRpcGxlIHZlbmRvcnMuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlB1cmNoYXNlIHByb2R1Y3RzIGZyb20gdmVuZG9ycyB0byBhZGQgdG8gdGhlaXIgY2FydCBmb3IgcHVyY2hhc2Ugb3IgYWRkIHByb2R1Y3RzIHRvIHRoZWlyIHNob3dyb29tIHdpdGhvdXQgcHVyY2hhc2luZy48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+ICAgIENvbGxhYm9yYXRlIHdpdGggYW5kL29yIGludml0ZSBhIGRlc2lnbmVyIHRvIGNoYXQgYW5kIHByb3ZpZGUgY3VzdG9tIHJvb20gZGVzaWduLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJmb250LXdlaWdodC1ib2xkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVuZG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+IFZlbmRvcnMgdXNpbmcgdGhlIFNlcnZpY2UgbWF5OjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZGQgcHJvZHVjdHMgb24gdGhlIFNlcnZpY2UgZm9yIHVzZSBieSBDb250cmFjdG9ycyBhbmQgZGVzaWduZXJzIHRvIHNob3cgY3VzdG9tZXJzIGl04oCZcyB1c2UgaW4gdmlydHVhbCBzaG93IHJvb21zLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TZWxsIHByb2R1Y3RzIG9uIHRoZSBwbGF0Zm9ybSB0byBjdXN0b21lcnMgdGhyb3VnaCB0aGUgVmlydHVhbCBzaG93cm9vbSBwbGF0Zm9ybS48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q29sbGFib3JhdGUgd2l0aCBvdGhlciB1c2VycyB0byBkaXNjdXNzIGFuZCBwcm9tb3RlIHRoZWlyIHByb2R1Y3RzLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgICAgICAgICAgICAgIDxvbCBjbGFzcz1cIm51bSBmb250LXdlaWdodC1ub3JtYWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48dT5BY2NlcHRhbmNlIG9mIFByaXZhY3kgUG9saWN5LjwvdT4gWW91ciB1c2Ugb2YgdGhlIFNlcnZpY2UgaXMgc3ViamVjdCB0byB0aGUgUHJpdmFjeSBQb2xpY3ksIHdoaWNoIGlzIGF2YWlsYWJsZSBieSBlbWFpbCBhbmQgaXMgaGVyZWJ5IGluY29ycG9yYXRlZCBieSByZWZlcmVuY2UgaW50byB0aGUgRVVMQS4gQnkgdXNpbmcgdGhlIFNlcnZpY2UsIHlvdSBhZ3JlZSB0aGF0IHlvdSBoYXZlIHJlYWQsIHVuZGVyc3Rvb2QsIGFuZCBhZ3JlZSB0byB0aGUgZGF0YSBjb2xsZWN0aW9uLCB1c2UsIGFuZCBkaXNjbG9zdXJlIHByb3Zpc2lvbnMgc2V0IGZvcnRoIGluIHRoZSBQcml2YWN5IFBvbGljeS48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjx1PlRoaXJkIFBhcnR5IEZlZXMuPC91PiBZb3UgbWF5IGluY3VyIHRoaXJkIHBhcnR5IGZlZXMgdGhyb3VnaCB1c2Ugb2YgdGhlIFNlcnZpY2UsIHN1Y2ggYXMgZmVlcyBjaGFyZ2VkIGJ5IFZlbmRvcnMgKGRlZmluZWQgYmVsb3cpIGZvciBwcm9kdWN0cyBvciBzZXJ2aWNlcy4gSW4gYWRkaXRpb24sIHlvdSBtYXkgYmUgc3ViamVjdCB0byB0aGlyZCBwYXJ0eSB0ZXJtcywgc3VjaCBhcyBWZW5kb3Jz4oCZIHdhcnJhbnRpZXMgYW5kIHJldHVybiBwb2xpY2llcy4gWW91IGFja25vd2xlZGdlIGFuZCBhZ3JlZSB0aGF0IHlvdSBhcmUgc29sZWx5IHJlc3BvbnNpYmxlIGZvciBhbGwgc3VjaCBmZWVzIGluY3VycmVkIGJ5IHlvdSBmb3IgdXNlIG9mIHRoZSBTZXJ2aWNlLCBhbmQgeW91IGFncmVlIHRvIHBheSBhbGwgc3VjaCBmZWVzIGFuZCBhYmlkZSBieSBhbGwgc3VjaCB0ZXJtcy48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjx1PkNoYW5nZXMgdG8gdGhlIEVVTEEuPC91PiBXZSBtYXkgcmV2aXNlIHRoZSBFVUxBIGF0IGFueSB0aW1lIGJ5IHBvc3RpbmcgYW4gdXBkYXRlZCB2ZXJzaW9uIFlvdSBzaG91bGQgdmlzaXQgdGhpcyBwYWdlIHBlcmlvZGljYWxseSB0byByZXZpZXcgdGhlIG1vc3QgY3VycmVudCBFVUxBLCBiZWNhdXNlIHlvdSBhcmUgYm91bmQgYnkgaXQuIFlvdXIgY29udGludWVkIHVzZSBvZiB0aGUgU2VydmljZSBhZnRlciBhIGNoYW5nZSB0byB0aGUgRVVMQSBjb25zdGl0dXRlcyB5b3VyIGJpbmRpbmcgYWNjZXB0YW5jZSBvZiB0aGUgRVVMQS48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjx1PkVsaWdpYmlsaXR5LjwvdT4gSWYgeW91IGFyZSB1c2luZyBvciBvcGVuaW5nIGFuIGFjY291bnQgb24gdGhlIFNlcnZpY2Ugb24gYmVoYWxmIG9mIGEgY29tcGFueSwgZW50aXR5LCBvciBvcmdhbml6YXRpb24gKGVhY2ggYSBcIlN1YnNjcmliaW5nIEVudGl0eVwiKSwgdGhlbiB5b3UgcmVwcmVzZW50IGFuZCB3YXJyYW50IHRoYXQgeW91OiAoaSkgYXJlIGFuIGF1dGhvcml6ZWQgcmVwcmVzZW50YXRpdmUgb2YgdGhhdCBTdWJzY3JpYmluZyBFbnRpdHkgd2l0aCB0aGUgYXV0aG9yaXR5IHRvIGJpbmQgc3VjaCBlbnRpdHkgdG8gdGhlIEVVTEEgYW5kIChpaSkgYWdyZWUgb24gYmVoYWxmIG9mIHN1Y2ggU3Vic2NyaWJpbmcgRW50aXR5IHRvIGJpbmQgdGhlIFN1YnNjcmliaW5nIEVudGl0eSB0byB0aGUgRVVMQS48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjx1PkNoaWxkcmVuLjwvdT4gTm8gcGFydCBvZiB0aGUgU2VydmljZSBpcyBkaXJlY3RlZCB0byBwZXJzb25zIHVuZGVyIHRoZSBhZ2Ugb2YgMTMuIElGIFlPVSBBUkUgVU5ERVIgMTMgWUVBUlMgT0YgQUdFLCBQTEVBU0UgRE8gTk9UIFVTRSBPUiBBQ0NFU1MgVEhFIFNFUlZJQ0UgQVQgQU5ZIFRJTUUgT1IgSU4gQU5ZIE1BTk5FUi4gSWYgeW91IGFyZSB1bmRlciAxOCB5ZWFycyBvZiBhZ2UsIHlvdSByZXByZXNlbnQgYW5kIGFncmVlIHRoYXQgeW91IHBvc3Nlc3MgdGhlIGxlZ2FsIGNvbnNlbnQgb2YgeW91ciBwYXJlbnQgb3IgZ3VhcmRpYW4gdG8gYWNjZXNzIGFuZCB1c2UgdGhlIFNlcnZpY2UuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImZvbnQtd2VpZ2h0LWJvbGRcIj5TY29wZSBvZiBMaWNlbnNlIHRvIFVzZXJzLlxuICAgICAgICAgICAgICAgICAgICA8b2wgY2xhc3M9XCJudW0gZm9udC13ZWlnaHQtbm9ybWFsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHU+TGljZW5zZSBHcmFudCB0byBZb3UuPC91PiBUaGUgV2Vic2l0ZSBhbmQgQXBwIGlzIGxpY2Vuc2VkLCBub3Qgc29sZCwgdG8geW91IGZvciB1c2Ugb25seSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVVTEEuIFN1YmplY3QgdG8geW91ciBjb21wbGV0ZSBhbmQgb25nb2luZyBjb21wbGlhbmNlIHdpdGggdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBFVUxBLCBWSVJUVUFMIGhlcmVieSBncmFudHMgeW91IGEgcGVyc29uYWwsIGxpbWl0ZWQsIHJldm9jYWJsZSwgbm9uLXRyYW5zZmVyYWJsZSBsaWNlbnNlIHRvIGFjY2VzcyBhbmQgdXNlIHRoZSBXZWJzaXRlIGFuZCB0aGUgQXBwLCBpbiBib3RoIGluc3RhbmNlcyBzb2xlbHkgZm9yIHlvdXIgb3duIHVzZSBvciBmb3IgdGhlIHVzZSBvZiB0aGUgU3Vic2NyaWJpbmcgRW50aXR5IG9uIHdob3NlIGJlaGFsZiB5b3UgYXJlIGF1dGhvcml6ZWQgdG8gYWN0IHRvIGFjY2VzcyBhbmQgcmVjZWl2ZSB0aGUgU2VydmljZS48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjx1PkxpY2Vuc2UgTGltaXRhdGlvbnMuPC91PiBZb3UgbWF5IG5vdCBtb2RpZnksIGFsdGVyLCByZXByb2R1Y2UsIG9yIGRpc3RyaWJ1dGUgdGhlIFdlYnNpdGUgb3IgQXBwLiBZb3UgbWF5IG5vdCByZW50LCBsZWFzZSwgbGVuZCwgc2VsbCwgcmVkaXN0cmlidXRlIG9yIHN1YmxpY2Vuc2UgdGhlIFNlcnZpY2UsIFdlYnNpdGUgb3IgQXBwLiBZb3UgbWF5IG5vdCBjb3B5LCBkZWNvbXBpbGUsIHJldmVyc2UgZW5naW5lZXIsIGN1ZGlzYXNzZW1ibGUsIGF0dGVtcHQgdG8gZGVyaXZlIHRoZSBzb3VyY2UgY29kZSBvZiwgbW9kaWZ5LCBvciBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBvZiBhbnkgcG9ydGlvbiBvZiB0aGUgV2Vic2l0ZSBvciBBcHAsIGFueSB1cGRhdGVzLCBvciBhbnkgcGFydCB0aGVyZW9mIChleGNlcHQgYXMgYW5kIG9ubHkgdG8gdGhlIGV4dGVudCBhbnkgZm9yZWdvaW5nIHJlc3RyaWN0aW9uIGlzIHByb2hpYml0ZWQgYnkgYXBwbGljYWJsZSBsYXcpLCBub3IgYXR0ZW1wdCB0byBkaXNhYmxlIG9yIGNpcmN1bXZlbnQgYW55IHNlY3VyaXR5IG9yIG90aGVyIHRlY2hub2xvZ2ljYWwgbWVhc3VyZSBkZXNpZ25lZCB0byBwcm90ZWN0IHRoZSBTZXJ2aWNlLCBXZWJzaXRlIG9yIEFwcCBvciBhbnkgY29udGVudCBhdmFpbGFibGUgdGhyb3VnaCB0aGUgU2VydmljZS4gSWYgeW91IGJyZWFjaCB0aGVzZSBsaWNlbnNlIHJlc3RyaWN0aW9ucywgb3Igb3RoZXJ3aXNlIGV4Y2VlZCB0aGUgc2NvcGUgb2YgdGhlIGxpY2Vuc2VzIGdyYW50ZWQgaW4gdGhlIEVVTEEsIHRoZW4geW91IG1heSBiZSBzdWJqZWN0IHRvIHByb3NlY3V0aW9uIGFuZCBkYW1hZ2VzLCBhcyB3ZWxsIGFzIGxpYWJpbGl0eSBmb3IgaW5mcmluZ2VtZW50IG9mIGludGVsbGVjdHVhbCBwcm9wZXJ0eSByaWdodHMsIGFuZCBkZW5pYWwgb2YgYWNjZXNzIHRvIHRoZSBTZXJ2aWNlLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHU+QXBwbGljYWJpbGl0eSB0byBVcGRhdGVzLjwvdT4gVGhlIHRlcm1zIG9mIHRoZSBFVUxBIHdpbGwgZ292ZXJuIGFueSB1cGRhdGVzIHByb3ZpZGVkIHRvIHlvdSBieSBWSVJUVUFMIHRoYXQgcmVwbGFjZSBhbmQvb3Igc3VwcGxlbWVudCB0aGUgV2Vic2l0ZSBvciBBcHAsIHVubGVzcyBzdWNoIHVwZ3JhZGUgaXMgYWNjb21wYW5pZWQgYnkgYSBzZXBhcmF0ZSBsaWNlbnNlIG9yIHJldmlzZWQgRVVMQSwgaW4gd2hpY2ggY2FzZSB0aGUgdGVybXMgb2YgdGhhdCBsaWNlbnNlIG9yIHJldmlzZWQgRVVMQSB3aWxsIGdvdmVybi48L2xpPlxuICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiZm9udC13ZWlnaHQtYm9sZFwiPlJlZ2lzdHJhdGlvbiBhbmQgRWxpZ2liaWxpdHkuXG4gICAgICAgICAgICAgICAgICAgIDxvbCBjbGFzcz1cIm51bSBmb250LXdlaWdodC1ub3JtYWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48dT5BY2NvdW50IFR5cGVzIGFuZCBSZWdpc3RyYXRpb24uPC91PiBBbnlvbmUgbWF5IGJyb3dzZSB0aGUgcHVibGljLWZhY2luZyBwYWdlcyBvZiB0aGUgV2Vic2l0ZSwgQXBwLCBhbmQgU2VydmljZSBhbmQgdGFrZSB0aGUgc3R5bGUgcHJvZmlsZSwgYnV0IHRvIHN0YXJ0IHRoZSBjdXN0b20gZGVzaWduIHBsYW4sIHRoZSBjbGllbnQgbXVzdCByZWdpc3Rlci48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjx1PkNsaWVudC48L3U+IFRvIGJlY29tZSBhIFZJUlRVQUwgRGVzaWduIENsaWVudCwgeW91IG11c3QgcHJvdmlkZSB5b3VyIHppcCBjb2RlLCBwaG9uZSBudW1iZXIsIGVtYWlsIGFkZHJlc3MsIG5hbWUsIGFuZCBwYXNzd29yZC4gWW91IHdpbGwgYWxzbyB0YWtlIGEgdXNlciBzdXJ2ZXkgKHRvIGhlbHAgdXMgZGV0ZXJtaW5lIHlvdXIgcHJlZmVycmVkIGRlc2lnbiBzdHlsZXMpLCBwcm92aWRlIHVzIHBob3RvcyBvZiB5b3VyIHNwYWNlLCBhbmQgcHJvdmlkZSB1cyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgcm9vbSBhbmQgcHJvamVjdC4gWW91IHdpbGwgYWxzbyBiZSBhZmZvcmRlZCB0aGUgb3Bwb3J0dW5pdHkgdG8gaGF2ZSBhIHBob25lIGNhbGwsIG9ubGluZSBjaGF0IG9yIGVtYWlsIHdpdGggYSBjb250cmFjdG9yLiBUaGUgY29udHJhY3RvciB3aWxsIHRoZW4gcHJvdmlkZSB5b3UgYW4gZXN0aW1hdGUgdG8gYWNjb21wbGlzaCB5b3VyIGRlc2lnbi4gVklSVFVBTCB3aWxsIHByb3ZpZGUgeW91IGEgc2hvcHBhYmxlIGxpc3Qgb2YgcHJvZHVjdHMgZnJvbSBWSVJUVUFMIGFwcHJvdmVkIHZlbmRvcnMuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48dT5BY2NvdW50IFNlY3VyaXR5LjwvdT4gWW91ciBhY2NvdW50IGlzIHBlcnNvbmFsIHRvIHlvdSwgYW5kIHlvdSBtYXkgbm90IHNoYXJlIHlvdXIgYWNjb3VudCBpbmZvcm1hdGlvbiB3aXRoLCBvciBhbGxvdyBhY2Nlc3MgdG8geW91ciBhY2NvdW50IGJ5LCBhbnkgdGhpcmQgcGFydHkuIEFzIHlvdSB3aWxsIGJlIHJlc3BvbnNpYmxlIGZvciBhbGwgYWN0aXZpdHkgdGhhdCBvY2N1cnMgdW5kZXIgeW91ciBhY2Nlc3MgY3JlZGVudGlhbHMsIHlvdSBhZ3JlZSB0byB1c2UgcmVhc29uYWJsZSBlZmZvcnRzIHRvIHByZXZlbnQgdW5hdXRob3JpemVkIGFjY2VzcyB0byBvciB1c2Ugb2YgdGhlIFNlcnZpY2UgYW5kIHRvIHByZXNlcnZlIHRoZSBjb25maWRlbnRpYWxpdHkgb2YgeW91ciB1c2VybmFtZSBhbmQgcGFzc3dvcmQsIGFuZCBhbnkgZGV2aWNlIHRoYXQgeW91IHVzZSB0byBhY2Nlc3MgdGhlIFNlcnZpY2UuIFlvdSBhZ3JlZSB0byBub3RpZnkgdXMgaW1tZWRpYXRlbHkgb2YgYW55IGJyZWFjaCBpbiBzZWNyZWN5IG9mIHlvdXIgbG9nLWluIGluZm9ybWF0aW9uLiBJZiB5b3UgaGF2ZSBhbnkgcmVhc29uIHRvIGJlbGlldmUgdGhhdCB5b3VyIGFjY291bnQgaW5mb3JtYXRpb24gaGFzIGJlZW4gY29tcHJvbWlzZWQgb3IgdGhhdCB5b3VyIGFjY291bnQgaGFzIGJlZW4gYWNjZXNzZWQgYnkgYSB0aGlyZCBwYXJ0eSwgeW91IGFncmVlIHRvIGltbWVkaWF0ZWx5IG5vdGlmeSB1cyBieSBlLW1haWwgdG8gPGEgaHJlZj1cIm1haWx0bzpjaWluZm9Ad2V2aXN1LmNvbVwiPmNpaW5mb0B3ZXZpc3UuY29tPC9hPi4gWW91IHdpbGwgYmUgc29sZWx5IHJlc3BvbnNpYmxlIGZvciB0aGUgbG9zc2VzIGluY3VycmVkIGJ5IFZJUlRVQUwgYW5kIG90aGVycyBkdWUgdG8gYW55IHVuYXV0aG9yaXplZCB1c2Ugb2YgeW91ciBhY2NvdW50LjwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImZvbnQtd2VpZ2h0LWJvbGRcIj5Db250ZW50IFlvdSBTdWJtaXQ7IExpY2Vuc2UgR3JhbnRzIGZyb20gWW91LlxuICAgICAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPVwiZm9udC13ZWlnaHQtbm9ybWFsIG51bVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48dT5Zb3VyIENvbnRlbnQuPC91PiBJZiB5b3UgYXJlIGEgQ2xpZW50LCB5b3UgbWF5IGJlIGFibGUgdG8gY3JlYXRlLCBwb3N0LCBvciBzaGFyZSBjb250ZW50LCBzdWNoIGFzIG1lc3NhZ2VzLCBjb21tZW50cywgb3IgcGljdHVyZXMgb2YgeW91ciBzcGFjZSwgZmxvb3IgcGxhbnMgYW5kIGhvdXNlaG9sZCBvYmplY3RzLCBvbiBvciB0aHJvdWdoIHRoZSBTZXJ2aWNlIChcIjxiPllvdXIgQ29udGVudDwvYj5cIikgd2l0aCBWSVJUVUFMLiBZb3VyIENvbnRlbnQgbWF5IGJlIG1hZGUgcHVibGljLCBzbyBkbyBub3QgdXBsb2FkIGFueSBjb25maWRlbnRpYWwgY29udGVudC4gVklSVFVBTCBjbGFpbXMgbm8gb3duZXJzaGlwIG9yIGNvbnRyb2wgb3ZlciBZb3VyIENvbnRlbnQuIFlvdSBvciBhIHRoaXJkcGFydHkgbGljZW5zb3IsIGFzIGFwcHJvcHJpYXRlLCByZXRhaW4gYWxsIGNvcHlyaWdodCwgcGF0ZW50LCBhbmQgdHJhZGVtYXJrIHJpZ2h0cyB0byBhbnkgb2YgWW91ciBDb250ZW50IHRoYXQgeW91IHBvc3Qgb24gb3IgdGhyb3VnaCB0aGUgU2VydmljZS4gWW91IGFyZSByZXNwb25zaWJsZSBmb3IgcHJvdGVjdGluZyB0aG9zZSByaWdodHMuIFNlcGFyYXRlbHksIHlvdSBtYXkgZ2l2ZSBWSVJUVUFMIG9yIFZJUlRVQUzigJlzIGFnZW50IHRoZSByaWdodCB0byB0YWtlIHBob3RvcyBvciByZWNvcmQgdmlkZW8gb2YgYXJlYXMgb2YgeW91ciBob21lIGFmdGVyIHRoZSBkZXNpZ24gc2VydmljZXMgYXJlIGNvbXBsZXRlIChcIjxiPkFmdGVyIEltYWdlczwvYj5cIikuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91LCBhbmQgbm90IFZJUlRVQUwsIGFyZSByZXNwb25zaWJsZSBhbmQgbGlhYmxlIGZvciBZb3VyIENvbnRlbnQuIEJlY2F1c2Ugd2UgZG8gbm90IGNvbnRyb2wgdGhlIFlvdXIgQ29udGVudCBvciB0aGUgY29udGVudCBwb3N0ZWQgb24gb3IgdGhyb3VnaCB0aGUgU2VydmljZSBieSBvdGhlciB1c2VycyAoY29sbGVjdGl2ZWx5IHdpdGggWW91ciBDb250ZW50LCDigJxVR0PigJ0pLCB3ZSBjYW5ub3QgYW5kIGRvIG5vdCB3YXJyYW50IG9yIGd1YXJhbnRlZSB0aGUgdHJ1dGhmdWxuZXNzLCBpbnRlZ3JpdHksIHN1aXRhYmlsaXR5LCBvciBxdWFsaXR5IG9mIHRoYXQgVUdDLiBZb3UgYWxzbyBhZ3JlZSBhbmQgdW5kZXJzdGFuZCB0aGF0IGJ5IGFjY2Vzc2luZyB0aGlzIFNlcnZpY2UsIHlvdSBtYXkgZW5jb3VudGVyIFVHQyB0aGF0IHlvdSBtYXkgY29uc2lkZXIgdG8gYmUgb2JqZWN0aW9uYWJsZS4gV2UgaGF2ZSBubyByZXNwb25zaWJpbGl0eSBmb3IgYW55IFVHQywgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiBhbnkgZXJyb3JzIG9yIG9taXNzaW9ucyB0aGVyZWluLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldlIG1heSBkaXNjbG9zZSBhbmQvb3IgcmVtb3ZlIFVHQy4gVklSVFVBTCBoYXMgY2VydGFpbiByaWdodHMuIFdlIGhhdmUgdGhlIHJpZ2h0IChidXQgZG8gbm90IGFzc3VtZSB0aGUgb2JsaWdhdGlvbikgdG86XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbCB0eXBlPVwiYVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPm1vbml0b3IgYWxsIFVHQzwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+cmVtb3ZlIG9yIGJsb2NrIGFueSBVR0MgYXQgYW55IHRpbWUgd2l0aG91dCBub3RpY2UgYXQgb3VyIHNvbGUgYW5kIGFic29sdXRlIGRpc2NyZXRpb247PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5kaXNjbG9zZSBhbnkgVUdDIGFuZCB0aGUgaWRlbnRpdHkgb2YgdGhlIHVzZXIgd2hvIHBvc3RlZCBpdCBpbiByZXNwb25zZSB0byBhIHN1YnBvZW5hIG9yIHdoZW5ldmVyIHdlIGJlbGlldmUgdGhhdCBkaXNjbG9zdXJlIGlzIGFwcHJvcHJpYXRlIHRvIGNvbXBseSB3aXRoIHRoZSBsYXcgb3IgYSBjb3VydCBvcmRlciwgdG8gcHJldmVudCBvciBpbnZlc3RpZ2F0ZSBhIHBvc3NpYmxlIGNyaW1lIG9yIG90aGVyIHZpb2xhdGlvbiBvZiBsYXcsIHRvIHByb3RlY3QgdGhlIHJpZ2h0cyBvZiBWSVJUVUFMIG9yIG90aGVycywgb3IgdG8gZW5mb3JjZSB0aGVzZSB0ZXJtczsgYW5kPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT50ZXJtaW5hdGUgeW91ciBhY2Nlc3MgdG8gYW5kIHVzZSBvZiB0aGlzIFNlcnZpY2UsIG9yIHRvIG1vZGlmeSwgZWRpdCBvciBibG9jayB5b3VyIHRyYW5zbWlzc2lvbnMgdGhlcmV0bywgZm9yIGFueSByZWFzb24gYW5kIGluIG91ciBzb2xlIGRpc2NyZXRpb24uPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4gICAgWW91IGFncmVlIHRoYXQgb3VyIGV4ZXJjaXNlIG9mIHN1Y2ggZGlzY3JldGlvbiBzaGFsbCBub3QgcmVuZGVyIHVzIHRoZSBvd25lcnMgb2YgVUdDIHlvdSBwb3N0LCBhbmQgdGhhdCB5b3Ugd2lsbCByZXRhaW4gb3duZXJzaGlwIHRoZXJlb2YgYXMgZGVzY3JpYmVkIGFib3ZlLiA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3VyIENvbnRlbnQgY2Fubm90IGJlIHVubGF3ZnVsLCBoYXJtZnVsLCBoYXRlZnVsLCB0aHJlYXRlbmluZywgYWJ1c2l2ZSwgaGFyYXNzaW5nLCBsaWJlbG91cywgZGVmYW1hdG9yeSwgb2JzY2VuZSwgdnVsZ2FyLCBwb3Jub2dyYXBoaWMsIHByb2ZhbmUsIHJhY2lhbGx5IGRpc3BhcmFnaW5nLCBpbmRlY2VudCwgb3IgaW52YXNpdmUgb2YgYW5vdGhlcuKAmXMgcHJpdmFjeS48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4gICAgPHU+TGljZW5zZSBHcmFudHMgdG8gVklSVFVBTDwvdT4uIEJ5IGNyZWF0aW5nLCBwb3N0aW5nLCBvciBzaGFyaW5nIFlvdXIgQ29udGVudCBvbiBvciB0aHJvdWdoIHRoZSBTZXJ2aWNlLCBvciBhbGxvd2luZyBWSVJUVUFMIHRvIHRha2UsIG9idGFpbiwgb3IgcmVjb3JkIEFmdGVyIEltYWdlcywgeW91IGdyYW50IFZJUlRVQUwgYSB3b3JsZC13aWRlLCBub24tZXhjbHVzaXZlLCBzdWItbGljZW5zYWJsZSwgcm95YWx0eS1mcmVlLCBmdWxseSBwYWlkLCB0cmFuc2ZlcmFibGUsIHBlcnBldHVhbCwgaXJyZXZvY2FibGUgbGljZW5zZSB0byB1c2UsIG1vZGlmeSwgcmVtb3ZlLCBwdWJsaXNoLCB0cmFuc21pdCwgb3IgZGlzcGxheSBZb3VyIENvbnRlbnQgYW5kIEFmdGVyIEltYWdlcyBpbiBhbnkgYW5kIGFsbCBtZWRpYSBvciBmb3JtIG9mIGNvbW11bmljYXRpb24gbm93IGV4aXN0aW5nIG9yIGhlcmVpbmFmdGVyIGRldmVsb3BlZCBpbiBvcmRlciB0byBvcGVyYXRlIFZJUlRVQUzigJlzIGJ1c2luZXNzLCBhbmQgdG8gcHJvdmlkZSBTZXJ2aWNlcywgaW5jbHVkaW5nLCB3aXRob3V0IGxpbWl0YXRpb24sIChhKSBmYWNpbGl0YXRlIGEgZGVzaWduIG9yIHJlY29tbWVuZGVkIHByb2R1Y3QgbGlzdCBmb3IgdGhlIENsaWVudCAoYikgYWR2ZXJ0aXNlIGFuZCBwcm9tb3RlIHRoZSBTZXJ2aWNlLCBhbmQgKGMpIHdpdGggcmVnYXJkIHRvIEFmdGVyIEltYWdlcyBvbmx5LCBmb3IgYW55IGxhd2Z1bCBidXNpbmVzcyBwdXJwb3NlLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjx1PllvdSBNdXN0IEhhdmUgUmlnaHRzIHRvIHRoZSBDb250ZW50IFlvdSBQb3N0LjwvdT4gWW91IHJlcHJlc2VudCBhbmQgd2FycmFudCB0aGF0OiAoaSkgeW91IG93biBZb3VyIENvbnRlbnQgb3Igb3RoZXJ3aXNlIGhhdmUgdGhlIHJpZ2h0IHRvIGdyYW50IHRoZSBsaWNlbnNlIHNldCBmb3J0aCBpbiB0aGUgRVVMQSwgKGlpKSB0aGUgcG9zdGluZyBhbmQgdXNlIG9mIFlvdXIgQ29udGVudCBvbiBvciB0aHJvdWdoIHRoZSBTZXJ2aWNlLCBvciBvZiB0aGUgQWZ0ZXIgSW1hZ2VzIGRvZXMgbm90IHZpb2xhdGUgdGhlIHByaXZhY3kgcmlnaHRzLCBwdWJsaWNpdHkgcmlnaHRzLCBjb3B5cmlnaHRzLCBjb250cmFjdCByaWdodHMsIGludGVsbGVjdHVhbCBwcm9wZXJ0eSByaWdodHMsIG9yIGFueSBvdGhlciByaWdodHMgb2YgYW55IHBlcnNvbiwgYW5kIChpaWkpIHRoZSBwb3N0aW5nIG9mIFlvdXIgQ29udGVudCBvbiB0aGUgU2VydmljZSBkb2VzIG5vdCByZXN1bHQgaW4gYSBicmVhY2ggb2YgY29udHJhY3QgYmV0d2VlbiB5b3UgYW5kIGEgdGhpcmQgcGFydHkuIFlvdSBhZ3JlZSB0byBwYXkgZm9yIGFsbCByb3lhbHRpZXMsIGZlZXMsIGFuZCBhbnkgb3RoZXIgbW9uaWVzIG93aW5nIGFueSBwZXJzb24gYnkgcmVhc29uIG9mIFlvdXIgQ29udGVudCB0aGF0IHlvdSBwb3N0IG9uIG9yIHRocm91Z2ggdGhlIFNlcnZpY2UgWW91IGFsc28gYWNrbm93bGVkZ2UgYW5kIGFncmVlIHRoYXQgWW91ciBDb250ZW50IGFuZCBBZnRlciBJbWFnZXMgaXMgbm9uLWNvbmZpZGVudGlhbCBhbmQgbm9uLXByb3ByaWV0YXJ5LjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjx1PlVzZXJzIG1heSBtZXNzYWdlIGVhY2ggb3RoZXIgdGhyb3VnaCB0aGUgU2VydmljZS48L3U+IFlvdSBhZ3JlZSB0aGF0IHlvdXIgdXNlIG9mIHRoZSBTZXJ2aWNlIHdpbGwgbm90IGluY2x1ZGUgc2VuZGluZyB1bnNvbGljaXRlZCBtYXJrZXRpbmcgbWVzc2FnZXMgb3IgYnJvYWRjYXN0cyAoaS5lLiBzcGFtKS4gVklSVFVBTCB3aWxsIHV0aWxpemUgYW55IG1lYW5zIHBvc3NpYmxlIHRvIGJsb2NrIHNwYW1tZXJzIGFuZCBhYnVzZXJzIGZyb20gdXNpbmcgdGhlIFNlcnZpY2UgSWYgeW91IGJlbGlldmUgc3BhbSBvcmlnaW5hdGVkIGZyb20gdGhlIFNlcnZpY2UsIHBsZWFzZSBlbWFpbCB1cyBpbW1lZGlhdGVseSBhdCA8YSBocmVmPVwibWFpbHRvOmNpaW5mb0B3ZXZpc3UuY29tXCI+Y2lpbmZvQHdldmlzdS5jb208L2E+LjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiZm9udC13ZWlnaHQtYm9sZFwiPkZlZXM7IFBheW1lbnRzLlxuICAgICAgICAgICAgICAgICAgICA8b2wgY2xhc3M9XCJmb250LXdlaWdodC1ub3JtYWwgbnVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+RmVlcy4gVGhlIGVzdGltYXRlZCBmZWUgKHRoZSBcIjxiPkVzdGltYXRlZCBGZWU8L2I+XCIpIGZvciB0aGUgU2VydmljZShzKSBhbmQgSXRlbXMgcHVyY2hhc2VkIHRocm91Z2ggdGhlIFNlcnZpY2UgKGUuZy4sIGFsbCBkZXNpZ24gcGFja2FnZSBzZXJ2aWNlcyBhbmQgbWVyY2hhbmRpc2UgcHJvZHVjdHMpIHdpbGwgYmUgc2V0IGZvcnRoIGR1cmluZyB0aGUgb3JkZXJpbmcgcHJvY2VzcyBmb3IgU2VydmljZShzKSB0aGF0IHlvdSBnbyB0aHJvdWdoIG9uIHRoZSBXZWJzaXRlLiBUaGUgRXN0aW1hdGVkIEZlZSBvbiBJdGVtcyBwdXJjaGFzZWQgdGhyb3VnaCB0aGUgU2VydmljZXMgaXMgYmFzZWQgb24gdGhlIHByaWNlIGtub3duIHRvIFZJUlRVQUwgYXQgdGhlIHRpbWUgeW91IGNoZWNrb3V0IHRocm91Z2ggdGhlIFNlcnZpY2VzLiBCZWNhdXNlIFZJUlRVQUwgd29ya3Mgd2l0aCBhIG51bWJlciBvZiBWZW5kb3JzLCB3ZSBkbyBub3QgaGF2ZSBjb250cm9sIG92ZXIgdGhlIHByaWNpbmcgb2YgYWxsIEl0ZW1zIG9mZmVyZWQgdGhyb3VnaCBvdXIgU2VydmljZXMgKHNlZSBTZWN0aW9uIDcuMSkuIEFmdGVyIHlvdSBwbGFjZSB5b3VyIG9yZGVyLCBWSVJUVUFMIHdpbGwgbm90aWZ5IHlvdSBvZiBhbnkgZGlzY3JlcGFuY2llcyBpbiBJdGVtIHByaWNlcywgaW4gd2hpY2ggY2FzZSB5b3Ugd2lsbCBoYXZlIHRoZSBvcHRpb24gb2YgYWNjZXB0aW5nIHRoZSBhY3R1YWwgcHJpY2Ugb3IgcmVqZWN0aW5nIHRoZSBJdGVtIGZvciB3aGljaCB0aGUgcHJpY2UgY2hhbmdlZC4gVklSVFVBTCB3aWxsIHByb2Nlc3MgdGhlIG9yZGVyIChhKSBmb3IgYWxsIEl0ZW1zIGZvciB3aGljaCB0aGUgcHJpY2UgZGlkIG5vdCBjaGFuZ2UgZnJvbSB0aGUgRXN0aW1hdGVkIEZlZSwgYW5kIChiKSBmb3IgYWxsIEl0ZW1zIGZvciB3aGljaCB5b3UgaGF2ZSBhcHByb3ZlZCBhIHByaWNlIGNoYW5nZSBmcm9tIHRoZSBFc3RpbWF0ZWQgRmVlICh3aGVyZSB0aGUgZmluYWwgZmVlIGZvciB0aGUgaXRlbXMgaW4gKGEpIGFuZCAoYikgaXMgdGhlIOKAnEZlZeKAnSkuIFRoZSBGZWUgaXMgZHVlIGFuZCBwYXlhYmxlIGluIGFkdmFuY2Ugb2YgQ2xpZW504oCZcyBkZXNpZ24sIHByb2R1Y3QgcmVjb21tZW5kYXRpb24gcHJvY2Vzcywgb3Igb3JkZXIgcGxhY2VtZW50IG9mIEl0ZW1zLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHU+IFBheW1lbnRzLjwvdT4gVGhlIFNlcnZpY2UgY3VycmVudGx5IHVzZXMgdGhpcmQgcGFydGllcyB0byBwcm9jZXNzIHBheW1lbnRzLiBPdXIgdGhpcmQtIHBhcnR5IHBheW1lbnQgcHJvY2Vzc29ycyBhY2NlcHQgcGF5bWVudHMgdGhyb3VnaCB2YXJpb3VzIGNyZWRpdCBjYXJkcywgYXMgZGV0YWlsZWQgb24gdGhlIGFwcGxpY2FibGUgcGF5bWVudCBzY3JlZW4uIEFsbCBtb25ldGFyeSB0cmFuc2FjdGlvbnMgb24gdGhlIFNlcnZpY2UgdGFrZSBwbGFjZSBpbiBVLlMuIERvbGxhcnMuIFdoZW4geW91IHVzZSB0aGUgU2VydmljZSB0byBwbGFjZSBhbiBvcmRlciBmb3IgSXRlbXMsIHlvdSBhdXRob3JpemUgdGhlIHB1cmNoYXNlIGFuZCBkZWxpdmVyeSBvZiB0aGUgSXRlbXMgKHN1YmplY3QgdG8gYW55IGNvbmZpcm1hdGlvbiBvZiBJdGVtIHByaWNlcywgYXMgc3RhdGVkIGluIFNlY3Rpb24gNi4xKS4gWW91IGFncmVlIHRoYXQgVklSVFVBTCB3aWxsIG9idGFpbiBhIHRlbXBvcmFyeSBwcmUtYXV0aG9yaXphdGlvbiBvZiB5b3VyIGNyZWRpdCBjYXJkIHRvIGNvdmVyIHRoZSBjb3N0IG9mIHRoZSBJdGVtcyB5b3UgaGF2ZSBwdXJjaGFzZWQsIGFsb25nIHdpdGggYW55IGVzdGltYXRlZCB0YXhlcywgZmVlcywgYW5kIHNoaXBwaW5nIGNvc3RzLCBhbmQgZXhjbHVkaW5nIGFueSB1bnZhbGlkYXRlZCBwcm9tb3Rpb25zLiBZb3UgYWNrbm93bGVkZ2UgdGhhdCB0YXhlcyBhbmQgc2hpcHBpbmcgY29zdHMgYXJlIGVzdGltYXRlZCBhdCB0aGUgdGltZSBvZiBjaGVja291dCwgYW5kIHlvdSBhZ3JlZSB0byBhbnkgZmluYWwgdGF4IGFuZC9vciBzaGlwcGluZyBjb3N0cyBhcyBjYWxjdWxhdGVkIGJ5IFZJUlRVQUwsIGJhc2VkIG9uIHlvdXIgc2hpcHBpbmcgbG9jYXRpb24gYW5kIHRoZSBGZWUuIFlvdXIgY3JlZGl0IGNhcmQgc3RhdGVtZW50IHdpbGwgcmVmbGVjdCB0aGUgZmluYWwgdG90YWwgYW1vdW50IGNoYXJnZWQgdG8geW91IHVwb24gb3JkZXIgY29tcGxldGlvbi4gPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48dT5UYXhlcy48L3U+IFRoZSBGZWVzIGFyZSBleGNsdXNpdmUgb2YgdGF4LiBDbGllbnRzIGFyZSByZXNwb25zaWJsZSBmb3IgYWxsIGFwcGxpY2FibGUgZ292ZXJubWVudCB0YXhlcywgZmVlcywgYW5kIHNlcnZpY2UgY2hhcmdlcyAoXCJUYXhlc1wiKSByZXN1bHRpbmcgZnJvbSBhIHRyYW5zYWN0aW9uIG9jY3VycmluZyB0aHJvdWdoIHRoZSBTZXJ2aWNlLiBWSVJUVUFMIHdpbGwgY29sbGVjdCBhbmQgcmVtaXQgc3VjaCBUYXhlcyBmcm9tIENsaWVudHMgd2hlcmUgcmVxdWlyZWQgYnkgbGF3LCBidXQgYSBDbGllbnQgbWF5IGJlIHJlc3BvbnNpYmxlIGZvciBhZGRpdGlvbmFsIFRheGVzIG5vdCBjb2xsZWN0ZWQgYnkgVklSVFVBTC4gQWxsIHRheGVzIGFyZSBjYWxjdWxhdGVkIHVzaW5nIHRoZSBGZWUuIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHU+UmVmdW5kcy48L3U+IFZJUlRVQUwgbWF5IG9mZmVyIGFueSBDbGllbnQgYSBmdWxsIG9yIHBhcnRpYWwgcmVmdW5kIGF0IFZJUlRVQUwncyBzb2xlIGRpc2NyZXRpb24uIFBsZWFzZSBlbWFpbCA8YSBocmVmPVwibWFpbHRvOmNpaW5mb0B3ZXZpc3UuY29tXCI+Y2lpbmZvQHdldmlzdS5jb208L2E+IHRvIHJlcXVlc3QgYSByZWZ1bmQuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImZvbnQtd2VpZ2h0LWJvbGRcIj5BZGRpdGlvbmFsIFNlcnZpY2VzIEZyb20gVklSVFVBTC5cbiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPVwiZm9udC13ZWlnaHQtbm9ybWFsIG51bVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjx1PlRoaXJkIFBhcnR5IFB1cmNoYXNlcy48L3U+IEEgQ2xpZW50IG1heSB3aXNoIHRvIHB1cmNoYXNlIGNlcnRhaW4gaXRlbXMgKFwiPGI+SXRlbXM8L2I+XCIpIG9mZmVyZWQgYnkgdGhpcmQgcGFydGllcyAoZWFjaCwgYSBcIjxiPlZlbmRvcjwvYj5cIikgdGhyb3VnaCB0aGUgU2VydmljZS4gQSBDbGllbnQgbWF5IHdpc2ggdG8gdXRpbGl6ZSBiaWRkaW5nIGxvY2FsIGNvbnRyYWN0b3JzIHRvIHBlcmZvcm0gd29yayBvbiBiZWhhbGYgb2YgdGhlIENsaWVudC4gVklSVFVBTCB3aWxsIGNvbGxlY3QgdGhlIGNvc3Qgb2YgdGhlc2UgSXRlbXMgKGFzIHBhcnQgb2YgdGhlIEZlZSkgZnJvbSB5b3UgaW4gYWR2YW5jZSBvZiBWSVJUVUFMIHBsYWNpbmcgb3JkZXJzIHdpdGggdGhlIFZlbmRvciBmb3IgdGhlIHB1cmNoYXNlIG9mIHRoZSBJdGVtKHMpLiBBbGwgVmVuZG9yIHRlcm1zIGFuZCBjb25kaXRpb25zIGFwcGx5IHRvIHRoZXNlIHB1cmNoYXNlcyBvZiBJdGVtcywgaW5jbHVkaW5nIHJldHVybiBwb2xpY2llcyBhbmQgc2hpcHBpbmcgY29zdHMuIE5vdGUgdGhhdCB3aGlsZSBWSVJUVUFMIHVzZXMgcmVhc29uYWJsZSBlZmZvcnRzIHRvIGRpc3BsYXkgdGhlIGN1cnJlbnQgYW5kIGFjY3VyYXRlIHByaWNlIGZvciBJdGVtcywgdGhlIHByaWNlIGZvciBJdGVtcyBpcyBkeW5hbWljLCBhbmQgdGhlIHByaWNlIGRpc3BsYXllZCBvbiB0aGUgU2VydmljZSBmb3IgYW55IHBhcnRpY3VsYXIgSXRlbSBpcyBzdWJqZWN0IHRvIGNoYW5nZS4gVklSVFVBTCB3aWxsIGNvbmZpcm0gSXRlbSBwcmljaW5nIGJlZm9yZSBjaGFyZ2luZyBDbGllbnTigJlzIGNyZWRpdCBjYXJkLiA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjx1PkluZm9ybWF0aW9uLjwvdT4gVklSVFVBTCBtYXkgcHJvdmlkZS8gc2VsbCB5b3VyIHBlcnNvbmFsIGluZm9ybWF0aW9uIHRvIHRoaXJkIHBhcnR5IGNvbnRyYWN0b3JzIGluIG9yZGVyIHRvIGlkZW50aWZ5IHlvdXIgbG9jYXRpb24sIGNvc3RzLCBhbmQgdG8gZmFjaWxpdGF0ZSBpbnN0YWxsYXRpb24uPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImZvbnQtd2VpZ2h0LWJvbGRcIj5UaGlyZCBQYXJ0eSBNYXRlcmlhbHM7IFZJUlRVQUwgQ29udGVudC5cbiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPVwibnVtIGZvbnQtd2VpZ2h0LW5vcm1hbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSB1bmRlcnN0YW5kIHRoYXQgYnkgdXNpbmcgdGhlIFNlcnZpY2UsIHlvdSBtYXkgZW5jb3VudGVyIGRhdGEsIGluZm9ybWF0aW9uLCBhcHBsaWNhdGlvbnMsIG1hdGVyaWFscyBhbmQgb3RoZXIgY29udGVudCBmcm9tIHRoaXJkIHBhcnRpZXMsIGluY2x1ZGluZyBvdGhlciB1c2VycyAoY29sbGVjdGl2ZWx5LCBcIjxiPlRoaXJkIFBhcnR5IE1hdGVyaWFsczwvYj5cIiksIGFuZCBkYXRhLCBpbmZvcm1hdGlvbiwgYXBwbGljYXRpb25zLCBtYXRlcmlhbHMgYW5kIG90aGVyIGNvbnRlbnQgZnJvbSBWSVJUVUFMIChjb2xsZWN0aXZlbHksIFwiVklSVFVBTCBDb250ZW50XCIgYW5kLCB0b2dldGhlciB3aXRoIFRoaXJkIFBhcnR5IE1hdGVyaWFscywgYnV0IGV4Y2x1ZGluZyBZb3VyIENvbnRlbnQsIFwiU2VydmljZSBDb250ZW50XCIpLCB0aGF0IG1heSBiZSBvZmZlbnNpdmUsIGluZGVjZW50LCBvciBvYmplY3Rpb25hYmxlIE5ldmVydGhlbGVzcywgeW91IGFncmVlIHRvIHVzZSB0aGUgU2VydmljZSBhdCB5b3VyIHNvbGUgcmlzayBhbmQgdGhhdCBWSVJUVUFMIHNoYWxsIG5vdCBoYXZlIGFueSBsaWFiaWxpdHkgdG8geW91IGZvciBhbnkgU2VydmljZSBDb250ZW50IHRoYXQgbWF5IGJlIGZvdW5kIHRvIGJlIG9mZmVuc2l2ZSwgaW5kZWNlbnQsIG9yIHRoYXQgaXMgaW5hY2N1cmF0ZSwgaW5jb21wbGV0ZSwgdW50aW1lbHksIGludmFsaWQsIGlsbGVnYWwsIGluZGVjZW50LCBvZiBwb29yIHF1YWxpdHkgb3Igb3RoZXJ3aXNlIG9iamVjdGlvbmFibGUgWW91IHVzZSB0aGUgU2VydmljZSwgYW5kIHJlbHkgdXBvbiBhbnkgU2VydmljZSBDb250ZW50IGFjY2Vzc2libGUgdGhyb3VnaCB0aGUgU2VydmljZSwgYXQgeW91ciBzb2xlIHJpc2suIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+SW4gYWRkaXRpb24sIHRoaXJkIHBhcnR5IHNlcnZpY2VzIGFuZCBTZXJ2aWNlIENvbnRlbnQgdGhhdCBtYXkgYmUgYWNjZXNzZWQgZnJvbSwgZGlzcGxheWVkIG9uIG9yIGxpbmtlZCB0byB5b3VyIGRldmljZSBhcmUgbm90IGF2YWlsYWJsZSBpbiBhbGwgbGFuZ3VhZ2VzIG9yIGluIGFsbCBjb3VudHJpZXMgVklSVFVBTCBtYWtlcyBubyByZXByZXNlbnRhdGlvbiB0aGF0IHRoZSBTZXJ2aWNlLCBhbnkgdGhpcmQgcGFydHkgc2VydmljZXMsIGFuZCBTZXJ2aWNlIENvbnRlbnQgYXJlIGFwcHJvcHJpYXRlIG9yIGF2YWlsYWJsZSBmb3IgdXNlIGluIGFueSBwYXJ0aWN1bGFyIGxvY2F0aW9uIHRvIHRoZSBleHRlbnQgeW91IGNob29zZSB0byBhY2Nlc3Mgc3VjaCBzZXJ2aWNlcyBvciBtYXRlcmlhbHMsIHlvdSBkbyBzbyBhdCB5b3VyIG93biBpbml0aWF0aXZlIGFuZCBhcmUgcmVzcG9uc2libGUgZm9yIGNvbXBsaWFuY2Ugd2l0aCBhbnkgYW5kIGFsbCBhcHBsaWNhYmxlIGxhd3MuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImZvbnQtd2VpZ2h0LWJvbGRcIj5Zb3VyIFVzZSBvZiB0aGUgU2VydmljZSBhbmQgU2VydmljZSBDb250ZW50LlxuICAgICAgICAgICAgICAgICAgICA8b2wgY2xhc3M9XCJudW0gZm9udC13ZWlnaHQtbm9ybWFsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91ciByaWdodCB0byB1c2UgdGhlIFNlcnZpY2UgaXMgYSBwcml2aWxlZ2UsIG5vdCBhIHJpZ2h0LCBhbmQgaXMgZXhwcmVzc2x5IGNvbmRpdGlvbmVkIG9uIHRoZSBmb2xsb3dpbmc6PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3UgbWF5IGFjY2VzcyB0aGUgU2VydmljZSBzb2xlbHkgYXMgaW50ZW5kZWQgdGhyb3VnaCB0aGUgcHJvdmlkZWQgZnVuY3Rpb25hbGl0eSBvZiB0aGUgU2VydmljZSBhbmQgYXMgcGVybWl0dGVkIHVuZGVyIHRoZSBFVUxBLiA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBzaGFsbCBub3QgY29weSwgcmVwcm9kdWNlLCBkaXN0cmlidXRlLCBwdWJsaXNoLCBkaXNwbGF5LCBwZXJmb3JtLCB0cmFuc21pdCwgc3RyZWFtIG9yIGJyb2FkY2FzdCBhbnkgcGFydCBvZiB0aGUgU2VydmljZSwgV2Vic2l0ZSBvciBBcHAsIG9yIGNvbnRlbnQgeW91IGVuY291bnRlciBvbiB0aHJvdWdoIHRoZSBTZXJ2aWNlIHdpdGhvdXQgVklSVFVBTCdzIHByaW9yIHdyaXR0ZW4gYXV0aG9yaXphdGlvbiwgaW5jbHVkaW5nLCBieSB3YXkgb2YgZXhhbXBsZSBhbmQgbm90IGxpbWl0YXRpb24sIGJ5IGRvaW5nIG9yIGVuZ2FnaW5nIGluIGFueSBvZiB0aGUgZm9sbG93aW5nIHdpdGhvdXQgVklSVFVBTCdzIGV4cHJlc3Mgd3JpdHRlbiBjb25zZW50OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbCB0eXBlPVwiYVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+YWx0ZXJpbmcsIGRlZmFjaW5nLCBtdXRpbGF0aW5nIG9yIG90aGVyd2lzZSBieXBhc3NpbmcgYW55IGFwcHJvdmVkIHNvZnR3YXJlIHRocm91Z2ggd2hpY2ggdGhlIFNlcnZpY2UgaXMgbWFkZSBhdmFpbGFibGU7IGFuZCA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+dXNpbmcgYW55IHRyYWRlbWFya3MsIHNlcnZpY2UgbWFya3MsIGRlc2lnbiBtYXJrcywgbG9nb3MsIHBob3RvZ3JhcGhzIG9yIG90aGVyIGNvbnRlbnQgYmVsb25naW5nIHRvIFZJUlRVQUwgb3Igb2J0YWluZWQgZnJvbSB0aGUgU2VydmljZS4gPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3Ugc2hhbGwgbm90IGJ5cGFzcywgY2lyY3VtdmVudCwgZGFtYWdlIG9yIG90aGVyd2lzZSBpbnRlcmZlcmUgd2l0aCBhbnkgc2VjdXJpdHkgb3Igb3RoZXIgZmVhdHVyZXMgb2YgdGhlIFdlYnNpdGUgb3IgQXBwIGRlc2lnbmVkIHRvIGNvbnRyb2wgdGhlIG1hbm5lciBpbiB3aGljaCB0aGUgU2VydmljZSBpcyB1c2VkLCBoYXJ2ZXN0IG9yIG1pbmUgU2VydmljZSBDb250ZW50IGZyb20gdGhlIFNlcnZpY2UsIG9yIG90aGVyd2lzZSBhY2Nlc3Mgb3IgdXNlIHRoZSBTZXJ2aWNlIGluIGEgbWFubmVyIGluY29uc2lzdGVudCB3aXRoIGluZGl2aWR1YWwgaHVtYW4gdXNhZ2UuIFlvdSBzaGFsbCBub3QgY29weSBvciBzY3JhcGUgYW55IFNlcnZpY2UgQ29udGVudC4gPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3Ugc2hhbGwgbm90IHVuZGVydGFrZSwgY2F1c2UsIHBlcm1pdCBvciBhdXRob3JpemUgdGhlIHRyYW5zbGF0aW9uLCByZXZlcnNlIGVuZ2luZWVyaW5nLCBkaXNhc3NlbWJsaW5nIG9yIGhhY2tpbmcgb2YgYW55IGFzcGVjdCBvZiB0aGUgV2Vic2l0ZSBvciBTZXJ2aWNlLCBpbmNsdWRpbmcgYW55IFNlcnZpY2UgQ29udGVudCBhdmFpbGFibGUgb24gb3IgdGhyb3VnaCB0aGUgU2VydmljZSwgb3IgYXR0ZW1wdCB0byBkbyBhbnkgb2YgdGhlIGZvcmVnb2luZywgZXhjZXB0IGFuZCBzb2xlbHkgdG8gdGhlIGV4dGVudCBwZXJtaXR0ZWQgYnkgdGhlIEVVTEEsIHRoZSBhdXRob3JpemVkIGZlYXR1cmVzIG9mIHRoZSBTZXJ2aWNlLCBvciBieSBsYXcsIG9yIG90aGVyd2lzZSBhdHRlbXB0IHRvIHVzZSBvciBhY2Nlc3MgYW55IHBvcnRpb24gb2YgdGhlIFNlcnZpY2Ugb3RoZXIgdGhhbiBhcyBpbnRlbmRlZCBieSBWSVJUVUFMLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IHNoYWxsIG5vdCB1c2UsIGRpc3BsYXksIG1pcnJvciwgZnJhbWUgb3IgdXRpbGl6ZSBmcmFtaW5nIHRlY2huaXF1ZXMgdG8gZW5jbG9zZSB0aGUgU2VydmljZSwgaW5jbHVkaW5nIGFueSBTZXJ2aWNlIENvbnRlbnQgYXZhaWxhYmxlIG9uIG9yIHRocm91Z2ggdGhlIFNlcnZpY2UsIG9yIGFueSBwb3J0aW9uIHRoZXJlb2YsIHRocm91Z2ggYW55IG90aGVyIGFwcGxpY2F0aW9uIG9yIHdlYnNpdGUsIHVubGVzcyBhbmQgc29sZWx5IHRvIHRoZSBleHRlbnQgVklSVFVBTCBtYWtlcyBhdmFpbGFibGUgdGhlIG1lYW5zIGZvciBlbWJlZGRpbmcgYW55IHBhcnQgb2YgdGhlIFNlcnZpY2Ugb3IgU2VydmljZSBDb250ZW50LiA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBzaGFsbCBub3QgYWNjZXNzLCB0YW1wZXIgd2l0aCwgb3IgdXNlIG5vbi1wdWJsaWMgYXJlYXMgb2YgdGhlIFNlcnZpY2UsIFZJUlRVQUwncyAoYW5kIGl0cyBob3N0aW5nIGNvbXBhbnkncykgY29tcHV0ZXIgc3lzdGVtcyBhbmQgaW5mcmFzdHJ1Y3R1cmUsIG9yIHRoZSB0ZWNobmljYWwgZGVsaXZlcnkgc3lzdGVtcyBvZiBWSVJUVUFMJ3MgcHJvdmlkZXJzLiA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBzaGFsbCBub3QgaGFyYXNzLCBhYnVzZSwgaGFybSBvciBhZHZvY2F0ZSBvciBpbmNpdGUgaGFyYXNzbWVudCwgYWJ1c2Ugb3IgaGFybSBvZiBhbm90aGVyIHBlcnNvbiBvciBncm91cCwgaW5jbHVkaW5nIFZJUlRVQUwncyBlbXBsb3llZXMgYW5kIG90aGVyIHVzZXJzLiA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBzaGFsbCBub3QgcHJvdmlkZSBhbnkgZmFsc2UgcGVyc29uYWwgaW5mb3JtYXRpb24gdG8gVklSVFVBTCBvciBhbnkgb3RoZXIgdXNlciwgb3IgY3JlYXRlIGEgZmFsc2UgaWRlbnRpZnkgb3IgaW1wZXJzb25hdGUgYW5vdGhlciBwZXJzb24gb3IgZW50aXR5IGluIGFueSB3YXkuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3Ugc2hhbGwgbm90IGNyZWF0ZSBhIG5ldyBhY2NvdW50IHdpdGggVklSVFVBTCwgd2l0aG91dCBWSVJUVUFMJ3MgZXhwcmVzcyB3cml0dGVuIGNvbnNlbnQsIGlmIFZJUlRVQUwgaGFzIHByZXZpb3VzbHkgZGlzYWJsZWQgYW4gYWNjb3VudCBvZiB5b3Vycy4gPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3Ugc2hhbGwgbm90IHNvbGljaXQsIG9yIGF0dGVtcHQgdG8gc29saWNpdCwgcGVyc29uYWwgaW5mb3JtYXRpb24gZnJvbSBvdGhlciB1c2Vycy48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBzaGFsbCBub3QgcmVzdHJpY3QsIGRpc2NvdXJhZ2Ugb3IgaW5oaWJpdCBhbnkgcGVyc29uIGZyb20gdXNpbmcgdGhlIFNlcnZpY2UsIGRpc2Nsb3NlIHBlcnNvbmFsIGluZm9ybWF0aW9uIGFib3V0IGEgdGhpcmQgcGVyc29uIG9uIHRoZSBTZXJ2aWNlIG9yIG9idGFpbmVkIGZyb20gdGhlIFNlcnZpY2Ugd2l0aG91dCB0aGUgY29uc2VudCBvZiBzdWNoIHBlcnNvbiwgb3IgY29sbGVjdCBpbmZvcm1hdGlvbiBhYm91dCB1c2Vycy48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBzaGFsbCBub3QgdXNlIHRoZSBTZXJ2aWNlLCB3aXRob3V0IFZJUlRVQUwncyBleHByZXNzIHdyaXR0ZW4gY29uc2VudCwgdG8gY29tbXVuaWNhdGUgb3IgZmFjaWxpdGF0ZSBhbnkgY29tbWVyY2lhbCBhZHZlcnRpc2VtZW50IG9yIHNvbGljaXRhdGlvbiwgZXhjZXB0IGFzIGV4cHJlc3NseSBwZXJtaXR0ZWQgaW4gdGhlIEVVTEEuIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IHNoYWxsIG5vdCBnYWluIG9yIGF0dGVtcHQgdG8gZ2FpbiB1bmF1dGhvcml6ZWQgYWNjZXNzIHRvIHRoZSBTZXJ2aWNlLCB0byBvdGhlciB1c2VycycgYWNjb3VudHMsIG5hbWVzIG9yIHBlcnNvbmFsbHkgaWRlbnRpZmlhYmxlIGluZm9ybWF0aW9uLCBvciB0byBvdGhlciBjb21wdXRlcnMgb3Igd2Vic2l0ZXMgY29ubmVjdGVkIG9yIGxpbmtlZCB0byB0aGUgU2VydmljZS48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBzaGFsbCBub3QgcG9zdCwgdHJhbnNtaXQgb3Igb3RoZXJ3aXNlIG1ha2UgYXZhaWxhYmxlIGFueSB2aXJ1cywgd29ybSwgc3B5d2FyZSBvciBhbnkgb3RoZXIgY29tcHV0ZXIgY29kZSwgZmlsZSBvciBwcm9ncmFtIHRoYXQgbWF5IG9yIGlzIGludGVuZGVkIHRvIGRpc2FibGUsIG92ZXJidXJkZW4sIGltcGFpciwgZGFtYWdlIG9yIGhpamFjayB0aGUgb3BlcmF0aW9uIG9mIGFueSBoYXJkd2FyZSwgc29mdHdhcmUgb3IgdGVsZWNvbW11bmljYXRpb25zIGVxdWlwbWVudCwgb3IgYW55IG90aGVyIGFzcGVjdCBvZiB0aGUgU2VydmljZSBvciBjb21tdW5pY2F0aW9ucyBlcXVpcG1lbnQgYW5kIGNvbXB1dGVycyBjb25uZWN0ZWQgdG8gdGhlIFNlcnZpY2UuIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IHNoYWxsIG5vdCBpbnRlcmZlcmUgd2l0aCBvciBkaXNydXB0IHRoZSBTZXJ2aWNlLCBvciBuZXR3b3JrcyBvciBzZXJ2ZXJzIGNvbm5lY3RlZCB0byB0aGUgU2VydmljZSwgb3IgdmlvbGF0ZSB0aGUgcmVndWxhdGlvbnMsIHBvbGljaWVzIG9yIHByb2NlZHVyZXMgb2Ygc3VjaCBuZXR3b3JrcyBvciBzZXJ2ZXJzLiA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBzaGFsbCBub3QgdmlvbGF0ZSBhbnkgYXBwbGljYWJsZSBmZWRlcmFsLCBzdGF0ZSBvciBsb2NhbCBsYXdzIG9yIHJlZ3VsYXRpb25zIG9yIHRoZSBFVUxBLiA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPiAgICBZb3Ugc2hhbGwgbm90IGFzc2lzdCBvciBwZXJtaXQgYW55IHBlcnNvbnMgaW4gZW5nYWdpbmcgaW4gYW55IG9mIHRoZSBhY3Rpdml0aWVzIGRlc2NyaWJlIGFib3ZlLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJmb250LXdlaWdodC1ib2xkXCI+Q29uc2VudCB0byBVc2Ugb2YgRGF0YS5cbiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPVwiZm9udC13ZWlnaHQtbm9ybWFsIG51bVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBhZ3JlZSB0aGF0IFZJUlRVQUwgbWF5IGNvbGxlY3QsIHVzZSwgYW5kIHNlbGwgdG8gdGhpcmQgcGFydHkgdmVuZG9ycyB0ZWNobmljYWwgZGF0YSBhbmQgcmVsYXRlZCBpbmZvcm1hdGlvbiwgaW5jbHVkaW5nLCBidXQgbm90IGxpbWl0ZWQgdG8sIFVESUQsIGNvbnRhY3RzLCB1c2FnZSBkYXRhLCBsb2NhdGlvbiBhbmQgb3RoZXIgdGVjaG5pY2FsIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgZGV2aWNlLCBzeXN0ZW0gYW5kIGFwcGxpY2F0aW9uIHNvZnR3YXJlLCBhbmQgcGVyaXBoZXJhbHMsIHRoYXQgaXMgZ2F0aGVyZWQgcGVyaW9kaWNhbGx5IHRvIGZhY2lsaXRhdGUgdGhlIHByb3Zpc2lvbiBvZiBzb2Z0d2FyZSB1cGRhdGVzLCBwcm9kdWN0IHN1cHBvcnQsIGFuZCBvdGhlciBzZXJ2aWNlcyB0byB5b3UgKGlmIGFueSkgcmVsYXRlZCB0byB0aGUgU2VydmljZSwgYW5kIHRvIGFub255bW91c2x5IHRyYWNrIGFuZCByZXBvcnQgeW91ciBhY3Rpdml0eSBpbnNpZGUgb2YgdGhlIFNlcnZpY2UsIGluY2x1ZGluZyBmb3IgYW5hbHl0aWNzIHB1cnBvc2VzIFBsZWFzZSBzZWUgdGhlIFByaXZhY3kgUG9saWN5LjwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJmb250LXdlaWdodC1ib2xkXCI+T3duZXJzaGlwLlxuICAgICAgICAgICAgICAgICAgICA8b2wgY2xhc3M9XCJmb250LXdlaWdodC1ub3JtYWwgbnVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhlIFNlcnZpY2UsIFNlcnZpY2UgQ29udGVudCwgQWZ0ZXIgSW1hZ2VzLCBhbmQgdGhlIG1lZGlhIGFuZCBtYXRlcmlhbHMgY29udGFpbmVkIHRoZXJlaW4sIGluY2x1ZGluZyBhbGwgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyB0aGVyZWluLCBhcmUgdGhlIHNvbGUgYW5kIGV4Y2x1c2l2ZSBwcm9wZXJ0eSBvZiBWSVJUVUFMIGFuZCBpdHMgbGljZW5zb3JzLiBFeGNlcHQgZm9yIHRoZSBsaW1pdGVkIGxpY2Vuc2VzIGV4cHJlc3NseSBncmFudGVkIHRvIHlvdSB1bmRlciB0aGUgRVVMQSwgbm8gb3RoZXIgcmlnaHRzLCBsaWNlbnNlcywgb3IgaW1tdW5pdGllcyBhcmUgZ3JhbnRlZCBvciB3aWxsIGJlIGRlZW1lZCB0byBiZSBncmFudGVkIHRvIHlvdSB1bmRlciB0aGUgRVVMQSwgZWl0aGVyIGV4cHJlc3NseSwgb3IgYnkgaW1wbGljYXRpb24sIGVzdG9wcGVsIG9yIG90aGVyd2lzZS48L2xpPlxuICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiZm9udC13ZWlnaHQtYm9sZFwiPkZlZWRiYWNrLlxuICAgICAgICAgICAgICAgICAgICA8b2wgY2xhc3M9XCJmb250LXdlaWdodC1ub3JtYWwgbnVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+V2UgYXBwcmVjaWF0ZSBoZWFyaW5nIGZyb20gb3VyIHVzZXJzIGFuZCB3ZWxjb21lIHlvdXIgY29tbWVudHMgcmVnYXJkaW5nIHRoZSBTZXJ2aWNlIFBsZWFzZSBiZSBhZHZpc2VkLCBob3dldmVyLCB0aGF0IGlmIHlvdSBzZW5kIHVzIGNyZWF0aXZlIGlkZWFzLCBzdWdnZXN0aW9ucywgaW52ZW50aW9ucywgb3IgbWF0ZXJpYWxzIChcIkNyZWF0aXZlIElkZWFzXCIpLCB3ZSB3aWxsOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbCB0eXBlPVwiYVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+b3duLCBleGNsdXNpdmVseSwgYWxsIG5vdyBrbm93biBvciBsYXRlciBkaXNjb3ZlcmVkIHJpZ2h0cyB0byB0aGUgQ3JlYXRpdmUgSWRlYXM7PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPm5vdCBiZSBzdWJqZWN0IHRvIGFueSBvYmxpZ2F0aW9uIG9mIGNvbmZpZGVudGlhbGl0eSBhbmQgd2lsbCBub3QgYmUgbGlhYmxlIGZvciBhbnkgdXNlIG9yIGRpc2Nsb3N1cmUgb2YgYW55IENyZWF0aXZlIElkZWFzOyBhbmQ8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+YmUgZW50aXRsZWQgdG8gdW5yZXN0cmljdGVkIHVzZSBvZiB0aGUgQ3JlYXRpdmUgSWRlYXMgZm9yIGFueSBwdXJwb3NlIHdoYXRzb2V2ZXIsIGNvbW1lcmNpYWwgb3Igb3RoZXJ3aXNlLCB3aXRob3V0IGNvbXBlbnNhdGlvbiB0byB5b3Ugb3IgYW55IG90aGVyIHBlcnNvbi48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiZm9udC13ZWlnaHQtYm9sZFwiPkNvbnNlcXVlbmNlcyBvZiBWaW9sYXRpbmcgVGhlc2UgVGVybXMuXG4gICAgICAgICAgICAgICAgICAgIDxvbCBjbGFzcz1cImZvbnQtd2VpZ2h0LW5vcm1hbCBudW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5XZSByZXNlcnZlIHRoZSByaWdodCB0byBzdXNwZW5kIG9yIHRlcm1pbmF0ZSB5b3VyIGFjY291bnQgYW5kIHByZXZlbnQgYWNjZXNzIHRvIHRoZSBTZXJ2aWNlIGZvciBhbnkgcmVhc29uLCBhdCBvdXIgZGlzY3JldGlvbi4gV2UgcmVzZXJ2ZSB0aGUgcmlnaHQgdG8gcmVmdXNlIHRvIHByb3ZpZGUgdGhlIFNlcnZpY2UgdG8geW91IGluIHRoZSBmdXR1cmUuIFZJUlRVQUwgbWF5IHJldmlldyBhbmQgcmVtb3ZlIGFueSBvZiBZb3VyIENvbnRlbnQgYXQgYW55IHRpbWUgZm9yIGFueSByZWFzb24sIGluY2x1ZGluZyBhY3Rpdml0eSB3aGljaCwgaW4gaXRzIHNvbGUganVkZ21lbnQ6IHZpb2xhdGVzIHRoZSBFVUxBOyB2aW9sYXRlcyBhcHBsaWNhYmxlIGxhd3MsIHJ1bGVzLCBvciByZWd1bGF0aW9uczsgaXMgYWJ1c2l2ZSwgZGlzcnVwdGl2ZSwgb2ZmZW5zaXZlIG9yIGlsbGVnYWw7IG9yIHZpb2xhdGVzIHRoZSByaWdodHMgb2YsIG9yIGhhcm1zIG9yIHRocmVhdGVucyB0aGUgc2FmZXR5IG9mLCBVc2VycyBvZiB0aGUgU2VydmljZS4gWW91IGFyZSByZXNwb25zaWJsZSBmb3IgYW55IGNsYWltcywgZmVlcywgZmluZXMsIHBlbmFsdGllcywgYW5kIG90aGVyIGxpYWJpbGl0eSBpbmN1cnJlZCBieSB1cyBvciBvdGhlcnMgY2F1c2VkIGJ5IG9yIGFyaXNpbmcgb3V0IG9mIHlvdXIgYnJlYWNoIG9mIHRoZSBFVUxBIGFuZCB5b3VyIHVzZSBvZiB0aGUgU2VydmljZS48L2xpPlxuICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiZm9udC13ZWlnaHQtYm9sZFwiPlZJUlRVQUzigJlzIExpYWJpbGl0eS5cbiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPVwiZm9udC13ZWlnaHQtbm9ybWFsIG51bVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNoYW5nZXMgdG8gdGhlIFNlcnZpY2UuIFdlIG1heSBjaGFuZ2UsIHN1c3BlbmQsIG9yIGRpc2NvbnRpbnVlIGFueSBhc3BlY3Qgb2YgdGhlIFNlcnZpY2UgYXQgYW55IHRpbWUsIGluY2x1ZGluZyBob3VycyBvZiBvcGVyYXRpb24gb3IgYXZhaWxhYmlsaXR5IG9mIHRoZSBTZXJ2aWNlIG9yIGFueSBmZWF0dXJlLCB3aXRob3V0IG5vdGljZSBvciBsaWFiaWxpdHkuIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+VXNlciBEaXNwdXRlcy4gV2UgYXJlIG5vdCByZXNwb25zaWJsZSBmb3IgYW55IGRpc3B1dGVzIG9yIGRpc2FncmVlbWVudHMgYmV0d2VlbiB5b3UgYW5kIGFueSB0aGlyZCBwYXJ0eSB5b3UgaW50ZXJhY3Qgd2l0aCB1c2luZyB0aGUgU2VydmljZS4gVGhpcyBpbmNsdWRlcyBkaXNwdXRlcyBiZXR3ZWVuIENsaWVudHMsIHZlbmRvcnMsIGFuZCBjb250cmFjdG9ycy4gWW91IGFzc3VtZSBhbGwgcmlzayBhc3NvY2lhdGVkIHdpdGggZGVhbGluZyB3aXRoIHRoaXJkIHBhcnRpZXMgYW5kIGNvbnRyYWN0b3JzLiBZb3UgYWdyZWUgdG8gcmVzb2x2ZSBkaXNwdXRlcyBkaXJlY3RseSB3aXRoIHRoZSBvdGhlciBwYXJ0eS4gWW91IHJlbGVhc2UgVklSVFVBTCBvZiBhbGwgY2xhaW1zLCBkZW1hbmRzLCBhbmQgZGFtYWdlcyBpbiBkaXNwdXRlcyBhbW9uZyB1c2VycyBvZiB0aGUgU2VydmljZS4gWW91IHNoYWxsIG5vdCBpbnZvbHZlIHVzIGluIHN1Y2ggZGlzcHV0ZXMuIFVzZSBjYXV0aW9uIGFuZCBjb21tb24gc2Vuc2Ugd2hlbiB1c2luZyB0aGUgU2VydmljZS4gSWYgeW91IHBhcnRpY2lwYXRlIGluIGFuIEluc3RhbGxhdGlvbiwgeW91IGFyZSBzb2xlbHkgcmVzcG9uc2libGUgZm9yIHlvdXIgaW50ZXJhY3Rpb25zIHdpdGggb3RoZXIgVXNlcnMuIFlvdSB1bmRlcnN0YW5kIHRoYXQgVklSVFVBTCBkb2VzIG5vdCBjdXJyZW50bHkgY29uZHVjdCBiYWNrZ3JvdW5kIGNoZWNrcywgaW5jbHVkaW5nIGNyaW1pbmFsIGJhY2tncm91bmQgY2hlY2tzLCBvbiBpdHMgVXNlcnMgb3IgVmVuZG9ycy4gVklSVFVBTCBtYWtlcyBubyByZXByZXNlbnRhdGlvbnMgb3Igd2FycmFudGllcyBhcyB0byB0aGUgY29uZHVjdCBvZiBVc2Vycy4gSU4gTk8gRVZFTlQgV0lMTCBUSEUgUkVMRUFTRUQgUEFSVElFUyAoQVMgREVGSU5FRCBCRUxPVykgQkUgTElBQkxFIEZPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSLCBXSEVUSEVSIERJUkVDVCwgSU5ESVJFQ1QsIEdFTkVSQUwsIFNQRUNJQUwsIENPTVBFTlNBVE9SWSwgQ09OU0VRVUVOVElBTCwgQU5EL09SIElOQ0lERU5UQUwsIEFSSVNJTkcgT1VUIE9GIE9SIFJFTEFUSU5HIFRPIFRIRSBDT05EVUNUIE9GIFlPVSBPUiBBTllPTkUgRUxTRSBJTiBDT05ORUNUSU9OIFdJVEggWU9VUiBVU0UgT0YgVEhFIFNFUlZJQ0UsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04sIEJPRElMWSBJTkpVUlksIEVNT1RJT05BTCBESVNUUkVTUywgQU5EL09SIEFOWSBPVEhFUiBEQU1BR0VTIFJFU1VMVElORyBGUk9NIENPTU1VTklDQVRJT05TIE9SIE1FRVRJTkdTIFdJVEggT1RIRVIgVVNFUlMgT0YgVEhJUyBTRVJWSUNFIE9SIFBFUlNPTlMgWU9VIE1FRVQgVEhST1VHSCBUSEUgU0VSVklDRS4gWU9VIEFHUkVFIFRPIFRBS0UgUkVBU09OQUJMRSBQUkVDQVVUSU9OUyBJTiBBTEwgSU5URVJBQ1RJT05TIFdJVEggT1RIRVIgVVNFUlMgT0YgVEhFIFNFUlZJQ0UsIFBBUlRJQ1VMQVJMWSBJRiBZT1UgTUVFVCBPRkZMSU5FIE9SIElOIFBFUlNPTi4gWU9VIEFTU1VNRSBBTEwgUklTSyBXSEVOIEVOR0FHSU5HIFRIRSBTRVJWSUNFUyBPRiBBTlkgT1RIRVIgVVNFUiBBTkQgSU4gQ09OTkVDVElPTiBXSVRIIFVTSU5HIFRIRSBTRVJWSUNFLCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIEFOWSBSSVNLUyBBU1NPQ0lBVEVEIFdJVEggT0JUQUlOSU5HIFNFUlZJQ0VTIEZST00gQU5ZIERFU0lHTkVSIE9SIFBST1ZJRElORyBBTlkgU0VSVklDRVMgVE8gQU5ZIENMSUVOVCwgSU5DTFVESU5HIEFMTCBSSVNLUyBPRiBQSFlTSUNBTCBPUiBFTU9USU9OQUwgSU5KVVJZIE9SIEhBUk0gUkVTVUxUSU5HIEFOWSBXQVkgT1IgQVJJU0lORyBPVVQgT0YgSU5TVEFMTEFUSU9OIFNFUlZJQ0VTIE9SIENMSUVOVFMgT0JUQUlORUQgVEhST1VHSCBUSEUgU0VSVklDRS4gQUxMIFVTRVJTLCBJTkNMVURJTkcgQ0xJRU5UUyBBTkQgREVTSUdORVJTLCBIRVJFQlkgRVhQUkVTU0xZIEFHUkVFIE5PVCBUTyBIT0xEIFRIRSBSRUxFQVNFRCBQQVJUSUVTIExJQUJMRSBGT1IgQU5ZIElOU1RBTExBVElPTiwgSU5TVFJVQ1RJT04sIEFEVklDRSBPUiBTRVJWSUNFUyBERUxJVkVSRUQgV0hJQ0ggT1JJR0lOQVRFRCBUSFJPVUdIIFRIRSBTRVJWSUNFIEFORCBUSEUgUkVMRUFTRUQgUEFSVElFUyBFWFBSRVNTTFkgRElTQ0xBSU0gQU5ZIExJQUJJTElUWSBXSEFUU09FVkVSIEZPUiBBTlkgREFNQUdFLCBTVUlUUywgQ0xBSU1TLCBBTkQvT1IgQ09OVFJPVkVSU0lFUyBUSEFUIEFSSVNFIE9SIFJFTEFURUQgSU4gQU5ZIFdBWSBUTyBUSEUgU0VSVklDRSwgVEhFIElORk9STUFUSU9OIFBST1ZJREVEIFRIUk9VR0ggVEhFIFNFUlZJQ0UgQU5EIFRIRSBTRVJWSUNFUyBQUk9WSURFRCBCWSBPUiBUTyBBTlkgVVNFUiBPRiBUSEUgU0VSVklDRS48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNvbnRlbnQgQWNjdXJhY3kuIFdlIG1ha2Ugbm8gcmVwcmVzZW50YXRpb25zIGFib3V0IGFjY3VyYWN5LCByZWxpYWJpbGl0eSwgY29tcGxldGVuZXNzLCBvciB0aW1lbGluZXNzIG9mIGFueSBjb250ZW50cyBvZiB0aGUgU2VydmljZSwgaW5jbHVkaW5nIGRlc2lnbnMuIFNpbWlsYXJseSwgd2UgbWFrZSBubyByZXByZXNlbnRhdGlvbnMgYWJvdXQgYWNjdXJhY3ksIHJlbGlhYmlsaXR5LCBjb21wbGV0ZW5lc3MsIG9yIHRpbWVsaW5lc3Mgb2YgYW55IGRhdGEgZnJvbSBhIHRoaXJkLXBhcnR5IHNlcnZpY2UgcHJvdmlkZXIgb3IgdGhlIHF1YWxpdHkgb3IgbmF0dXJlIG9mIHRoaXJkLXBhcnR5IHByb2R1Y3RzIG9yIHNlcnZpY2VzIG9idGFpbmVkIHRocm91Z2ggdGhlIFNlcnZpY2UuIFVzZSB0aGUgU2VydmljZSBhdCB5b3VyIG93biByaXNrLiA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoaXJkLVBhcnR5IFdlYnNpdGVzLiBUaGUgU2VydmljZSBtYXkgaW5jbHVkZSBsaW5rcyB0byB0aGlyZCBwYXJ0eSB3ZWJzaXRlcyBhbmQgYXBwbGljYXRpb25zLiBZb3UgYXJlIHJlc3BvbnNpYmxlIGZvciBldmFsdWF0aW5nIHdoZXRoZXIgeW91IHdhbnQgdG8gYWNjZXNzIG9yIHVzZSB0aGVtLiBXZSBhcmUgbm90IHJlc3BvbnNpYmxlIGZvciBhbmQgZG8gbm90IGVuZG9yc2UgYW55IGZlYXR1cmVzLCBjb250ZW50LCBhZHZlcnRpc2luZywgcHJvZHVjdHMsIG9yIG90aGVyIG1hdGVyaWFscyBvbiBvdGhlciB3ZWJzaXRlcyBvciBhcHBsaWNhdGlvbnMuIFlvdSBhc3N1bWUgYWxsIHJpc2sgYW5kIHdlIGRpc2NsYWltIGFsbCBsaWFiaWxpdHkgYXJpc2luZyBmcm9tIHlvdXIgdXNlIG9mIHRoZW0uIFdlIG1ha2Ugbm8gcHJvbWlzZXMgYW5kIGRpc2NsYWltIGFsbCBsaWFiaWxpdHkgb2Ygc3BlY2lmaWMgcmVzdWx0cyBmcm9tIHRoZSB1c2Ugb2YgdGhlIFNlcnZpY2UuIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJmb250LXdlaWdodC1ib2xkXCI+VGVybWluYXRpb24uXG4gICAgICAgICAgICAgICAgICAgIDxvbCBjbGFzcz1cImZvbnQtd2VpZ2h0LW5vcm1hbCBudW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGUgRVVMQSBpcyBlZmZlY3RpdmUgdW50aWwgdGVybWluYXRlZCBieSB5b3Ugb3IgVklSVFVBTC4gWW91ciByaWdodHMgdW5kZXIgdGhlIEVVTEEgd2lsbCB0ZXJtaW5hdGUgYXV0b21hdGljYWxseSB3aXRob3V0IG5vdGljZSBmcm9tIFZJUlRVQUwgaWYgeW91IGZhaWwgdG8gY29tcGx5IHdpdGggYW55IHRlcm0ocykgb2YgdGhlIEVVTEEgKGluY2x1ZGluZyBieSB2aW9sYXRpbmcgYW55IGxpY2Vuc2UgcmVzdHJpY3Rpb24gcHJvdmlkZWQgaGVyZWluKS4gWW91IG1heSB0ZXJtaW5hdGUgdGhlIEVVTEEgYnkgdW5pbnN0YWxsaW5nIHRoZSBBcHAgb3IgY2Vhc2luZyB1c2Ugb2YgdGhlIFNlcnZpY2UuIFVwb24gYW55IHRlcm1pbmF0aW9uIG9mIHRoZSBFVUxBLCB5b3UgbXVzdCBpbW1lZGlhdGVseSBjZWFzZSBhbGwgdXNlIG9mIHRoZSBTZXJ2aWNlLiBJZiB5b3UgYXJlIGEgY29udHJhY3RvciB0aGF0IHdhcyBzZWxlY3RlZCBieSBhIHVzZXIgdG8gcGVyZm9ybSB3b3JrIGFuZCB5b3UgdGVybWluYXRlIHlvdXIgYWNjb3VudCBiZWZvcmUgeW91IGhhdmUgY29tcGxldGVseSBkZWxpdmVyZWQgdGhlIFByb2plY3QsIHlvdSBtYXkgbm90IGJlIGFsbG93ZWQgdG8gdXNlIHRoZSBTZXJ2aWNlIGluIHRoZSBmdXR1cmUuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImZvbnQtd2VpZ2h0LWJvbGRcIj5EaXNjbGFpbWVyLlxuICAgICAgICAgICAgICAgICAgICA8b2wgY2xhc3M9XCJmb250LXdlaWdodC1ub3JtYWwgbnVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XCJSZWxlYXNlZCBQYXJ0aWVzXCIgaW5jbHVkZSBWSVJUVUFMIGFuZCBpdHMgYWZmaWxpYXRlcywgb2ZmaWNlcnMsIGVtcGxveWVlcywgYWdlbnRzLCBwYXJ0bmVycywgYW5kIGxpY2Vuc29ycyBZT1UgRVhQUkVTU0xZIFVOREVSU1RBTkQgQU5EIEFHUkVFIFRIQVQ6IChBKSBZT1VSIFVTRSBPRiBUSEUgU0VSVklDRSBJUyBBVCBZT1VSIFNPTEUgUklTSywgQU5EIFRIRSBTRVJWSUNFIElTIFBST1ZJREVEIE9OIEFOIFwiQVMgSVNcIiBBTkQgXCJBUyBBVkFJTEFCTEVcIiBCQVNJUyBBTkQgVEhFIFJFTEVBU0VEIFBBUlRJRVMgRVhQUkVTU0xZIERJU0NMQUlNIEFMTCBXQVJSQU5USUVTIE9GIEFOWSBLSU5ELCBXSEVUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFdBUlJBTlRJRVMgQVMgVE8gUFJPRFVDVFMgT1IgU0VSVklDRVMgT0ZGRVJFRCBCWSBCVVNJTkVTU0VTIExJU1RFRCBPTiBUSEUgU0VSVklDRSwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsIEFORCBOT04tSU5GUklOR0VNRU5UOyAoQikgVEhFIFJFTEVBU0VEIFBBUlRJRVMgTUFLRSBOTyBXQVJSQU5UWSBUSEFUIChpKSBUSEUgU0VSVklDRSBXSUxMIE1FRVQgWU9VUiBSRVFVSVJFTUVOVFMsIChpaSkgVEhFIFNFUlZJQ0UgV0lMTCBCRSBVTklOVEVSUlVQVEVELCBUSU1FTFksIFNFQ1VSRSwgT1IgRVJST1ItRlJFRSwgKGlpaSkgVEhFIFJFU1VMVFMgVEhBVCBNQVkgQkUgT0JUQUlORUQgRlJPTSBUSEUgVVNFIE9GIFRIRSBTRVJWSUNFLCBJTkNMVURJTkcgREFUQSwgV0lMTCBCRSBBQ0NVUkFURSBPUiBSRUxJQUJMRSwgKGl2KSBUSEUgUVVBTElUWSBPRiBBTlkgR09PRFMsIERBVEEgT1IgU0VSVklDRSBBVkFJTEFCTEUgT04gVEhFIFNFUlZJQ0UgV0lMTCBNRUVUIFlPVVIgRVhQRUNUQVRJT05TIEFORCwgKGl2KSBBTlkgRVJST1JTIElOIFRIRSBTRVJWSUNFIFdJTEwgQkUgQ09SUkVDVEVEOyBBTkQgKEMpIEFOWSBNQVRFUklBTCBPQlRBSU5FRCBUSFJPVUdIIFRIRSBVU0UgT0YgVEhFIFNFUlZJQ0UgSVMgQUNDRVNTRUQgQVQgWU9VUiBPV04gRElTQ1JFVElPTiBBTkQgUklTSywgQU5EIFlPVSBXSUxMIEJFIFNPTEVMWSBSRVNQT05TSUJMRSBGT1IgQU5ZIERBTUFHRSBUTyBZT1VSIENPTVBVVEVSIFNZU1RFTSBPUiBNT0JJTEUgREVWSUNFIE9SIExPU1MgT0YgREFUQSBUSEFUIFJFU1VMVFMgRlJPTSBUSEUgVVNFIE9GIEFOWSBTVUNIIE1BVEVSSUFMLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJmb250LXdlaWdodC1ib2xkXCI+TGltaXRhdGlvbiBvZiBMaWFiaWxpdHkuXG4gICAgICAgICAgICAgICAgICAgIDxvbCBjbGFzcz1cImZvbnQtd2VpZ2h0LW5vcm1hbCBudW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ZT1UgRVhQUkVTU0xZIFVOREVSU1RBTkQgQU5EIEFHUkVFIFRIQVQgVEhFIFJFTEVBU0VEIFBBUlRJRVMgV0lMTCBOT1QgQkUgTElBQkxFIFRPIFlPVSBGT1IgQU5ZIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBDT05TRVFVRU5USUFMLCBPUiBFWEVNUExBUlkgREFNQUdFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIERBTUFHRVMgRk9SIExPU1MgT0YgUFJPRklUUywgR09PRFdJTEwsIFVTRSwgREFUQSBPUiBPVEhFUiBJTlRBTkdJQkxFIExPU1NFUyAoRVZFTiBJRiBWSVJUVUFMIEhBUyBCRUVOIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFUyksIFJFU1VMVElORyBGUk9NOiAoaSkgVEhFIFVTRSBPUiBUSEUgSU5BQklMSVRZIFRPIFVTRSBUSEUgU0VSVklDRTsgKGlpKSBUSEUgQ09TVCBPRiBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIEFORCBTRVJWSUNFUyBSRVNVTFRJTkcgRlJPTSBBTlkgR09PRFMsIERBVEEsIElORk9STUFUSU9OIE9SIFNFUlZJQ0VTIE9CVEFJTkVEIE9SIE1FU1NBR0VTIFJFQ0VJVkVEIE9SIFRSQU5TQUNUSU9OUyBFTlRFUkVEIElOVE8gVEhST1VHSCwgRlJPTSwgT1IgQVMgQSBSRVNVTFQgT0YgVEhFIFNJVEU7IChpaWkpIFVOQVVUSE9SSVpFRCBBQ0NFU1MgVE8gT1IgQUxURVJBVElPTiBPRiBZT1VSIFRSQU5TTUlTU0lPTlMgT1IgREFUQTsgKGl2KSBTVEFURU1FTlRTIE9SIENPTkRVQ1QgT0YgQU5ZIFVTRVIgT1IgVEhJUkQgUEFSVFkgT04gVEhFIFNFUlZJQ0U7ICh2KSBZT1VSIFJFTElBTkNFIE9OIENPTlRFTlQgT1IgREFUQSBNQURFIEFWQUlMQUJMRSBCWSBVUzsgT1IgKHZpKSBBTlkgT1RIRVIgTUFUVEVSIFJFTEFUSU5HIFRPIFRIRSBTRVJWSUNFLiBTT01FIEpVUklTRElDVElPTlMgRE8gTk9UIEFMTE9XIFRIRSBFWENMVVNJT04gT0YgQ0VSVEFJTiBXQVJSQU5USUVTIE9SIFRIRSBMSU1JVEFUSU9OIE9SIEVYQ0xVU0lPTiBPRiBMSUFCSUxJVFkgRk9SIElOQ0lERU5UQUwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTLiBBQ0NPUkRJTkdMWSwgU09NRSBPRiBUSEUgQUJPVkUgTElNSVRBVElPTlMgSU4gVEhJUyBQQVJBR1JBUEggTUFZIE5PVCBBUFBMWSBUTyBZT1UuIFRPIFRIRSBGVUxMRVNUIEVYVEVOVCBQT1NTSUJMRSBCWSBMQVcsIFRIRSBSRUxFQVNFRCBQQVJUSUVTJyBNQVhJTVVNIExJQUJJTElUWSBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNFUlZJQ0UgT1IgWU9VUiBVU0UgT0YgQ09NUEFOWSBDT05URU5ULCBSRUdBUkRMRVNTIE9GIFRIRSBDQVVTRSBPRiBBQ1RJT04gKFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFRPUlQsIEJSRUFDSCBPRiBXQVJSQU5UWSwgT1IgT1RIRVJXSVNFKSwgV0lMTCBOT1QgRVhDRUVEIFRIRSBHUkVBVEVSIE9GIChBKSwgSUYgWU9VIEFSRSBBIENMSUVOVCwgVEhFIEZFRVMgWU9VIEhBVkUgUEFJRCBUTyBWSVJUVUFMLCAoQikgSUYgWU9VIEFSRSBBIERFU0lHTkVSLCBUSEUgRkVFUyBQQUlEIEJZIFZJUlRVQUwgVE8gWU9VLCBBTkQgKEMpICQxMDAuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImZvbnQtd2VpZ2h0LWJvbGRcIj5JbmRlbW5pdHkuXG4gICAgICAgICAgICAgICAgICAgIDxvbCBjbGFzcz1cImZvbnQtd2VpZ2h0LW5vcm1hbCBudW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3UgYWdyZWUgdG8gZGVmZW5kLCBpbmRlbW5pZnksIGFuZCBob2xkIGhhcm1sZXNzIHRoZSBSZWxlYXNlZCBQYXJ0aWVzIGZyb20gYW5kIGFnYWluc3QgYW55IGNsYWltcywgYWN0aW9ucywgb3IgZGVtYW5kcywgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiByZWFzb25hYmxlIGxlZ2FsIGFuZCBhY2NvdW50aW5nIGZlZXMsIGFsbGVnaW5nIG9yIHJlc3VsdGluZyBmcm9tIChpKSB5b3VyIHVzZSBvZiBvciByZWxpYW5jZSBvbiBhbnkgVGhpcmQtUGFydHkgQ29udGVudCwgKGlpKSB5b3VyIHVzZSBvZiBvciByZWxpYW5jZSBvbiBhbnkgVklSVFVBTCBDb250ZW50IG9yIGRlc2lnbnMsIG9yIChpaWkpIHlvdXIgYnJlYWNoIG9mIHRoZSBFVUxBLiBXZSB3aWxsIHByb3ZpZGUgbm90aWNlIHRvIHlvdSBwcm9tcHRseSBvZiBhbnkgc3VjaCBjbGFpbSwgc3VpdCwgb3IgcHJvY2VlZGluZy48L2xpPlxuICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiZm9udC13ZWlnaHQtYm9sZFwiPlRoaXJkIFBhcnR5IERpc3B1dGVzLlxuICAgICAgICAgICAgICAgICAgICA8b2wgY2xhc3M9XCJmb250LXdlaWdodC1ub3JtYWwgbnVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+VklSVFVBTCBJUyBOT1QgQUZGSUxJQVRFRCBXSVRIIEFOWSBTRVJWSUNFIFBST1ZJREVSIE9SIFRISVJEIFBBUlRZIFNFUlZJQ0UsIEFORCBBTlkgRElTUFVURSBZT1UgSEFWRSBXSVRIIEFOWSBTRVJWSUNFIFBST1ZJREVSLCBUSElSRCBQQVJUWSBTRVJWSUNFIE9SIE9USEVSIFRISVJEIFBBUlRZLCBJTkNMVURJTkcsIFdJVEhPVVQgTElNSVRBVElPTiwgQU5ZIE9USEVSIFVTRVIgT0YgVEhFIFNFUlZJQ0UsIElTIERJUkVDVExZIEJFVFdFRU4gWU9VIEFORCBTVUNIIFRISVJEIFBBUlRZLCBBTkQgWU9VIElSUkVWT0NBQkxZIFJFTEVBU0UgVEhFIFJFTEVBU0VEIFBBUlRJRVMgRlJPTSBBTlkgQU5EIEFMTCBDTEFJTVMsIERFTUFORFMgQU5EIERBTUFHRVMgKEFDVFVBTCBBTkQgQ09OU0VRVUVOVElBTCkgT0YgRVZFUlkgS0lORCBBTkQgTkFUVVJFLCBLTk9XTiBBTkQgVU5LTk9XTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQU5ZIFdBWSBDT05ORUNURUQgV0lUSCBTVUNIIERJU1BVVEVTLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJmb250LXdlaWdodC1ib2xkXCI+Q29weXJpZ2h0IFBvbGljeS5cbiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPVwiZm9udC13ZWlnaHQtbm9ybWFsIG51bVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoZSBEaWdpdGFsIE1pbGxlbm5pdW0gQ29weXJpZ2h0IEFjdCBvZiAxOTk4ICh0aGUgXCJETUNBXCIpIHByb3ZpZGVzIHJlY291cnNlIGZvciBjb3B5cmlnaHQgb3duZXJzIHdobyBiZWxpZXZlIHRoYXQgbWF0ZXJpYWwgYXBwZWFyaW5nIG9uIHRoZSBJbnRlcm5ldCBpbmZyaW5nZXMgdGhlaXIgcmlnaHRzIHVuZGVyIFUuUy4gY29weXJpZ2h0IGxhdy4gSWYgeW91IGJlbGlldmUgaW4gZ29vZCBmYWl0aCB0aGF0IG1hdGVyaWFscyBwb3N0ZWQgb24gdGhlIFNlcnZpY2UgaW5mcmluZ2UgeW91ciBjb3B5cmlnaHQsIHlvdSAob3IgeW91ciBhZ2VudCkgbWF5IHNlbmQgVklSVFVBTCBhIFwiTm90aWZpY2F0aW9uIG9mIENsYWltZWQgSW5mcmluZ2VtZW50XCIgcmVxdWVzdGluZyB0aGF0IHRoZSBtYXRlcmlhbCBiZSByZW1vdmVkLCBvciBhY2Nlc3MgdG8gaXQgYmxvY2tlZCBUaGUgbm90aWNlIG11c3QgaW5jbHVkZSB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbCB0eXBlPVwiYVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QSBwaHlzaWNhbCBvciBlbGVjdHJvbmljIHNpZ25hdHVyZSBvZiBhIHBlcnNvbiBhdXRob3JpemVkIHRvIGFjdCBvbiBiZWhhbGYgb2YgdGhlIG93bmVyIG9mIHRoZSB3b3JrcyB0aGF0IGhhdmUgYmVlbiBhbGxlZ2VkbHkgaW5mcmluZ2VkOzwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JZGVudGlmaWNhdGlvbiBvZiB0aGUgY29weXJpZ2h0ZWQgd29yayBhbGxlZ2VkIHRvIGhhdmUgYmVlbiBpbmZyaW5nZWQgKG9yIGlmIG11bHRpcGxlIGNvcHlyaWdodGVkIHdvcmtzIGxvY2F0ZWQgb24gdGhlIFNlcnZpY2UgYXJlIGNvdmVyZWQgYnkgYSBzaW5nbGUgbm90aWZpY2F0aW9uLCBhIHJlcHJlc2VudGF0aXZlIGxpc3Qgb2Ygc3VjaCB3b3Jrcyk7PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklkZW50aWZpY2F0aW9uIG9mIHRoZSBzcGVjaWZpYyBtYXRlcmlhbCBhbGxlZ2VkIHRvIGJlIGluZnJpbmdpbmcgb3IgdGhlIHN1YmplY3Qgb2YgaW5mcmluZ2luZyBhY3Rpdml0eSwgYW5kIGluZm9ybWF0aW9uIHJlYXNvbmFibHkgc3VmZmljaWVudCB0byBhbGxvdyBWSVJUVUFMIHRvIGxvY2F0ZSB0aGUgbWF0ZXJpYWwgb24gdGhlIFNlcnZpY2U7IDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3VyIG5hbWUsIGFkZHJlc3MsIHRlbGVwaG9uZSBudW1iZXIsIGFuZCBlbWFpbCBhZGRyZXNzIChpZiBhdmFpbGFibGUpOzwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BIHN0YXRlbWVudCB0aGF0IHlvdSBoYXZlIGEgZ29vZCBmYWl0aCBiZWxpZWYgdGhhdCB1c2Ugb2YgdGhlIG1hdGVyaWFsIGluIHRoZSBtYW5uZXIgY29tcGxhaW5lZCBvZiBpcyBub3QgYXV0aG9yaXplZCBieSB0aGUgY29weXJpZ2h0IG93bmVyLCBpdHMgYWdlbnQsIG9yIHRoZSBsYXc7IGFuZDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BIHN0YXRlbWVudCB0aGF0IHRoZSBpbmZvcm1hdGlvbiBpbiB0aGUgbm90aWZpY2F0aW9uIGlzIGFjY3VyYXRlLCBhbmQgdW5kZXIgcGVuYWx0eSBvZiBwZXJqdXJ5LCB0aGF0IHRoZSBjb21wbGFpbmluZyBwYXJ0eSBpcyBhdXRob3JpemVkIHRvIGFjdCBvbiBiZWhhbGYgb2YgdGhlIG93bmVyIG9mIGFuIGV4Y2x1c2l2ZSByaWdodCB0aGF0IGlzIGFsbGVnZWRseSBpbmZyaW5nZWQuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JZiB5b3UgYmVsaWV2ZSBpbiBnb29kIGZhaXRoIHRoYXQgYSBub3RpY2Ugb2YgY29weXJpZ2h0IGluZnJpbmdlbWVudCBoYXMgYmVlbiB3cm9uZ2x5IGZpbGVkIGFnYWluc3QgeW91LCB0aGUgRE1DQSBwZXJtaXRzIHlvdSB0byBzZW5kIFZJUlRVQUwgYSBjb3VudGVyLW5vdGljZS48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vdGljZXMgYW5kIGNvdW50ZXItbm90aWNlcyBtdXN0IG1lZXQgdGhlIHRoZW4tY3VycmVudCBzdGF0dXRvcnkgcmVxdWlyZW1lbnRzIGltcG9zZWQgYnkgdGhlIERNQ0E7IHNlZSBodHRwOi8vd3d3LmxvYy5nb3YvY29weXJpZ2h0LyBmb3IgZGV0YWlscy4gSWYgeW91IGJlbGlldmUgeW91ciBjb3B5cmlnaHRlZCBjb250ZW50IGhhcyBiZWVuIGRpc3BsYXllZCBpbmFwcHJvcHJpYXRlbHkgb24gdGhlIFNlcnZpY2UsIHBsZWFzZSBjb250YWN0IG91ciBEZXNpZ25hdGVkIEFnZW50IGFzIG5vdGVkIGJlbG93LiBDb25zdWx0IHlvdXIgbGVnYWwgYWR2aXNvciBhbmQgc2VlIDE3IFUuUy5DLiDCpDUxMiBiZWZvcmUgZmlsaW5nIGEgbm90aWNlIG9yIGNvdW50ZXItbm90aWNlIGFzIHRoZXJlIGFyZSBwZW5hbHRpZXMgZm9yIGZhbHNlIGNsYWltcyB1bmRlciB0aGUgRE1DQTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcmVzcyBjbGFzcz1cImQtYmxvY2sgcC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlc2lnbmF0ZWQgQ29weXJpZ2h0IEFnZW50PGJyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWSVJUVUFMIFNIT1dST09NIERFU0lHTiBJTkM8YnI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwMDAgSEFSVkVZIERSIEFQVCAjNjYwPGJyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXQUxOVVQgQ1JFRUsgQ0EgOTQ1OTdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHJlc3M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiZm9udC13ZWlnaHQtYm9sZFwiPkRpc3B1dGUgUmVzb2x1dGlvbi5cbiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPVwibnVtIGZvbnQtd2VpZ2h0LW5vcm1hbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoZSBFVUxBIGFuZCB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4geW91IGFuZCBWSVJUVUFMIHdpbGwgYmUgZ292ZXJuZWQgYnkgdGhlIGxhd3Mgb2YgdGhlIFN0YXRlIG9mIENhbGlmb3JuaWEuIFlvdSBhbmQgVklSVFVBTCBhZ3JlZSB0byBzdWJtaXQgdG8gdGhlIHBlcnNvbmFsIGFuZCBleGNsdXNpdmUgYXJiaXRyYXRpb24gb2YgYW55IGRpc3B1dGVzIHJlbGF0aW5nIHRvIHlvdXIgdXNlIG9mIHRoZSBTZXJ2aWNlIHVuZGVyIHRoZSBydWxlcyBvZiB0aGUgQW1lcmljYW4gQXJiaXRyYXRpb24gQXNzb2NpYXRpb24uIEFueSBzdWNoIGFyYml0cmF0aW9uLCB0byB0aGUgZXh0ZW50IG5lY2Vzc2FyeSwgc2hhbGwgYmUgY29uZHVjdGVkIGluIENvbnRyYSBDb3N0YSBDb3VudHkgaW4gdGhlIFN0YXRlIG9mIENhbGlmb3JuaWEuIFlvdSBjb3ZlbmFudCBub3QgdG8gc3VlIFZJUlRVQUwgaW4gYW55IG90aGVyIGZvcnVtLiA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBhbHNvIGFja25vd2xlZGdlIGFuZCB1bmRlcnN0YW5kIHRoYXQsIHdpdGggcmVzcGVjdCB0byBhbnkgZGlzcHV0ZSB3aXRoIHRoZSBSZWxlYXNlZCBQYXJ0aWVzIGFyaXNpbmcgb3V0IG9mIG9yIHJlbGF0aW5nIHRvIHlvdXIgdXNlIG9mIHRoZSBTZXJ2aWNlIG9yIHRoZSBFVUxBOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbCB0eXBlPVwiYVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WU9VIEFSRSBHSVZJTkcgVVAgWU9VUiBSSUdIVCBUTyBIQVZFIEEgVFJJQUwgQlkgSlVSWTs8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WU9VIEFSRSBHSVZJTkcgVVAgWU9VUiBSSUdIVCBUTyBTRVJWRSBBUyBBIFJFUFJFU0VOVEFUSVZFLCBBUyBBIFBSSVZBVEUgQVRUT1JORVkgR0VORVJBTCwgT1IgSU4gQU5ZIE9USEVSIFJFUFJFU0VOVEFUSVZFIENBUEFDSVRZLCBPUiBUTyBQQVJUSUNJUEFURSBBUyBBIE1FTUJFUiBPRiBBIENMQVNTIE9GIENMQUlNQU5UUywgSU4gQU5ZIExBV1NVSVQgSU5WT0xWSU5HIEFOWSBTVUNIIERJU1BVVEU7IEFORDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ZT1UgTVVTVCBGSUxFIEFOWSBDTEFJTSBXSVRISU4gT05FICgxKSBZRUFSIEFGVEVSIFNVQ0ggQ0xBSU0gQVJPU0UgT1IgSVQgSVMgRk9SRVZFUiBCQVJSRUQuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImZvbnQtd2VpZ2h0LWJvbGRcIj5SZXR1cm4gUG9saWN5LlxuICAgICAgICAgICAgICAgICAgICA8b2wgY2xhc3M9XCJudW0gZm9udC13ZWlnaHQtbm9ybWFsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+Rm9yIEN1c3RvbWVyczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2wgdHlwZT1cImFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkN1c3RvbWVycyBoYXZlIHVwIHRvIDEyIGRheXMgdG8gcmV0dXJuIGFueSBpdGVtLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DdXN0b21lcnMgbXVzdCBzaGlwIHRoZSBpdGVtIGRpcmVjdGx5IHRvIHZlbmRvciBhdCB0aGVpciBjb3N0LjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGUgaW5pdGlhbCBjb3N0IHRvIHNoaXAgdGhlIHJldHVybmVkIGl0ZW0gd2lsbCBiZSBkZWR1Y3RlZCBmcm9tIHRoZSBDdXN0b21lcnMgcmVmdW5kLiBUaGlzIGlzIHRvIGJlIGNvbnNpZGVyZWQgYSDigJxyZXN0b2NraW5n4oCdIGZlZS48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmVmdW5kcyBvbmx5IGZvciB0aGUgaXRlbShzKSB0aGVtc2VsdmVzIHdpbGwgYmUgY3JlZGl0ZWQgYmFjayB0byBjdXN0b21lcnMnIGNyZWRpdC9kZWJpdCBjYXJkcyB1cG9uIHRoZSB2ZW5kb3IgcmVjZWlwdCBvZiBhIHJldHVybmVkIGl0ZW0uPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Gb3IgVmVuZG9yczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2wgdHlwZT1cImFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlZlbmRvcnMgaGF2ZSAzMCBkYXlzIHRvIGFwcGx5IGEgY3VzdG9tZXLigJlzIHJlZnVuZCBvbmNlIGFuIGl0ZW0gaGFzIGJlZW4gcmV0dXJuZWQgYnkgQ3VzdG9tZXIuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNob3VsZCBhIGN1c3RvbWVyIHJldHVybiBhbiBpdGVtLCBvbmx5IHRoZSBjb3N0IG9mIHRoZSBpdGVtIGl0c2VsZiBuZWVkIGJlIHJlaW1idXJzZWQuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsbCBzaGlwcGluZyBjb3N0cywgaW5jbHVkaW5nIHRoZSB2ZW5kb3JzIGluaXRpYWwgY29zdCB0byBzaGlwIGFuIGl0ZW0gd2lsbCBiZSBwYWlkLCBpbiBmdWxsLCBwcmlvciB0byBhIHJlZnVuZCBiZWluZyBpbml0aWF0ZWQuIFRoaXMgY29zdCB3aWxsIGJlIGRlZHVjdGVkIGF1dG9tYXRpY2FsbHkgZnJvbSB0aGUgY3VzdG9tZXLigJlzIHJlZnVuZC48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhlIHJlaW1idXJzZW1lbnQgb2YgdGhlIGluaXRpYWwgY29zdCB0byBzaGlwIGFuIGl0ZW0gc2hhbGwgYmUgY29uc2lkZXJlZCBhIOKAnHJlc3RvY2tpbmfigJ0gZmVlIGFuZCB3aWxsIGJlIHNlbnQgdG8gdGhlIFZlbmRvciBhcyBzdWNoLjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJmb250LXdlaWdodC1ib2xkXCI+TWlzY2VsbGFuZW91cy5cbiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPVwibnVtIGZvbnQtd2VpZ2h0LW5vcm1hbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjx1PkFzc2lnbm1lbnQuPC91PiBZb3UgbWF5IG5vdCBhc3NpZ24gdGhpcyBFVUxBIG9yIGFueSBvZiB0aGUgcmlnaHRzIG9yIGxpY2Vuc2VzIGdyYW50ZWQgaGVyZXVuZGVyLCBkaXJlY3RseSBvciBpbmRpcmVjdGx5LCBpbmNsdWRpbmcgYnkgc2FsZSwgbWVyZ2VyLCBjaGFuZ2Ugb2YgY29udHJvbCwgb3BlcmF0aW9uIG9mIGxhdyBvciBvdGhlcndpc2UsIHdpdGhvdXQgdGhlIHByaW9yIHdyaXR0ZW4gY29uc2VudCBvZiBWSVJUVUFMLiBWSVJUVUFMIG1heSBhc3NpZ24gdGhlIEVVTEEsIGluY2x1ZGluZyBhbGwgaXRzIHJpZ2h0cyBoZXJldW5kZXIsIHdpdGhvdXQgcmVzdHJpY3Rpb24uPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48dT5TdXJ2aXZhbC48L3U+IFRoZSBwcm92aXNpb25zIG9mIHRoZSBFVUxBIHRoYXQgYXJlIGludGVuZGVkIHRvIHN1cnZpdmUgdGhlIHRlcm1pbmF0aW9uIG9mIHRoZSBFVUxBIGJ5IHRoZWlyIG5hdHVyZSB3aWxsIHN1cnZpdmUgdGhlIHRlcm1pbmF0aW9uIG9mIHRoZSBFVUxBLCBpbmNsdWRpbmcsIGJ1dCBub3QgbGltaXRlZCB0bywgU2VjdGlvbnMgMiAoR2VuZXJhbCksIDUgKENvbnRlbnQgWW91IFN1Ym1pdDsgTGljZW5zZSBHcmFudHMgZnJvbSBZb3UpLCA4IChUaGlyZCBQYXJ0eSBTb2Z0d2FyZSksIDkgKFlvdXIgVXNlIG9mIHRoZSBTZXJ2aWNlIGFuZCBTZXJ2aWNlIENvbnRlbnQpLCAxMCAoQ29uc2VudCB0byBVc2Ugb2YgRGF0YSksIDExIChPd25lcnNoaXApLCAxMiAoRmVlZGJhY2spLCAxNCAoVklSVFVBTCdzIExpYWJpbGl0eSksIDE1IChUZXJtaW5hdGlvbiksIDE2IChEaXNjbGFpbWVyKSwgMTcgKExpbWl0YXRpb24gb2YgTGlhYmlsaXR5KSwgMTggKEluZGVtbml0eSksIDE5IChUaGlyZCBQYXJ0eSBEaXNwdXRlcyksIDIwIChDb3B5cmlnaHQgUG9saWN5KSwgMjEgKERpc3B1dGUgUmVzb2x1dGlvbiksIGFuZCAyMiAoTWlzY2VsbGFuZW91cykuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Db25zZW50IHRvIEVsZWN0cm9uaWMgQ29tbXVuaWNhdGlvbnMuIEJ5IHVzaW5nIHRoZSBTZXJ2aWNlLCB5b3UgY29uc2VudCB0byByZWNlaXZpbmcgY2VydGFpbiBlbGVjdHJvbmljIGNvbW11bmljYXRpb25zIGZyb20gdXMgYXMgZnVydGhlciBkZXNjcmliZWQgaW4gb3VyIFByaXZhY3kgUG9saWN5LiBQbGVhc2UgcmVhZCBvdXIgUHJpdmFjeSBQb2xpY3kgdG8gbGVhcm4gbW9yZSBhYm91dCB5b3VyIGNob2ljZXMgcmVnYXJkaW5nIG91ciBlbGVjdHJvbmljIGNvbW11bmljYXRpb25zIHByYWN0aWNlcy4gWW91IGFncmVlIHRoYXQgYW55IG5vdGljZXMsIGFncmVlbWVudHMsIGRpc2Nsb3N1cmVzLCBvciBvdGhlciBjb21tdW5pY2F0aW9ucyB0aGF0IHdlIHNlbmQgdG8geW91IGVsZWN0cm9uaWNhbGx5IHdpbGwgc2F0aXNmeSBhbnkgbGVnYWwgY29tbXVuaWNhdGlvbiByZXF1aXJlbWVudHMsIGluY2x1ZGluZyB0aGF0IHN1Y2ggY29tbXVuaWNhdGlvbnMgYmUgaW4gd3JpdGluZy48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoZSBFVUxBLCB0b2dldGhlciB3aXRoIHRoZSBQcml2YWN5IFBvbGljeSBhbmQgYW55IG90aGVyIGFncmVlbWVudHMgZXhwcmVzc2x5IGluY29ycG9yYXRlZCBieSByZWZlcmVuY2UgaGVyZWluLCBjb25zdGl0dXRlIHRoZSBlbnRpcmUgYW5kIGV4Y2x1c2l2ZSB1bmRlcnN0YW5kaW5nIGFuZCBhZ3JlZW1lbnQgYmV0d2VlbiB5b3UgYW5kIFZJUlRVQUwgcmVnYXJkaW5nIHlvdXIgdXNlIG9mIGFuZCBhY2Nlc3MgdG8gdGhlIFNlcnZpY2UsIGFuZCwgZXhjZXB0IGFzIGV4cHJlc3NseSBwZXJtaXR0ZWQgYWJvdmUsIG1heSBiZSBhbWVuZGVkIG9ubHkgYnkgYSB3cml0dGVuIGFncmVlbWVudCBzaWduZWQgYnkgYXV0aG9yaXplZCByZXByZXNlbnRhdGl2ZXMgb2YgYWxsIHBhcnRpZXMgdG8gdGhlIEVVTEEuIFRoZSBmYWlsdXJlIHRvIHJlcXVpcmUgcGVyZm9ybWFuY2Ugb2YgYW55IHByb3Zpc2lvbiB3aWxsIG5vdCBhZmZlY3Qgb3VyIHJpZ2h0IHRvIHJlcXVpcmUgcGVyZm9ybWFuY2UgYXQgYW55IHRpbWUgdGhlcmVhZnRlciwgbm9yIHdpbGwgYSB3YWl2ZXIgb2YgYW55IGJyZWFjaCBvciBkZWZhdWx0IG9mIHRoZSBFVUxBIG9yIGFueSBwcm92aXNpb24gb2YgdGhlIEVVTEEgY29uc3RpdHV0ZSBhIHdhaXZlciBvZiBhbnkgc3Vic2VxdWVudCBicmVhY2ggb3IgZGVmYXVsdCBvciBhIHdhaXZlciBvZiB0aGUgcHJvdmlzaW9uIGl0c2VsZi4gVXNlIG9mIHNlY3Rpb24gaGVhZGVycyBpbiB0aGUgRVVMQSBpcyBmb3IgY29udmVuaWVuY2Ugb25seSBhbmQgd2lsbCBub3QgaGF2ZSBhbnkgaW1wYWN0IG9uIHRoZSBpbnRlcnByZXRhdGlvbiBvZiBwYXJ0aWN1bGFyIHByb3Zpc2lvbnMuIEluIHRoZSBldmVudCB0aGF0IGFueSBwYXJ0IG9mIHRoZSBFVUxBIGlzIGhlbGQgdG8gYmUgaW52YWxpZCBvciB1bmVuZm9yY2VhYmxlLCB0aGUgdW5lbmZvcmNlYWJsZSBwYXJ0IHNoYWxsIGJlIGdpdmVuIGVmZmVjdCB0byB0aGUgZ3JlYXRlc3QgZXh0ZW50IHBvc3NpYmxlIGFuZCB0aGUgcmVtYWluaW5nIHBhcnRzIHdpbGwgcmVtYWluIGluIGZ1bGwgZm9yY2UgYW5kIGVmZmVjdC4gWW91IGFncmVlIHRoYXQgbm8gam9pbnQgdmVudHVyZSwgcGFydG5lcnNoaXAsIGVtcGxveW1lbnQsIG9yIGFnZW5jeSByZWxhdGlvbnNoaXAgZXhpc3RzIGJldHdlZW4geW91IGFuZCBWSVJUVUFMIGFzIGEgcmVzdWx0IG9mIHRoZSBFVUxBIG9yIHVzZSBvZiB0aGUgU2VydmljZS48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNvbnRhY3RpbmcgVklSVFVBTC4gWW91IGNhbiBjb250YWN0IFZpcnR1YWwgYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcmVzcyBjbGFzcz1cImQtYmxvY2sgZm9udC13ZWlnaHQtYm9sZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWSVJUVUFMIFNIT1dST09NIERFU0lHTiBJTkM8YnI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwMDAgSEFSVkVZIERSIEFQVCAjNjYwPGJyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXQUxOVVQgQ1JFRUsgQ0EgOTQ1OTdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHJlc3M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8L29sPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gXG4gICAgZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6IFwiVGVybXNfY29uZGl0aW9uc1wiLFxuICAgIGNvbXBvbmVudHM6IHsgXG4gICAgICAgIFxuICAgIH0sXG4gICAgICAgIGRhdGEoKXtcbiAgICAgICAgICAgIHJldHVybiB7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIG1vdW50ZWQoKSB7XG4gICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBtZXRob2RzOntcbiAgICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlZCgpIHsgXG4gICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxuPC9zY3JpcHQ+XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICB2YXIgX3ZtID0gdGhpcyxcbiAgICBfYyA9IF92bS5fc2VsZi5fY1xuICByZXR1cm4gX3ZtLl9tKDApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXMsXG4gICAgICBfYyA9IF92bS5fc2VsZi5fY1xuICAgIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgICBfYyhcInNlY3Rpb25cIiwgeyBzdGF0aWNDbGFzczogXCJjb250YWluZXItZmx1aWQgc3RlcHNCYXJcIiB9LCBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29udGFpbmVyIG10LTVcIiB9LCBbXG4gICAgICAgICAgX2MoXCJoMVwiLCBbX3ZtLl92KFwiRU5EIFVTRVIgTElDRU5TRSBBR1JFRU1FTlQgQU5EIFRFUk1TIE9GIFNFUlZJQ0VcIildKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwicFwiLCBbXG4gICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICdUaGlzIEVuZCBVc2VyIExpY2Vuc2UgQWdyZWVtZW50IGFuZCBUZXJtcyBvZiBTZXJ2aWNlICh0aGUgXCJFVUxBXCIpIGlzIGEgYmluZGluZyBjb250cmFjdCBiZXR3ZWVuIHlvdSwgYW4gaW5kaXZpZHVhbCB1c2VyIChcInlvdVwiKSBvciB0aGUgU3Vic2NyaWJpbmcgRW50aXR5IChkZWZpbmVkIGJlbG93KSBvbiB3aG9zZSBiZWhhbGYgeW91IGFyZSBhY3RpbmcsIGFuZCBWSVJUVUFMIFNIT1dST09NIERFU0lHTiBJTkMuICgg4oCcVklSVFVBTOKAnSBcInVzXCIgb3IgXCJ3ZVwiKSBnb3Zlcm5pbmcgeW91ciB1c2Ugb2YgVklSVFVBTCBTSE9XUk9PTSBERVNJR04gSU5DLiBzZXJ2aWNlcyBhdmFpbGFibGUgdGhyb3VnaCB0aGUgVklSVFVBTCBTSE9XUk9PTSBERVNJR04gd2Vic2l0ZSAodGhlIFwiV2Vic2l0ZVwiKSBhbmQgdGhlIFZJUlRVQUwgU0hPV1JPT00gREVTSUdOIG1vYmlsZSBhcHBsaWNhdGlvbihzKSAodGhlIOKAnEFwcChzKeKAnSksIHdoZXJlIHRob3NlIHNlcnZpY2VzIGFyZSB0aGUg4oCcU2VydmljZeKAnSksIGFzIHdlbGwgYXMgeW91ciBhY2Nlc3MgdG8gYW5kIHVzZSBvZiB0aGUgV2Vic2l0ZSBhbmQgQXBwLiBCWSBJTlNUQUxMSU5HIE9SIE9USEVSV0lTRSBBQ0NFU1NJTkcgT1IgVVNJTkcgVEhFIFNFUlZJQ0UsIFlPVSBBR1JFRSBUSEFUIFlPVSBIQVZFIFJFQUQsIFVOREVSU1RPT0QsIEFORCBBR1JFRSBUTyBCRSBCT1VORCBCWSBUSEUgRVVMQS4gSUYgWU9VIERPIE5PVCBBR1JFRSBUTyBUSEUgRVVMQSwgVEhFTiBZT1UgTUFZIE5PVCBVU0UgVEhFIFNFUlZJQ0UuJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwicFwiLCBbXG4gICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICdUbyBoYXZlIGEgY29weSBvZiB0aGUgRVVMQSBhbmQgdGhlIFZJUlRVQUwgU0hPV1JPT00gREVTSUdOIFByaXZhY3kgUG9saWN5ICh0aGUgXCJQcml2YWN5IFBvbGljeVwiKSBzZW50IHRvIHlvdSwgY29udGFjdCBWSVJUVUFMIFNIT1dST09NIERFU0lHTiBhdCAnXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgX2MoXCJhXCIsIHsgYXR0cnM6IHsgaHJlZjogXCJtYWlsdG86Y2lpbmZvQHdldmlzdS5jb21cIiB9IH0sIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFwiY2lpbmZvQHdldmlzdS5jb21cIiksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIi5cIiksXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcIm9sXCIsIHsgc3RhdGljQ2xhc3M6IFwibnVtXCIsIGF0dHJzOiB7IHR5cGU6IFwiMVwiIH0gfSwgW1xuICAgICAgICAgICAgX2MoXCJsaVwiLCB7IHN0YXRpY0NsYXNzOiBcImZvbnQtd2VpZ2h0LWJvbGRcIiB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihcIlN1bW1hcnkgb2YgTWF0ZXJpYWwgVGVybXMuXFxuICAgICAgICAgICAgICAgICAgICBcIiksXG4gICAgICAgICAgICAgIF9jKFwib2xcIiwgeyBzdGF0aWNDbGFzczogXCJudW0gZm9udC13ZWlnaHQtbm9ybWFsXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIkFzIHByb3ZpZGVkIGluIGdyZWF0ZXIgZGV0YWlsIGluIHRoZSBFVUxBIChhbmQgd2l0aG91dCBsaW1pdGluZyB0aGUgZXhwcmVzcyBsYW5ndWFnZSBvZiB0aGUgRVVMQSksIHlvdSBhY2tub3dsZWRnZSB0aGUgZm9sbG93aW5nXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IGF0dHJzOiB7IHR5cGU6IFwiYVwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBcInlvdSBjb25zZW50IHRvIHRoZSBjb2xsZWN0aW9uLCB1c2UsIGFuZCBkaXNjbG9zdXJlIG9mIHlvdXIgcGVyc29uYWxseSBpZGVudGlmaWFibGUgaW5mb3JtYXRpb24gaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBQcml2YWN5IFBvbGljeSwgaW5jbHVkaW5nIHdpdGggcmVzcGVjdCB0byB0aGUgY29sbGVjdGlvbiBvZiBsb2NhdGlvbiBpbmZvcm1hdGlvbjtcIlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAndGhlIEFwcCwgV2Vic2l0ZSBhbmQgU2VydmljZSBpcyBwcm92aWRlZCBcImFzIGlzXCIgd2l0aG91dCB3YXJyYW50aWVzIG9mIGFueSBraW5kIGFuZCBWSVJUVUFM4oCZcyBsaWFiaWxpdHkgdG8geW91IGlzIGxpbWl0ZWQ7IGFuZCAnXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzcHV0ZXMgYXJpc2luZyBoZXJldW5kZXIgd2lsbCBiZSByZXNvbHZlZCBieSBiaW5kaW5nIGFyYml0cmF0aW9uLlwiXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtYm9sZFwiIH0sIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFwiR2VuZXJhbC5cXG4gICAgICAgICAgICAgICAgICAgIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtbm9ybWFsXCIgfSwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwiVGhlIENvbXBhbnkgaXMgZW5nYWdlZCBpbiB0aGUgYnVzaW5lc3Mgb2YgYW4gb25saW5lIHN5c3RlbSB0aGF0IG9mZmVycyBhIG11bHRpLXZlbmRvciBtYXJrZXRwbGFjZSB0aGF0IHByb3ZpZGVzIHVzZXJzIHdpdGggZW5nYWdpbmcsIGludGVyYWN0aXZlIHZpc3VhbGl6YXRpb24gZXhwZXJpZW5jZXMgYW5kIHByb3ZpZGVzIHZhbHVhYmxlIGluc2lnaHRzIGZvciB0aGUgcmVzaWRlbnRpYWwgY29uc3RydWN0aW9uIGFuZCByZW1vZGVsaW5nIGluZHVzdHJ5LiBcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ub3JtYWxcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJUaGlzIHBsYXRmb3JtIGFsbG93cyBjb250cmFjdG9ycyBhbmQgZGVzaWduZXJzIHRvIGNyZWF0ZSB0aGVpciB2aXJ0dWFsIHN0dWRpb3MgYW5kIGRpc3BsYXkgYW5kIHNlbGwgdmFyaW91cyBhY2Nlc3NvcmllcyAmIGZpdHRpbmdzIGZvciBsaXZpbmcgcm9vbXMsIGJhdGhyb29tcywga2l0Y2hlbnMsIGV0Yy4gYW5kIGZvciBwb3RlbnRpYWwgQ3VzdG9tZXJzIHRvIHZpZXcgdGVtcGxhdGVzLCB1cGxvYWQgdGhlaXIgb3duIHRlbXBsYXRlLCBhbmQgb3IgaGlyZSBkZXNpZ25lcnMvY29udHJhY3RvcnMgZnJvbSB0aGUgcGxhdGZvcm0uICh0aGUg4oCcU2VydmljZXPigJ0pXFxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcIm9sXCIsIHsgYXR0cnM6IHsgdHlwZTogXCJhXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCB7IHN0YXRpY0NsYXNzOiBcImZvbnQtd2VpZ2h0LWJvbGRcIiB9LCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiIENvbnRyYWN0b3JzIGFuZCBEZXNpZ25lcnMgdXNpbmcgdGhlIFNlcnZpY2UgbWF5OlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcIm9sXCIsXG4gICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtbm9ybWFsXCIsIGF0dHJzOiB7IHR5cGU6IFwiaVwiIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFkZCBwcm9kdWN0cyAod2l0aG91dCBwdXJjaGFzaW5nKSB0byB0aGVpciB2aXJ0dWFsIHNob3dyb29tIGZyb20gbXVsdGlwbGUgdmVuZG9ycy5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIlB1cmNoYXNlIHByb2R1Y3RzIGZyb20gdmVuZG9ycyB0byBhZGQgdG8gdGhlaXIgY2FydCBmb3IgcHVyY2hhc2Ugb3IgYWRkIHByb2R1Y3RzIHRvIHRoZWlyIHNob3dyb29tIHdpdGhvdXQgcHVyY2hhc2luZy5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIiAgICBDb2xsYWJvcmF0ZSB3aXRoIGFuZC9vciBpbnZpdGUgYSBkZXNpZ25lciB0byBjaGF0IGFuZCBwcm92aWRlIGN1c3RvbSByb29tIGRlc2lnbi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWZW5kb3JcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfYyhcInBcIiwgW192bS5fdihcIiBWZW5kb3JzIHVzaW5nIHRoZSBTZXJ2aWNlIG1heTpcIildKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcIm9sXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBZGQgcHJvZHVjdHMgb24gdGhlIFNlcnZpY2UgZm9yIHVzZSBieSBDb250cmFjdG9ycyBhbmQgZGVzaWduZXJzIHRvIHNob3cgY3VzdG9tZXJzIGl04oCZcyB1c2UgaW4gdmlydHVhbCBzaG93IHJvb21zLlwiXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU2VsbCBwcm9kdWN0cyBvbiB0aGUgcGxhdGZvcm0gdG8gY3VzdG9tZXJzIHRocm91Z2ggdGhlIFZpcnR1YWwgc2hvd3Jvb20gcGxhdGZvcm0uXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJDb2xsYWJvcmF0ZSB3aXRoIG90aGVyIHVzZXJzIHRvIGRpc2N1c3MgYW5kIHByb21vdGUgdGhlaXIgcHJvZHVjdHMuXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IHN0YXRpY0NsYXNzOiBcIm51bSBmb250LXdlaWdodC1ub3JtYWxcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInVcIiwgW192bS5fdihcIkFjY2VwdGFuY2Ugb2YgUHJpdmFjeSBQb2xpY3kuXCIpXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiIFlvdXIgdXNlIG9mIHRoZSBTZXJ2aWNlIGlzIHN1YmplY3QgdG8gdGhlIFByaXZhY3kgUG9saWN5LCB3aGljaCBpcyBhdmFpbGFibGUgYnkgZW1haWwgYW5kIGlzIGhlcmVieSBpbmNvcnBvcmF0ZWQgYnkgcmVmZXJlbmNlIGludG8gdGhlIEVVTEEuIEJ5IHVzaW5nIHRoZSBTZXJ2aWNlLCB5b3UgYWdyZWUgdGhhdCB5b3UgaGF2ZSByZWFkLCB1bmRlcnN0b29kLCBhbmQgYWdyZWUgdG8gdGhlIGRhdGEgY29sbGVjdGlvbiwgdXNlLCBhbmQgZGlzY2xvc3VyZSBwcm92aXNpb25zIHNldCBmb3J0aCBpbiB0aGUgUHJpdmFjeSBQb2xpY3kuXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwidVwiLCBbX3ZtLl92KFwiVGhpcmQgUGFydHkgRmVlcy5cIildKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCIgWW91IG1heSBpbmN1ciB0aGlyZCBwYXJ0eSBmZWVzIHRocm91Z2ggdXNlIG9mIHRoZSBTZXJ2aWNlLCBzdWNoIGFzIGZlZXMgY2hhcmdlZCBieSBWZW5kb3JzIChkZWZpbmVkIGJlbG93KSBmb3IgcHJvZHVjdHMgb3Igc2VydmljZXMuIEluIGFkZGl0aW9uLCB5b3UgbWF5IGJlIHN1YmplY3QgdG8gdGhpcmQgcGFydHkgdGVybXMsIHN1Y2ggYXMgVmVuZG9yc+KAmSB3YXJyYW50aWVzIGFuZCByZXR1cm4gcG9saWNpZXMuIFlvdSBhY2tub3dsZWRnZSBhbmQgYWdyZWUgdGhhdCB5b3UgYXJlIHNvbGVseSByZXNwb25zaWJsZSBmb3IgYWxsIHN1Y2ggZmVlcyBpbmN1cnJlZCBieSB5b3UgZm9yIHVzZSBvZiB0aGUgU2VydmljZSwgYW5kIHlvdSBhZ3JlZSB0byBwYXkgYWxsIHN1Y2ggZmVlcyBhbmQgYWJpZGUgYnkgYWxsIHN1Y2ggdGVybXMuXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwidVwiLCBbX3ZtLl92KFwiQ2hhbmdlcyB0byB0aGUgRVVMQS5cIildKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCIgV2UgbWF5IHJldmlzZSB0aGUgRVVMQSBhdCBhbnkgdGltZSBieSBwb3N0aW5nIGFuIHVwZGF0ZWQgdmVyc2lvbiBZb3Ugc2hvdWxkIHZpc2l0IHRoaXMgcGFnZSBwZXJpb2RpY2FsbHkgdG8gcmV2aWV3IHRoZSBtb3N0IGN1cnJlbnQgRVVMQSwgYmVjYXVzZSB5b3UgYXJlIGJvdW5kIGJ5IGl0LiBZb3VyIGNvbnRpbnVlZCB1c2Ugb2YgdGhlIFNlcnZpY2UgYWZ0ZXIgYSBjaGFuZ2UgdG8gdGhlIEVVTEEgY29uc3RpdHV0ZXMgeW91ciBiaW5kaW5nIGFjY2VwdGFuY2Ugb2YgdGhlIEVVTEEuXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwidVwiLCBbX3ZtLl92KFwiRWxpZ2liaWxpdHkuXCIpXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICcgSWYgeW91IGFyZSB1c2luZyBvciBvcGVuaW5nIGFuIGFjY291bnQgb24gdGhlIFNlcnZpY2Ugb24gYmVoYWxmIG9mIGEgY29tcGFueSwgZW50aXR5LCBvciBvcmdhbml6YXRpb24gKGVhY2ggYSBcIlN1YnNjcmliaW5nIEVudGl0eVwiKSwgdGhlbiB5b3UgcmVwcmVzZW50IGFuZCB3YXJyYW50IHRoYXQgeW91OiAoaSkgYXJlIGFuIGF1dGhvcml6ZWQgcmVwcmVzZW50YXRpdmUgb2YgdGhhdCBTdWJzY3JpYmluZyBFbnRpdHkgd2l0aCB0aGUgYXV0aG9yaXR5IHRvIGJpbmQgc3VjaCBlbnRpdHkgdG8gdGhlIEVVTEEgYW5kIChpaSkgYWdyZWUgb24gYmVoYWxmIG9mIHN1Y2ggU3Vic2NyaWJpbmcgRW50aXR5IHRvIGJpbmQgdGhlIFN1YnNjcmliaW5nIEVudGl0eSB0byB0aGUgRVVMQS4nXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInVcIiwgW192bS5fdihcIkNoaWxkcmVuLlwiKV0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIiBObyBwYXJ0IG9mIHRoZSBTZXJ2aWNlIGlzIGRpcmVjdGVkIHRvIHBlcnNvbnMgdW5kZXIgdGhlIGFnZSBvZiAxMy4gSUYgWU9VIEFSRSBVTkRFUiAxMyBZRUFSUyBPRiBBR0UsIFBMRUFTRSBETyBOT1QgVVNFIE9SIEFDQ0VTUyBUSEUgU0VSVklDRSBBVCBBTlkgVElNRSBPUiBJTiBBTlkgTUFOTkVSLiBJZiB5b3UgYXJlIHVuZGVyIDE4IHllYXJzIG9mIGFnZSwgeW91IHJlcHJlc2VudCBhbmQgYWdyZWUgdGhhdCB5b3UgcG9zc2VzcyB0aGUgbGVnYWwgY29uc2VudCBvZiB5b3VyIHBhcmVudCBvciBndWFyZGlhbiB0byBhY2Nlc3MgYW5kIHVzZSB0aGUgU2VydmljZS5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtYm9sZFwiIH0sIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFwiU2NvcGUgb2YgTGljZW5zZSB0byBVc2Vycy5cXG4gICAgICAgICAgICAgICAgICAgIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IHN0YXRpY0NsYXNzOiBcIm51bSBmb250LXdlaWdodC1ub3JtYWxcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInVcIiwgW192bS5fdihcIkxpY2Vuc2UgR3JhbnQgdG8gWW91LlwiKV0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIiBUaGUgV2Vic2l0ZSBhbmQgQXBwIGlzIGxpY2Vuc2VkLCBub3Qgc29sZCwgdG8geW91IGZvciB1c2Ugb25seSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVVTEEuIFN1YmplY3QgdG8geW91ciBjb21wbGV0ZSBhbmQgb25nb2luZyBjb21wbGlhbmNlIHdpdGggdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBFVUxBLCBWSVJUVUFMIGhlcmVieSBncmFudHMgeW91IGEgcGVyc29uYWwsIGxpbWl0ZWQsIHJldm9jYWJsZSwgbm9uLXRyYW5zZmVyYWJsZSBsaWNlbnNlIHRvIGFjY2VzcyBhbmQgdXNlIHRoZSBXZWJzaXRlIGFuZCB0aGUgQXBwLCBpbiBib3RoIGluc3RhbmNlcyBzb2xlbHkgZm9yIHlvdXIgb3duIHVzZSBvciBmb3IgdGhlIHVzZSBvZiB0aGUgU3Vic2NyaWJpbmcgRW50aXR5IG9uIHdob3NlIGJlaGFsZiB5b3UgYXJlIGF1dGhvcml6ZWQgdG8gYWN0IHRvIGFjY2VzcyBhbmQgcmVjZWl2ZSB0aGUgU2VydmljZS5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJ1XCIsIFtfdm0uX3YoXCJMaWNlbnNlIExpbWl0YXRpb25zLlwiKV0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIiBZb3UgbWF5IG5vdCBtb2RpZnksIGFsdGVyLCByZXByb2R1Y2UsIG9yIGRpc3RyaWJ1dGUgdGhlIFdlYnNpdGUgb3IgQXBwLiBZb3UgbWF5IG5vdCByZW50LCBsZWFzZSwgbGVuZCwgc2VsbCwgcmVkaXN0cmlidXRlIG9yIHN1YmxpY2Vuc2UgdGhlIFNlcnZpY2UsIFdlYnNpdGUgb3IgQXBwLiBZb3UgbWF5IG5vdCBjb3B5LCBkZWNvbXBpbGUsIHJldmVyc2UgZW5naW5lZXIsIGN1ZGlzYXNzZW1ibGUsIGF0dGVtcHQgdG8gZGVyaXZlIHRoZSBzb3VyY2UgY29kZSBvZiwgbW9kaWZ5LCBvciBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBvZiBhbnkgcG9ydGlvbiBvZiB0aGUgV2Vic2l0ZSBvciBBcHAsIGFueSB1cGRhdGVzLCBvciBhbnkgcGFydCB0aGVyZW9mIChleGNlcHQgYXMgYW5kIG9ubHkgdG8gdGhlIGV4dGVudCBhbnkgZm9yZWdvaW5nIHJlc3RyaWN0aW9uIGlzIHByb2hpYml0ZWQgYnkgYXBwbGljYWJsZSBsYXcpLCBub3IgYXR0ZW1wdCB0byBkaXNhYmxlIG9yIGNpcmN1bXZlbnQgYW55IHNlY3VyaXR5IG9yIG90aGVyIHRlY2hub2xvZ2ljYWwgbWVhc3VyZSBkZXNpZ25lZCB0byBwcm90ZWN0IHRoZSBTZXJ2aWNlLCBXZWJzaXRlIG9yIEFwcCBvciBhbnkgY29udGVudCBhdmFpbGFibGUgdGhyb3VnaCB0aGUgU2VydmljZS4gSWYgeW91IGJyZWFjaCB0aGVzZSBsaWNlbnNlIHJlc3RyaWN0aW9ucywgb3Igb3RoZXJ3aXNlIGV4Y2VlZCB0aGUgc2NvcGUgb2YgdGhlIGxpY2Vuc2VzIGdyYW50ZWQgaW4gdGhlIEVVTEEsIHRoZW4geW91IG1heSBiZSBzdWJqZWN0IHRvIHByb3NlY3V0aW9uIGFuZCBkYW1hZ2VzLCBhcyB3ZWxsIGFzIGxpYWJpbGl0eSBmb3IgaW5mcmluZ2VtZW50IG9mIGludGVsbGVjdHVhbCBwcm9wZXJ0eSByaWdodHMsIGFuZCBkZW5pYWwgb2YgYWNjZXNzIHRvIHRoZSBTZXJ2aWNlLlwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInVcIiwgW192bS5fdihcIkFwcGxpY2FiaWxpdHkgdG8gVXBkYXRlcy5cIildKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCIgVGhlIHRlcm1zIG9mIHRoZSBFVUxBIHdpbGwgZ292ZXJuIGFueSB1cGRhdGVzIHByb3ZpZGVkIHRvIHlvdSBieSBWSVJUVUFMIHRoYXQgcmVwbGFjZSBhbmQvb3Igc3VwcGxlbWVudCB0aGUgV2Vic2l0ZSBvciBBcHAsIHVubGVzcyBzdWNoIHVwZ3JhZGUgaXMgYWNjb21wYW5pZWQgYnkgYSBzZXBhcmF0ZSBsaWNlbnNlIG9yIHJldmlzZWQgRVVMQSwgaW4gd2hpY2ggY2FzZSB0aGUgdGVybXMgb2YgdGhhdCBsaWNlbnNlIG9yIHJldmlzZWQgRVVMQSB3aWxsIGdvdmVybi5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtYm9sZFwiIH0sIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFwiUmVnaXN0cmF0aW9uIGFuZCBFbGlnaWJpbGl0eS5cXG4gICAgICAgICAgICAgICAgICAgIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IHN0YXRpY0NsYXNzOiBcIm51bSBmb250LXdlaWdodC1ub3JtYWxcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInVcIiwgW192bS5fdihcIkFjY291bnQgVHlwZXMgYW5kIFJlZ2lzdHJhdGlvbi5cIildKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCIgQW55b25lIG1heSBicm93c2UgdGhlIHB1YmxpYy1mYWNpbmcgcGFnZXMgb2YgdGhlIFdlYnNpdGUsIEFwcCwgYW5kIFNlcnZpY2UgYW5kIHRha2UgdGhlIHN0eWxlIHByb2ZpbGUsIGJ1dCB0byBzdGFydCB0aGUgY3VzdG9tIGRlc2lnbiBwbGFuLCB0aGUgY2xpZW50IG11c3QgcmVnaXN0ZXIuXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwidVwiLCBbX3ZtLl92KFwiQ2xpZW50LlwiKV0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIiBUbyBiZWNvbWUgYSBWSVJUVUFMIERlc2lnbiBDbGllbnQsIHlvdSBtdXN0IHByb3ZpZGUgeW91ciB6aXAgY29kZSwgcGhvbmUgbnVtYmVyLCBlbWFpbCBhZGRyZXNzLCBuYW1lLCBhbmQgcGFzc3dvcmQuIFlvdSB3aWxsIGFsc28gdGFrZSBhIHVzZXIgc3VydmV5ICh0byBoZWxwIHVzIGRldGVybWluZSB5b3VyIHByZWZlcnJlZCBkZXNpZ24gc3R5bGVzKSwgcHJvdmlkZSB1cyBwaG90b3Mgb2YgeW91ciBzcGFjZSwgYW5kIHByb3ZpZGUgdXMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB5b3VyIHJvb20gYW5kIHByb2plY3QuIFlvdSB3aWxsIGFsc28gYmUgYWZmb3JkZWQgdGhlIG9wcG9ydHVuaXR5IHRvIGhhdmUgYSBwaG9uZSBjYWxsLCBvbmxpbmUgY2hhdCBvciBlbWFpbCB3aXRoIGEgY29udHJhY3Rvci4gVGhlIGNvbnRyYWN0b3Igd2lsbCB0aGVuIHByb3ZpZGUgeW91IGFuIGVzdGltYXRlIHRvIGFjY29tcGxpc2ggeW91ciBkZXNpZ24uIFZJUlRVQUwgd2lsbCBwcm92aWRlIHlvdSBhIHNob3BwYWJsZSBsaXN0IG9mIHByb2R1Y3RzIGZyb20gVklSVFVBTCBhcHByb3ZlZCB2ZW5kb3JzLlwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInVcIiwgW192bS5fdihcIkFjY291bnQgU2VjdXJpdHkuXCIpXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiIFlvdXIgYWNjb3VudCBpcyBwZXJzb25hbCB0byB5b3UsIGFuZCB5b3UgbWF5IG5vdCBzaGFyZSB5b3VyIGFjY291bnQgaW5mb3JtYXRpb24gd2l0aCwgb3IgYWxsb3cgYWNjZXNzIHRvIHlvdXIgYWNjb3VudCBieSwgYW55IHRoaXJkIHBhcnR5LiBBcyB5b3Ugd2lsbCBiZSByZXNwb25zaWJsZSBmb3IgYWxsIGFjdGl2aXR5IHRoYXQgb2NjdXJzIHVuZGVyIHlvdXIgYWNjZXNzIGNyZWRlbnRpYWxzLCB5b3UgYWdyZWUgdG8gdXNlIHJlYXNvbmFibGUgZWZmb3J0cyB0byBwcmV2ZW50IHVuYXV0aG9yaXplZCBhY2Nlc3MgdG8gb3IgdXNlIG9mIHRoZSBTZXJ2aWNlIGFuZCB0byBwcmVzZXJ2ZSB0aGUgY29uZmlkZW50aWFsaXR5IG9mIHlvdXIgdXNlcm5hbWUgYW5kIHBhc3N3b3JkLCBhbmQgYW55IGRldmljZSB0aGF0IHlvdSB1c2UgdG8gYWNjZXNzIHRoZSBTZXJ2aWNlLiBZb3UgYWdyZWUgdG8gbm90aWZ5IHVzIGltbWVkaWF0ZWx5IG9mIGFueSBicmVhY2ggaW4gc2VjcmVjeSBvZiB5b3VyIGxvZy1pbiBpbmZvcm1hdGlvbi4gSWYgeW91IGhhdmUgYW55IHJlYXNvbiB0byBiZWxpZXZlIHRoYXQgeW91ciBhY2NvdW50IGluZm9ybWF0aW9uIGhhcyBiZWVuIGNvbXByb21pc2VkIG9yIHRoYXQgeW91ciBhY2NvdW50IGhhcyBiZWVuIGFjY2Vzc2VkIGJ5IGEgdGhpcmQgcGFydHksIHlvdSBhZ3JlZSB0byBpbW1lZGlhdGVseSBub3RpZnkgdXMgYnkgZS1tYWlsIHRvIFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX2MoXCJhXCIsIHsgYXR0cnM6IHsgaHJlZjogXCJtYWlsdG86Y2lpbmZvQHdldmlzdS5jb21cIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiY2lpbmZvQHdldmlzdS5jb21cIiksXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCIuIFlvdSB3aWxsIGJlIHNvbGVseSByZXNwb25zaWJsZSBmb3IgdGhlIGxvc3NlcyBpbmN1cnJlZCBieSBWSVJUVUFMIGFuZCBvdGhlcnMgZHVlIHRvIGFueSB1bmF1dGhvcml6ZWQgdXNlIG9mIHlvdXIgYWNjb3VudC5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgXCJDb250ZW50IFlvdSBTdWJtaXQ7IExpY2Vuc2UgR3JhbnRzIGZyb20gWW91LlxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF9jKFwib2xcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ub3JtYWwgbnVtXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJ1XCIsIFtfdm0uX3YoXCJZb3VyIENvbnRlbnQuXCIpXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICcgSWYgeW91IGFyZSBhIENsaWVudCwgeW91IG1heSBiZSBhYmxlIHRvIGNyZWF0ZSwgcG9zdCwgb3Igc2hhcmUgY29udGVudCwgc3VjaCBhcyBtZXNzYWdlcywgY29tbWVudHMsIG9yIHBpY3R1cmVzIG9mIHlvdXIgc3BhY2UsIGZsb29yIHBsYW5zIGFuZCBob3VzZWhvbGQgb2JqZWN0cywgb24gb3IgdGhyb3VnaCB0aGUgU2VydmljZSAoXCInXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX2MoXCJiXCIsIFtfdm0uX3YoXCJZb3VyIENvbnRlbnRcIildKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgJ1wiKSB3aXRoIFZJUlRVQUwuIFlvdXIgQ29udGVudCBtYXkgYmUgbWFkZSBwdWJsaWMsIHNvIGRvIG5vdCB1cGxvYWQgYW55IGNvbmZpZGVudGlhbCBjb250ZW50LiBWSVJUVUFMIGNsYWltcyBubyBvd25lcnNoaXAgb3IgY29udHJvbCBvdmVyIFlvdXIgQ29udGVudC4gWW91IG9yIGEgdGhpcmRwYXJ0eSBsaWNlbnNvciwgYXMgYXBwcm9wcmlhdGUsIHJldGFpbiBhbGwgY29weXJpZ2h0LCBwYXRlbnQsIGFuZCB0cmFkZW1hcmsgcmlnaHRzIHRvIGFueSBvZiBZb3VyIENvbnRlbnQgdGhhdCB5b3UgcG9zdCBvbiBvciB0aHJvdWdoIHRoZSBTZXJ2aWNlLiBZb3UgYXJlIHJlc3BvbnNpYmxlIGZvciBwcm90ZWN0aW5nIHRob3NlIHJpZ2h0cy4gU2VwYXJhdGVseSwgeW91IG1heSBnaXZlIFZJUlRVQUwgb3IgVklSVFVBTOKAmXMgYWdlbnQgdGhlIHJpZ2h0IHRvIHRha2UgcGhvdG9zIG9yIHJlY29yZCB2aWRlbyBvZiBhcmVhcyBvZiB5b3VyIGhvbWUgYWZ0ZXIgdGhlIGRlc2lnbiBzZXJ2aWNlcyBhcmUgY29tcGxldGUgKFwiJ1xuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwiYlwiLCBbX3ZtLl92KFwiQWZ0ZXIgSW1hZ2VzXCIpXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoJ1wiKS4nKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIllvdSwgYW5kIG5vdCBWSVJUVUFMLCBhcmUgcmVzcG9uc2libGUgYW5kIGxpYWJsZSBmb3IgWW91ciBDb250ZW50LiBCZWNhdXNlIHdlIGRvIG5vdCBjb250cm9sIHRoZSBZb3VyIENvbnRlbnQgb3IgdGhlIGNvbnRlbnQgcG9zdGVkIG9uIG9yIHRocm91Z2ggdGhlIFNlcnZpY2UgYnkgb3RoZXIgdXNlcnMgKGNvbGxlY3RpdmVseSB3aXRoIFlvdXIgQ29udGVudCwg4oCcVUdD4oCdKSwgd2UgY2Fubm90IGFuZCBkbyBub3Qgd2FycmFudCBvciBndWFyYW50ZWUgdGhlIHRydXRoZnVsbmVzcywgaW50ZWdyaXR5LCBzdWl0YWJpbGl0eSwgb3IgcXVhbGl0eSBvZiB0aGF0IFVHQy4gWW91IGFsc28gYWdyZWUgYW5kIHVuZGVyc3RhbmQgdGhhdCBieSBhY2Nlc3NpbmcgdGhpcyBTZXJ2aWNlLCB5b3UgbWF5IGVuY291bnRlciBVR0MgdGhhdCB5b3UgbWF5IGNvbnNpZGVyIHRvIGJlIG9iamVjdGlvbmFibGUuIFdlIGhhdmUgbm8gcmVzcG9uc2liaWxpdHkgZm9yIGFueSBVR0MsIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gYW55IGVycm9ycyBvciBvbWlzc2lvbnMgdGhlcmVpbi5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIldlIG1heSBkaXNjbG9zZSBhbmQvb3IgcmVtb3ZlIFVHQy4gVklSVFVBTCBoYXMgY2VydGFpbiByaWdodHMuIFdlIGhhdmUgdGhlIHJpZ2h0IChidXQgZG8gbm90IGFzc3VtZSB0aGUgb2JsaWdhdGlvbikgdG86XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwib2xcIiwgeyBhdHRyczogeyB0eXBlOiBcImFcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbX3ZtLl92KFwibW9uaXRvciBhbGwgVUdDXCIpXSksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmVtb3ZlIG9yIGJsb2NrIGFueSBVR0MgYXQgYW55IHRpbWUgd2l0aG91dCBub3RpY2UgYXQgb3VyIHNvbGUgYW5kIGFic29sdXRlIGRpc2NyZXRpb247XCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXNjbG9zZSBhbnkgVUdDIGFuZCB0aGUgaWRlbnRpdHkgb2YgdGhlIHVzZXIgd2hvIHBvc3RlZCBpdCBpbiByZXNwb25zZSB0byBhIHN1YnBvZW5hIG9yIHdoZW5ldmVyIHdlIGJlbGlldmUgdGhhdCBkaXNjbG9zdXJlIGlzIGFwcHJvcHJpYXRlIHRvIGNvbXBseSB3aXRoIHRoZSBsYXcgb3IgYSBjb3VydCBvcmRlciwgdG8gcHJldmVudCBvciBpbnZlc3RpZ2F0ZSBhIHBvc3NpYmxlIGNyaW1lIG9yIG90aGVyIHZpb2xhdGlvbiBvZiBsYXcsIHRvIHByb3RlY3QgdGhlIHJpZ2h0cyBvZiBWSVJUVUFMIG9yIG90aGVycywgb3IgdG8gZW5mb3JjZSB0aGVzZSB0ZXJtczsgYW5kXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZXJtaW5hdGUgeW91ciBhY2Nlc3MgdG8gYW5kIHVzZSBvZiB0aGlzIFNlcnZpY2UsIG9yIHRvIG1vZGlmeSwgZWRpdCBvciBibG9jayB5b3VyIHRyYW5zbWlzc2lvbnMgdGhlcmV0bywgZm9yIGFueSByZWFzb24gYW5kIGluIG91ciBzb2xlIGRpc2NyZXRpb24uXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiICAgIFlvdSBhZ3JlZSB0aGF0IG91ciBleGVyY2lzZSBvZiBzdWNoIGRpc2NyZXRpb24gc2hhbGwgbm90IHJlbmRlciB1cyB0aGUgb3duZXJzIG9mIFVHQyB5b3UgcG9zdCwgYW5kIHRoYXQgeW91IHdpbGwgcmV0YWluIG93bmVyc2hpcCB0aGVyZW9mIGFzIGRlc2NyaWJlZCBhYm92ZS4gXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJZb3VyIENvbnRlbnQgY2Fubm90IGJlIHVubGF3ZnVsLCBoYXJtZnVsLCBoYXRlZnVsLCB0aHJlYXRlbmluZywgYWJ1c2l2ZSwgaGFyYXNzaW5nLCBsaWJlbG91cywgZGVmYW1hdG9yeSwgb2JzY2VuZSwgdnVsZ2FyLCBwb3Jub2dyYXBoaWMsIHByb2ZhbmUsIHJhY2lhbGx5IGRpc3BhcmFnaW5nLCBpbmRlY2VudCwgb3IgaW52YXNpdmUgb2YgYW5vdGhlcuKAmXMgcHJpdmFjeS5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJ1XCIsIFtfdm0uX3YoXCJMaWNlbnNlIEdyYW50cyB0byBWSVJUVUFMXCIpXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiLiBCeSBjcmVhdGluZywgcG9zdGluZywgb3Igc2hhcmluZyBZb3VyIENvbnRlbnQgb24gb3IgdGhyb3VnaCB0aGUgU2VydmljZSwgb3IgYWxsb3dpbmcgVklSVFVBTCB0byB0YWtlLCBvYnRhaW4sIG9yIHJlY29yZCBBZnRlciBJbWFnZXMsIHlvdSBncmFudCBWSVJUVUFMIGEgd29ybGQtd2lkZSwgbm9uLWV4Y2x1c2l2ZSwgc3ViLWxpY2Vuc2FibGUsIHJveWFsdHktZnJlZSwgZnVsbHkgcGFpZCwgdHJhbnNmZXJhYmxlLCBwZXJwZXR1YWwsIGlycmV2b2NhYmxlIGxpY2Vuc2UgdG8gdXNlLCBtb2RpZnksIHJlbW92ZSwgcHVibGlzaCwgdHJhbnNtaXQsIG9yIGRpc3BsYXkgWW91ciBDb250ZW50IGFuZCBBZnRlciBJbWFnZXMgaW4gYW55IGFuZCBhbGwgbWVkaWEgb3IgZm9ybSBvZiBjb21tdW5pY2F0aW9uIG5vdyBleGlzdGluZyBvciBoZXJlaW5hZnRlciBkZXZlbG9wZWQgaW4gb3JkZXIgdG8gb3BlcmF0ZSBWSVJUVUFM4oCZcyBidXNpbmVzcywgYW5kIHRvIHByb3ZpZGUgU2VydmljZXMsIGluY2x1ZGluZywgd2l0aG91dCBsaW1pdGF0aW9uLCAoYSkgZmFjaWxpdGF0ZSBhIGRlc2lnbiBvciByZWNvbW1lbmRlZCBwcm9kdWN0IGxpc3QgZm9yIHRoZSBDbGllbnQgKGIpIGFkdmVydGlzZSBhbmQgcHJvbW90ZSB0aGUgU2VydmljZSwgYW5kIChjKSB3aXRoIHJlZ2FyZCB0byBBZnRlciBJbWFnZXMgb25seSwgZm9yIGFueSBsYXdmdWwgYnVzaW5lc3MgcHVycG9zZS5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJ1XCIsIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiWW91IE11c3QgSGF2ZSBSaWdodHMgdG8gdGhlIENvbnRlbnQgWW91IFBvc3QuXCIpLFxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiIFlvdSByZXByZXNlbnQgYW5kIHdhcnJhbnQgdGhhdDogKGkpIHlvdSBvd24gWW91ciBDb250ZW50IG9yIG90aGVyd2lzZSBoYXZlIHRoZSByaWdodCB0byBncmFudCB0aGUgbGljZW5zZSBzZXQgZm9ydGggaW4gdGhlIEVVTEEsIChpaSkgdGhlIHBvc3RpbmcgYW5kIHVzZSBvZiBZb3VyIENvbnRlbnQgb24gb3IgdGhyb3VnaCB0aGUgU2VydmljZSwgb3Igb2YgdGhlIEFmdGVyIEltYWdlcyBkb2VzIG5vdCB2aW9sYXRlIHRoZSBwcml2YWN5IHJpZ2h0cywgcHVibGljaXR5IHJpZ2h0cywgY29weXJpZ2h0cywgY29udHJhY3QgcmlnaHRzLCBpbnRlbGxlY3R1YWwgcHJvcGVydHkgcmlnaHRzLCBvciBhbnkgb3RoZXIgcmlnaHRzIG9mIGFueSBwZXJzb24sIGFuZCAoaWlpKSB0aGUgcG9zdGluZyBvZiBZb3VyIENvbnRlbnQgb24gdGhlIFNlcnZpY2UgZG9lcyBub3QgcmVzdWx0IGluIGEgYnJlYWNoIG9mIGNvbnRyYWN0IGJldHdlZW4geW91IGFuZCBhIHRoaXJkIHBhcnR5LiBZb3UgYWdyZWUgdG8gcGF5IGZvciBhbGwgcm95YWx0aWVzLCBmZWVzLCBhbmQgYW55IG90aGVyIG1vbmllcyBvd2luZyBhbnkgcGVyc29uIGJ5IHJlYXNvbiBvZiBZb3VyIENvbnRlbnQgdGhhdCB5b3UgcG9zdCBvbiBvciB0aHJvdWdoIHRoZSBTZXJ2aWNlIFlvdSBhbHNvIGFja25vd2xlZGdlIGFuZCBhZ3JlZSB0aGF0IFlvdXIgQ29udGVudCBhbmQgQWZ0ZXIgSW1hZ2VzIGlzIG5vbi1jb25maWRlbnRpYWwgYW5kIG5vbi1wcm9wcmlldGFyeS5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJ1XCIsIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiVXNlcnMgbWF5IG1lc3NhZ2UgZWFjaCBvdGhlciB0aHJvdWdoIHRoZSBTZXJ2aWNlLlwiKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIiBZb3UgYWdyZWUgdGhhdCB5b3VyIHVzZSBvZiB0aGUgU2VydmljZSB3aWxsIG5vdCBpbmNsdWRlIHNlbmRpbmcgdW5zb2xpY2l0ZWQgbWFya2V0aW5nIG1lc3NhZ2VzIG9yIGJyb2FkY2FzdHMgKGkuZS4gc3BhbSkuIFZJUlRVQUwgd2lsbCB1dGlsaXplIGFueSBtZWFucyBwb3NzaWJsZSB0byBibG9jayBzcGFtbWVycyBhbmQgYWJ1c2VycyBmcm9tIHVzaW5nIHRoZSBTZXJ2aWNlIElmIHlvdSBiZWxpZXZlIHNwYW0gb3JpZ2luYXRlZCBmcm9tIHRoZSBTZXJ2aWNlLCBwbGVhc2UgZW1haWwgdXMgaW1tZWRpYXRlbHkgYXQgXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfYyhcImFcIiwgeyBhdHRyczogeyBocmVmOiBcIm1haWx0bzpjaWluZm9Ad2V2aXN1LmNvbVwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJjaWluZm9Ad2V2aXN1LmNvbVwiKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiLlwiKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtYm9sZFwiIH0sIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFwiRmVlczsgUGF5bWVudHMuXFxuICAgICAgICAgICAgICAgICAgICBcIiksXG4gICAgICAgICAgICAgIF9jKFwib2xcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ub3JtYWwgbnVtXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KCdGZWVzLiBUaGUgZXN0aW1hdGVkIGZlZSAodGhlIFwiJyksXG4gICAgICAgICAgICAgICAgICBfYyhcImJcIiwgW192bS5fdihcIkVzdGltYXRlZCBGZWVcIildKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgJ1wiKSBmb3IgdGhlIFNlcnZpY2UocykgYW5kIEl0ZW1zIHB1cmNoYXNlZCB0aHJvdWdoIHRoZSBTZXJ2aWNlIChlLmcuLCBhbGwgZGVzaWduIHBhY2thZ2Ugc2VydmljZXMgYW5kIG1lcmNoYW5kaXNlIHByb2R1Y3RzKSB3aWxsIGJlIHNldCBmb3J0aCBkdXJpbmcgdGhlIG9yZGVyaW5nIHByb2Nlc3MgZm9yIFNlcnZpY2UocykgdGhhdCB5b3UgZ28gdGhyb3VnaCBvbiB0aGUgV2Vic2l0ZS4gVGhlIEVzdGltYXRlZCBGZWUgb24gSXRlbXMgcHVyY2hhc2VkIHRocm91Z2ggdGhlIFNlcnZpY2VzIGlzIGJhc2VkIG9uIHRoZSBwcmljZSBrbm93biB0byBWSVJUVUFMIGF0IHRoZSB0aW1lIHlvdSBjaGVja291dCB0aHJvdWdoIHRoZSBTZXJ2aWNlcy4gQmVjYXVzZSBWSVJUVUFMIHdvcmtzIHdpdGggYSBudW1iZXIgb2YgVmVuZG9ycywgd2UgZG8gbm90IGhhdmUgY29udHJvbCBvdmVyIHRoZSBwcmljaW5nIG9mIGFsbCBJdGVtcyBvZmZlcmVkIHRocm91Z2ggb3VyIFNlcnZpY2VzIChzZWUgU2VjdGlvbiA3LjEpLiBBZnRlciB5b3UgcGxhY2UgeW91ciBvcmRlciwgVklSVFVBTCB3aWxsIG5vdGlmeSB5b3Ugb2YgYW55IGRpc2NyZXBhbmNpZXMgaW4gSXRlbSBwcmljZXMsIGluIHdoaWNoIGNhc2UgeW91IHdpbGwgaGF2ZSB0aGUgb3B0aW9uIG9mIGFjY2VwdGluZyB0aGUgYWN0dWFsIHByaWNlIG9yIHJlamVjdGluZyB0aGUgSXRlbSBmb3Igd2hpY2ggdGhlIHByaWNlIGNoYW5nZWQuIFZJUlRVQUwgd2lsbCBwcm9jZXNzIHRoZSBvcmRlciAoYSkgZm9yIGFsbCBJdGVtcyBmb3Igd2hpY2ggdGhlIHByaWNlIGRpZCBub3QgY2hhbmdlIGZyb20gdGhlIEVzdGltYXRlZCBGZWUsIGFuZCAoYikgZm9yIGFsbCBJdGVtcyBmb3Igd2hpY2ggeW91IGhhdmUgYXBwcm92ZWQgYSBwcmljZSBjaGFuZ2UgZnJvbSB0aGUgRXN0aW1hdGVkIEZlZSAod2hlcmUgdGhlIGZpbmFsIGZlZSBmb3IgdGhlIGl0ZW1zIGluIChhKSBhbmQgKGIpIGlzIHRoZSDigJxGZWXigJ0pLiBUaGUgRmVlIGlzIGR1ZSBhbmQgcGF5YWJsZSBpbiBhZHZhbmNlIG9mIENsaWVudOKAmXMgZGVzaWduLCBwcm9kdWN0IHJlY29tbWVuZGF0aW9uIHByb2Nlc3MsIG9yIG9yZGVyIHBsYWNlbWVudCBvZiBJdGVtcy4nXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInVcIiwgW192bS5fdihcIiBQYXltZW50cy5cIildKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCIgVGhlIFNlcnZpY2UgY3VycmVudGx5IHVzZXMgdGhpcmQgcGFydGllcyB0byBwcm9jZXNzIHBheW1lbnRzLiBPdXIgdGhpcmQtIHBhcnR5IHBheW1lbnQgcHJvY2Vzc29ycyBhY2NlcHQgcGF5bWVudHMgdGhyb3VnaCB2YXJpb3VzIGNyZWRpdCBjYXJkcywgYXMgZGV0YWlsZWQgb24gdGhlIGFwcGxpY2FibGUgcGF5bWVudCBzY3JlZW4uIEFsbCBtb25ldGFyeSB0cmFuc2FjdGlvbnMgb24gdGhlIFNlcnZpY2UgdGFrZSBwbGFjZSBpbiBVLlMuIERvbGxhcnMuIFdoZW4geW91IHVzZSB0aGUgU2VydmljZSB0byBwbGFjZSBhbiBvcmRlciBmb3IgSXRlbXMsIHlvdSBhdXRob3JpemUgdGhlIHB1cmNoYXNlIGFuZCBkZWxpdmVyeSBvZiB0aGUgSXRlbXMgKHN1YmplY3QgdG8gYW55IGNvbmZpcm1hdGlvbiBvZiBJdGVtIHByaWNlcywgYXMgc3RhdGVkIGluIFNlY3Rpb24gNi4xKS4gWW91IGFncmVlIHRoYXQgVklSVFVBTCB3aWxsIG9idGFpbiBhIHRlbXBvcmFyeSBwcmUtYXV0aG9yaXphdGlvbiBvZiB5b3VyIGNyZWRpdCBjYXJkIHRvIGNvdmVyIHRoZSBjb3N0IG9mIHRoZSBJdGVtcyB5b3UgaGF2ZSBwdXJjaGFzZWQsIGFsb25nIHdpdGggYW55IGVzdGltYXRlZCB0YXhlcywgZmVlcywgYW5kIHNoaXBwaW5nIGNvc3RzLCBhbmQgZXhjbHVkaW5nIGFueSB1bnZhbGlkYXRlZCBwcm9tb3Rpb25zLiBZb3UgYWNrbm93bGVkZ2UgdGhhdCB0YXhlcyBhbmQgc2hpcHBpbmcgY29zdHMgYXJlIGVzdGltYXRlZCBhdCB0aGUgdGltZSBvZiBjaGVja291dCwgYW5kIHlvdSBhZ3JlZSB0byBhbnkgZmluYWwgdGF4IGFuZC9vciBzaGlwcGluZyBjb3N0cyBhcyBjYWxjdWxhdGVkIGJ5IFZJUlRVQUwsIGJhc2VkIG9uIHlvdXIgc2hpcHBpbmcgbG9jYXRpb24gYW5kIHRoZSBGZWUuIFlvdXIgY3JlZGl0IGNhcmQgc3RhdGVtZW50IHdpbGwgcmVmbGVjdCB0aGUgZmluYWwgdG90YWwgYW1vdW50IGNoYXJnZWQgdG8geW91IHVwb24gb3JkZXIgY29tcGxldGlvbi4gXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwidVwiLCBbX3ZtLl92KFwiVGF4ZXMuXCIpXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICcgVGhlIEZlZXMgYXJlIGV4Y2x1c2l2ZSBvZiB0YXguIENsaWVudHMgYXJlIHJlc3BvbnNpYmxlIGZvciBhbGwgYXBwbGljYWJsZSBnb3Zlcm5tZW50IHRheGVzLCBmZWVzLCBhbmQgc2VydmljZSBjaGFyZ2VzIChcIlRheGVzXCIpIHJlc3VsdGluZyBmcm9tIGEgdHJhbnNhY3Rpb24gb2NjdXJyaW5nIHRocm91Z2ggdGhlIFNlcnZpY2UuIFZJUlRVQUwgd2lsbCBjb2xsZWN0IGFuZCByZW1pdCBzdWNoIFRheGVzIGZyb20gQ2xpZW50cyB3aGVyZSByZXF1aXJlZCBieSBsYXcsIGJ1dCBhIENsaWVudCBtYXkgYmUgcmVzcG9uc2libGUgZm9yIGFkZGl0aW9uYWwgVGF4ZXMgbm90IGNvbGxlY3RlZCBieSBWSVJUVUFMLiBBbGwgdGF4ZXMgYXJlIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIEZlZS4gJ1xuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJ1XCIsIFtfdm0uX3YoXCJSZWZ1bmRzLlwiKV0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIiBWSVJUVUFMIG1heSBvZmZlciBhbnkgQ2xpZW50IGEgZnVsbCBvciBwYXJ0aWFsIHJlZnVuZCBhdCBWSVJUVUFMJ3Mgc29sZSBkaXNjcmV0aW9uLiBQbGVhc2UgZW1haWwgXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfYyhcImFcIiwgeyBhdHRyczogeyBocmVmOiBcIm1haWx0bzpjaWluZm9Ad2V2aXN1LmNvbVwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJjaWluZm9Ad2V2aXN1LmNvbVwiKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIHRvIHJlcXVlc3QgYSByZWZ1bmQuXCIpLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJBZGRpdGlvbmFsIFNlcnZpY2VzIEZyb20gVklSVFVBTC5cXG4gICAgICAgICAgICAgICAgICAgIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IHN0YXRpY0NsYXNzOiBcImZvbnQtd2VpZ2h0LW5vcm1hbCBudW1cIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInVcIiwgW192bS5fdihcIlRoaXJkIFBhcnR5IFB1cmNoYXNlcy5cIildKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdignIEEgQ2xpZW50IG1heSB3aXNoIHRvIHB1cmNoYXNlIGNlcnRhaW4gaXRlbXMgKFwiJyksXG4gICAgICAgICAgICAgICAgICBfYyhcImJcIiwgW192bS5fdihcIkl0ZW1zXCIpXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoJ1wiKSBvZmZlcmVkIGJ5IHRoaXJkIHBhcnRpZXMgKGVhY2gsIGEgXCInKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwiYlwiLCBbX3ZtLl92KFwiVmVuZG9yXCIpXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICdcIikgdGhyb3VnaCB0aGUgU2VydmljZS4gQSBDbGllbnQgbWF5IHdpc2ggdG8gdXRpbGl6ZSBiaWRkaW5nIGxvY2FsIGNvbnRyYWN0b3JzIHRvIHBlcmZvcm0gd29yayBvbiBiZWhhbGYgb2YgdGhlIENsaWVudC4gVklSVFVBTCB3aWxsIGNvbGxlY3QgdGhlIGNvc3Qgb2YgdGhlc2UgSXRlbXMgKGFzIHBhcnQgb2YgdGhlIEZlZSkgZnJvbSB5b3UgaW4gYWR2YW5jZSBvZiBWSVJUVUFMIHBsYWNpbmcgb3JkZXJzIHdpdGggdGhlIFZlbmRvciBmb3IgdGhlIHB1cmNoYXNlIG9mIHRoZSBJdGVtKHMpLiBBbGwgVmVuZG9yIHRlcm1zIGFuZCBjb25kaXRpb25zIGFwcGx5IHRvIHRoZXNlIHB1cmNoYXNlcyBvZiBJdGVtcywgaW5jbHVkaW5nIHJldHVybiBwb2xpY2llcyBhbmQgc2hpcHBpbmcgY29zdHMuIE5vdGUgdGhhdCB3aGlsZSBWSVJUVUFMIHVzZXMgcmVhc29uYWJsZSBlZmZvcnRzIHRvIGRpc3BsYXkgdGhlIGN1cnJlbnQgYW5kIGFjY3VyYXRlIHByaWNlIGZvciBJdGVtcywgdGhlIHByaWNlIGZvciBJdGVtcyBpcyBkeW5hbWljLCBhbmQgdGhlIHByaWNlIGRpc3BsYXllZCBvbiB0aGUgU2VydmljZSBmb3IgYW55IHBhcnRpY3VsYXIgSXRlbSBpcyBzdWJqZWN0IHRvIGNoYW5nZS4gVklSVFVBTCB3aWxsIGNvbmZpcm0gSXRlbSBwcmljaW5nIGJlZm9yZSBjaGFyZ2luZyBDbGllbnTigJlzIGNyZWRpdCBjYXJkLiAnXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInVcIiwgW192bS5fdihcIkluZm9ybWF0aW9uLlwiKV0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIiBWSVJUVUFMIG1heSBwcm92aWRlLyBzZWxsIHlvdXIgcGVyc29uYWwgaW5mb3JtYXRpb24gdG8gdGhpcmQgcGFydHkgY29udHJhY3RvcnMgaW4gb3JkZXIgdG8gaWRlbnRpZnkgeW91ciBsb2NhdGlvbiwgY29zdHMsIGFuZCB0byBmYWNpbGl0YXRlIGluc3RhbGxhdGlvbi5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtYm9sZFwiIH0sIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgIFwiVGhpcmQgUGFydHkgTWF0ZXJpYWxzOyBWSVJUVUFMIENvbnRlbnQuXFxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfYyhcIm9sXCIsIHsgc3RhdGljQ2xhc3M6IFwibnVtIGZvbnQtd2VpZ2h0LW5vcm1hbFwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgJ1lvdSB1bmRlcnN0YW5kIHRoYXQgYnkgdXNpbmcgdGhlIFNlcnZpY2UsIHlvdSBtYXkgZW5jb3VudGVyIGRhdGEsIGluZm9ybWF0aW9uLCBhcHBsaWNhdGlvbnMsIG1hdGVyaWFscyBhbmQgb3RoZXIgY29udGVudCBmcm9tIHRoaXJkIHBhcnRpZXMsIGluY2x1ZGluZyBvdGhlciB1c2VycyAoY29sbGVjdGl2ZWx5LCBcIidcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfYyhcImJcIiwgW192bS5fdihcIlRoaXJkIFBhcnR5IE1hdGVyaWFsc1wiKV0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAnXCIpLCBhbmQgZGF0YSwgaW5mb3JtYXRpb24sIGFwcGxpY2F0aW9ucywgbWF0ZXJpYWxzIGFuZCBvdGhlciBjb250ZW50IGZyb20gVklSVFVBTCAoY29sbGVjdGl2ZWx5LCBcIlZJUlRVQUwgQ29udGVudFwiIGFuZCwgdG9nZXRoZXIgd2l0aCBUaGlyZCBQYXJ0eSBNYXRlcmlhbHMsIGJ1dCBleGNsdWRpbmcgWW91ciBDb250ZW50LCBcIlNlcnZpY2UgQ29udGVudFwiKSwgdGhhdCBtYXkgYmUgb2ZmZW5zaXZlLCBpbmRlY2VudCwgb3Igb2JqZWN0aW9uYWJsZSBOZXZlcnRoZWxlc3MsIHlvdSBhZ3JlZSB0byB1c2UgdGhlIFNlcnZpY2UgYXQgeW91ciBzb2xlIHJpc2sgYW5kIHRoYXQgVklSVFVBTCBzaGFsbCBub3QgaGF2ZSBhbnkgbGlhYmlsaXR5IHRvIHlvdSBmb3IgYW55IFNlcnZpY2UgQ29udGVudCB0aGF0IG1heSBiZSBmb3VuZCB0byBiZSBvZmZlbnNpdmUsIGluZGVjZW50LCBvciB0aGF0IGlzIGluYWNjdXJhdGUsIGluY29tcGxldGUsIHVudGltZWx5LCBpbnZhbGlkLCBpbGxlZ2FsLCBpbmRlY2VudCwgb2YgcG9vciBxdWFsaXR5IG9yIG90aGVyd2lzZSBvYmplY3Rpb25hYmxlIFlvdSB1c2UgdGhlIFNlcnZpY2UsIGFuZCByZWx5IHVwb24gYW55IFNlcnZpY2UgQ29udGVudCBhY2Nlc3NpYmxlIHRocm91Z2ggdGhlIFNlcnZpY2UsIGF0IHlvdXIgc29sZSByaXNrLiAnXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiSW4gYWRkaXRpb24sIHRoaXJkIHBhcnR5IHNlcnZpY2VzIGFuZCBTZXJ2aWNlIENvbnRlbnQgdGhhdCBtYXkgYmUgYWNjZXNzZWQgZnJvbSwgZGlzcGxheWVkIG9uIG9yIGxpbmtlZCB0byB5b3VyIGRldmljZSBhcmUgbm90IGF2YWlsYWJsZSBpbiBhbGwgbGFuZ3VhZ2VzIG9yIGluIGFsbCBjb3VudHJpZXMgVklSVFVBTCBtYWtlcyBubyByZXByZXNlbnRhdGlvbiB0aGF0IHRoZSBTZXJ2aWNlLCBhbnkgdGhpcmQgcGFydHkgc2VydmljZXMsIGFuZCBTZXJ2aWNlIENvbnRlbnQgYXJlIGFwcHJvcHJpYXRlIG9yIGF2YWlsYWJsZSBmb3IgdXNlIGluIGFueSBwYXJ0aWN1bGFyIGxvY2F0aW9uIHRvIHRoZSBleHRlbnQgeW91IGNob29zZSB0byBhY2Nlc3Mgc3VjaCBzZXJ2aWNlcyBvciBtYXRlcmlhbHMsIHlvdSBkbyBzbyBhdCB5b3VyIG93biBpbml0aWF0aXZlIGFuZCBhcmUgcmVzcG9uc2libGUgZm9yIGNvbXBsaWFuY2Ugd2l0aCBhbnkgYW5kIGFsbCBhcHBsaWNhYmxlIGxhd3MuXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCB7IHN0YXRpY0NsYXNzOiBcImZvbnQtd2VpZ2h0LWJvbGRcIiB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICBcIllvdXIgVXNlIG9mIHRoZSBTZXJ2aWNlIGFuZCBTZXJ2aWNlIENvbnRlbnQuXFxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfYyhcIm9sXCIsIHsgc3RhdGljQ2xhc3M6IFwibnVtIGZvbnQtd2VpZ2h0LW5vcm1hbFwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJZb3VyIHJpZ2h0IHRvIHVzZSB0aGUgU2VydmljZSBpcyBhIHByaXZpbGVnZSwgbm90IGEgcmlnaHQsIGFuZCBpcyBleHByZXNzbHkgY29uZGl0aW9uZWQgb24gdGhlIGZvbGxvd2luZzpcIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIllvdSBtYXkgYWNjZXNzIHRoZSBTZXJ2aWNlIHNvbGVseSBhcyBpbnRlbmRlZCB0aHJvdWdoIHRoZSBwcm92aWRlZCBmdW5jdGlvbmFsaXR5IG9mIHRoZSBTZXJ2aWNlIGFuZCBhcyBwZXJtaXR0ZWQgdW5kZXIgdGhlIEVVTEEuIFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiWW91IHNoYWxsIG5vdCBjb3B5LCByZXByb2R1Y2UsIGRpc3RyaWJ1dGUsIHB1Ymxpc2gsIGRpc3BsYXksIHBlcmZvcm0sIHRyYW5zbWl0LCBzdHJlYW0gb3IgYnJvYWRjYXN0IGFueSBwYXJ0IG9mIHRoZSBTZXJ2aWNlLCBXZWJzaXRlIG9yIEFwcCwgb3IgY29udGVudCB5b3UgZW5jb3VudGVyIG9uIHRocm91Z2ggdGhlIFNlcnZpY2Ugd2l0aG91dCBWSVJUVUFMJ3MgcHJpb3Igd3JpdHRlbiBhdXRob3JpemF0aW9uLCBpbmNsdWRpbmcsIGJ5IHdheSBvZiBleGFtcGxlIGFuZCBub3QgbGltaXRhdGlvbiwgYnkgZG9pbmcgb3IgZW5nYWdpbmcgaW4gYW55IG9mIHRoZSBmb2xsb3dpbmcgd2l0aG91dCBWSVJUVUFMJ3MgZXhwcmVzcyB3cml0dGVuIGNvbnNlbnQ6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IGF0dHJzOiB7IHR5cGU6IFwiYVwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFsdGVyaW5nLCBkZWZhY2luZywgbXV0aWxhdGluZyBvciBvdGhlcndpc2UgYnlwYXNzaW5nIGFueSBhcHByb3ZlZCBzb2Z0d2FyZSB0aHJvdWdoIHdoaWNoIHRoZSBTZXJ2aWNlIGlzIG1hZGUgYXZhaWxhYmxlOyBhbmQgXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ1c2luZyBhbnkgdHJhZGVtYXJrcywgc2VydmljZSBtYXJrcywgZGVzaWduIG1hcmtzLCBsb2dvcywgcGhvdG9ncmFwaHMgb3Igb3RoZXIgY29udGVudCBiZWxvbmdpbmcgdG8gVklSVFVBTCBvciBvYnRhaW5lZCBmcm9tIHRoZSBTZXJ2aWNlLiBcIlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJZb3Ugc2hhbGwgbm90IGJ5cGFzcywgY2lyY3VtdmVudCwgZGFtYWdlIG9yIG90aGVyd2lzZSBpbnRlcmZlcmUgd2l0aCBhbnkgc2VjdXJpdHkgb3Igb3RoZXIgZmVhdHVyZXMgb2YgdGhlIFdlYnNpdGUgb3IgQXBwIGRlc2lnbmVkIHRvIGNvbnRyb2wgdGhlIG1hbm5lciBpbiB3aGljaCB0aGUgU2VydmljZSBpcyB1c2VkLCBoYXJ2ZXN0IG9yIG1pbmUgU2VydmljZSBDb250ZW50IGZyb20gdGhlIFNlcnZpY2UsIG9yIG90aGVyd2lzZSBhY2Nlc3Mgb3IgdXNlIHRoZSBTZXJ2aWNlIGluIGEgbWFubmVyIGluY29uc2lzdGVudCB3aXRoIGluZGl2aWR1YWwgaHVtYW4gdXNhZ2UuIFlvdSBzaGFsbCBub3QgY29weSBvciBzY3JhcGUgYW55IFNlcnZpY2UgQ29udGVudC4gXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJZb3Ugc2hhbGwgbm90IHVuZGVydGFrZSwgY2F1c2UsIHBlcm1pdCBvciBhdXRob3JpemUgdGhlIHRyYW5zbGF0aW9uLCByZXZlcnNlIGVuZ2luZWVyaW5nLCBkaXNhc3NlbWJsaW5nIG9yIGhhY2tpbmcgb2YgYW55IGFzcGVjdCBvZiB0aGUgV2Vic2l0ZSBvciBTZXJ2aWNlLCBpbmNsdWRpbmcgYW55IFNlcnZpY2UgQ29udGVudCBhdmFpbGFibGUgb24gb3IgdGhyb3VnaCB0aGUgU2VydmljZSwgb3IgYXR0ZW1wdCB0byBkbyBhbnkgb2YgdGhlIGZvcmVnb2luZywgZXhjZXB0IGFuZCBzb2xlbHkgdG8gdGhlIGV4dGVudCBwZXJtaXR0ZWQgYnkgdGhlIEVVTEEsIHRoZSBhdXRob3JpemVkIGZlYXR1cmVzIG9mIHRoZSBTZXJ2aWNlLCBvciBieSBsYXcsIG9yIG90aGVyd2lzZSBhdHRlbXB0IHRvIHVzZSBvciBhY2Nlc3MgYW55IHBvcnRpb24gb2YgdGhlIFNlcnZpY2Ugb3RoZXIgdGhhbiBhcyBpbnRlbmRlZCBieSBWSVJUVUFMLlwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiWW91IHNoYWxsIG5vdCB1c2UsIGRpc3BsYXksIG1pcnJvciwgZnJhbWUgb3IgdXRpbGl6ZSBmcmFtaW5nIHRlY2huaXF1ZXMgdG8gZW5jbG9zZSB0aGUgU2VydmljZSwgaW5jbHVkaW5nIGFueSBTZXJ2aWNlIENvbnRlbnQgYXZhaWxhYmxlIG9uIG9yIHRocm91Z2ggdGhlIFNlcnZpY2UsIG9yIGFueSBwb3J0aW9uIHRoZXJlb2YsIHRocm91Z2ggYW55IG90aGVyIGFwcGxpY2F0aW9uIG9yIHdlYnNpdGUsIHVubGVzcyBhbmQgc29sZWx5IHRvIHRoZSBleHRlbnQgVklSVFVBTCBtYWtlcyBhdmFpbGFibGUgdGhlIG1lYW5zIGZvciBlbWJlZGRpbmcgYW55IHBhcnQgb2YgdGhlIFNlcnZpY2Ugb3IgU2VydmljZSBDb250ZW50LiBcIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIllvdSBzaGFsbCBub3QgYWNjZXNzLCB0YW1wZXIgd2l0aCwgb3IgdXNlIG5vbi1wdWJsaWMgYXJlYXMgb2YgdGhlIFNlcnZpY2UsIFZJUlRVQUwncyAoYW5kIGl0cyBob3N0aW5nIGNvbXBhbnkncykgY29tcHV0ZXIgc3lzdGVtcyBhbmQgaW5mcmFzdHJ1Y3R1cmUsIG9yIHRoZSB0ZWNobmljYWwgZGVsaXZlcnkgc3lzdGVtcyBvZiBWSVJUVUFMJ3MgcHJvdmlkZXJzLiBcIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIllvdSBzaGFsbCBub3QgaGFyYXNzLCBhYnVzZSwgaGFybSBvciBhZHZvY2F0ZSBvciBpbmNpdGUgaGFyYXNzbWVudCwgYWJ1c2Ugb3IgaGFybSBvZiBhbm90aGVyIHBlcnNvbiBvciBncm91cCwgaW5jbHVkaW5nIFZJUlRVQUwncyBlbXBsb3llZXMgYW5kIG90aGVyIHVzZXJzLiBcIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIllvdSBzaGFsbCBub3QgcHJvdmlkZSBhbnkgZmFsc2UgcGVyc29uYWwgaW5mb3JtYXRpb24gdG8gVklSVFVBTCBvciBhbnkgb3RoZXIgdXNlciwgb3IgY3JlYXRlIGEgZmFsc2UgaWRlbnRpZnkgb3IgaW1wZXJzb25hdGUgYW5vdGhlciBwZXJzb24gb3IgZW50aXR5IGluIGFueSB3YXkuXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJZb3Ugc2hhbGwgbm90IGNyZWF0ZSBhIG5ldyBhY2NvdW50IHdpdGggVklSVFVBTCwgd2l0aG91dCBWSVJUVUFMJ3MgZXhwcmVzcyB3cml0dGVuIGNvbnNlbnQsIGlmIFZJUlRVQUwgaGFzIHByZXZpb3VzbHkgZGlzYWJsZWQgYW4gYWNjb3VudCBvZiB5b3Vycy4gXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJZb3Ugc2hhbGwgbm90IHNvbGljaXQsIG9yIGF0dGVtcHQgdG8gc29saWNpdCwgcGVyc29uYWwgaW5mb3JtYXRpb24gZnJvbSBvdGhlciB1c2Vycy5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIllvdSBzaGFsbCBub3QgcmVzdHJpY3QsIGRpc2NvdXJhZ2Ugb3IgaW5oaWJpdCBhbnkgcGVyc29uIGZyb20gdXNpbmcgdGhlIFNlcnZpY2UsIGRpc2Nsb3NlIHBlcnNvbmFsIGluZm9ybWF0aW9uIGFib3V0IGEgdGhpcmQgcGVyc29uIG9uIHRoZSBTZXJ2aWNlIG9yIG9idGFpbmVkIGZyb20gdGhlIFNlcnZpY2Ugd2l0aG91dCB0aGUgY29uc2VudCBvZiBzdWNoIHBlcnNvbiwgb3IgY29sbGVjdCBpbmZvcm1hdGlvbiBhYm91dCB1c2Vycy5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIllvdSBzaGFsbCBub3QgdXNlIHRoZSBTZXJ2aWNlLCB3aXRob3V0IFZJUlRVQUwncyBleHByZXNzIHdyaXR0ZW4gY29uc2VudCwgdG8gY29tbXVuaWNhdGUgb3IgZmFjaWxpdGF0ZSBhbnkgY29tbWVyY2lhbCBhZHZlcnRpc2VtZW50IG9yIHNvbGljaXRhdGlvbiwgZXhjZXB0IGFzIGV4cHJlc3NseSBwZXJtaXR0ZWQgaW4gdGhlIEVVTEEuIFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiWW91IHNoYWxsIG5vdCBnYWluIG9yIGF0dGVtcHQgdG8gZ2FpbiB1bmF1dGhvcml6ZWQgYWNjZXNzIHRvIHRoZSBTZXJ2aWNlLCB0byBvdGhlciB1c2VycycgYWNjb3VudHMsIG5hbWVzIG9yIHBlcnNvbmFsbHkgaWRlbnRpZmlhYmxlIGluZm9ybWF0aW9uLCBvciB0byBvdGhlciBjb21wdXRlcnMgb3Igd2Vic2l0ZXMgY29ubmVjdGVkIG9yIGxpbmtlZCB0byB0aGUgU2VydmljZS5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIllvdSBzaGFsbCBub3QgcG9zdCwgdHJhbnNtaXQgb3Igb3RoZXJ3aXNlIG1ha2UgYXZhaWxhYmxlIGFueSB2aXJ1cywgd29ybSwgc3B5d2FyZSBvciBhbnkgb3RoZXIgY29tcHV0ZXIgY29kZSwgZmlsZSBvciBwcm9ncmFtIHRoYXQgbWF5IG9yIGlzIGludGVuZGVkIHRvIGRpc2FibGUsIG92ZXJidXJkZW4sIGltcGFpciwgZGFtYWdlIG9yIGhpamFjayB0aGUgb3BlcmF0aW9uIG9mIGFueSBoYXJkd2FyZSwgc29mdHdhcmUgb3IgdGVsZWNvbW11bmljYXRpb25zIGVxdWlwbWVudCwgb3IgYW55IG90aGVyIGFzcGVjdCBvZiB0aGUgU2VydmljZSBvciBjb21tdW5pY2F0aW9ucyBlcXVpcG1lbnQgYW5kIGNvbXB1dGVycyBjb25uZWN0ZWQgdG8gdGhlIFNlcnZpY2UuIFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiWW91IHNoYWxsIG5vdCBpbnRlcmZlcmUgd2l0aCBvciBkaXNydXB0IHRoZSBTZXJ2aWNlLCBvciBuZXR3b3JrcyBvciBzZXJ2ZXJzIGNvbm5lY3RlZCB0byB0aGUgU2VydmljZSwgb3IgdmlvbGF0ZSB0aGUgcmVndWxhdGlvbnMsIHBvbGljaWVzIG9yIHByb2NlZHVyZXMgb2Ygc3VjaCBuZXR3b3JrcyBvciBzZXJ2ZXJzLiBcIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIllvdSBzaGFsbCBub3QgdmlvbGF0ZSBhbnkgYXBwbGljYWJsZSBmZWRlcmFsLCBzdGF0ZSBvciBsb2NhbCBsYXdzIG9yIHJlZ3VsYXRpb25zIG9yIHRoZSBFVUxBLiBcIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIiAgICBZb3Ugc2hhbGwgbm90IGFzc2lzdCBvciBwZXJtaXQgYW55IHBlcnNvbnMgaW4gZW5nYWdpbmcgaW4gYW55IG9mIHRoZSBhY3Rpdml0aWVzIGRlc2NyaWJlIGFib3ZlLlwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJDb25zZW50IHRvIFVzZSBvZiBEYXRhLlxcbiAgICAgICAgICAgICAgICAgICAgXCIpLFxuICAgICAgICAgICAgICBfYyhcIm9sXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtbm9ybWFsIG51bVwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJZb3UgYWdyZWUgdGhhdCBWSVJUVUFMIG1heSBjb2xsZWN0LCB1c2UsIGFuZCBzZWxsIHRvIHRoaXJkIHBhcnR5IHZlbmRvcnMgdGVjaG5pY2FsIGRhdGEgYW5kIHJlbGF0ZWQgaW5mb3JtYXRpb24sIGluY2x1ZGluZywgYnV0IG5vdCBsaW1pdGVkIHRvLCBVRElELCBjb250YWN0cywgdXNhZ2UgZGF0YSwgbG9jYXRpb24gYW5kIG90aGVyIHRlY2huaWNhbCBpbmZvcm1hdGlvbiBhYm91dCB5b3VyIGRldmljZSwgc3lzdGVtIGFuZCBhcHBsaWNhdGlvbiBzb2Z0d2FyZSwgYW5kIHBlcmlwaGVyYWxzLCB0aGF0IGlzIGdhdGhlcmVkIHBlcmlvZGljYWxseSB0byBmYWNpbGl0YXRlIHRoZSBwcm92aXNpb24gb2Ygc29mdHdhcmUgdXBkYXRlcywgcHJvZHVjdCBzdXBwb3J0LCBhbmQgb3RoZXIgc2VydmljZXMgdG8geW91IChpZiBhbnkpIHJlbGF0ZWQgdG8gdGhlIFNlcnZpY2UsIGFuZCB0byBhbm9ueW1vdXNseSB0cmFjayBhbmQgcmVwb3J0IHlvdXIgYWN0aXZpdHkgaW5zaWRlIG9mIHRoZSBTZXJ2aWNlLCBpbmNsdWRpbmcgZm9yIGFuYWx5dGljcyBwdXJwb3NlcyBQbGVhc2Ugc2VlIHRoZSBQcml2YWN5IFBvbGljeS5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtYm9sZFwiIH0sIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFwiT3duZXJzaGlwLlxcbiAgICAgICAgICAgICAgICAgICAgXCIpLFxuICAgICAgICAgICAgICBfYyhcIm9sXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtbm9ybWFsIG51bVwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJUaGUgU2VydmljZSwgU2VydmljZSBDb250ZW50LCBBZnRlciBJbWFnZXMsIGFuZCB0aGUgbWVkaWEgYW5kIG1hdGVyaWFscyBjb250YWluZWQgdGhlcmVpbiwgaW5jbHVkaW5nIGFsbCBpbnRlbGxlY3R1YWwgcHJvcGVydHkgcmlnaHRzIHRoZXJlaW4sIGFyZSB0aGUgc29sZSBhbmQgZXhjbHVzaXZlIHByb3BlcnR5IG9mIFZJUlRVQUwgYW5kIGl0cyBsaWNlbnNvcnMuIEV4Y2VwdCBmb3IgdGhlIGxpbWl0ZWQgbGljZW5zZXMgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91IHVuZGVyIHRoZSBFVUxBLCBubyBvdGhlciByaWdodHMsIGxpY2Vuc2VzLCBvciBpbW11bml0aWVzIGFyZSBncmFudGVkIG9yIHdpbGwgYmUgZGVlbWVkIHRvIGJlIGdyYW50ZWQgdG8geW91IHVuZGVyIHRoZSBFVUxBLCBlaXRoZXIgZXhwcmVzc2x5LCBvciBieSBpbXBsaWNhdGlvbiwgZXN0b3BwZWwgb3Igb3RoZXJ3aXNlLlwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJGZWVkYmFjay5cXG4gICAgICAgICAgICAgICAgICAgIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IHN0YXRpY0NsYXNzOiBcImZvbnQtd2VpZ2h0LW5vcm1hbCBudW1cIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICdXZSBhcHByZWNpYXRlIGhlYXJpbmcgZnJvbSBvdXIgdXNlcnMgYW5kIHdlbGNvbWUgeW91ciBjb21tZW50cyByZWdhcmRpbmcgdGhlIFNlcnZpY2UgUGxlYXNlIGJlIGFkdmlzZWQsIGhvd2V2ZXIsIHRoYXQgaWYgeW91IHNlbmQgdXMgY3JlYXRpdmUgaWRlYXMsIHN1Z2dlc3Rpb25zLCBpbnZlbnRpb25zLCBvciBtYXRlcmlhbHMgKFwiQ3JlYXRpdmUgSWRlYXNcIiksIHdlIHdpbGw6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfYyhcIm9sXCIsIHsgYXR0cnM6IHsgdHlwZTogXCJhXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwib3duLCBleGNsdXNpdmVseSwgYWxsIG5vdyBrbm93biBvciBsYXRlciBkaXNjb3ZlcmVkIHJpZ2h0cyB0byB0aGUgQ3JlYXRpdmUgSWRlYXM7XCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJub3QgYmUgc3ViamVjdCB0byBhbnkgb2JsaWdhdGlvbiBvZiBjb25maWRlbnRpYWxpdHkgYW5kIHdpbGwgbm90IGJlIGxpYWJsZSBmb3IgYW55IHVzZSBvciBkaXNjbG9zdXJlIG9mIGFueSBDcmVhdGl2ZSBJZGVhczsgYW5kXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJiZSBlbnRpdGxlZCB0byB1bnJlc3RyaWN0ZWQgdXNlIG9mIHRoZSBDcmVhdGl2ZSBJZGVhcyBmb3IgYW55IHB1cnBvc2Ugd2hhdHNvZXZlciwgY29tbWVyY2lhbCBvciBvdGhlcndpc2UsIHdpdGhvdXQgY29tcGVuc2F0aW9uIHRvIHlvdSBvciBhbnkgb3RoZXIgcGVyc29uLlwiXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtYm9sZFwiIH0sIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgIFwiQ29uc2VxdWVuY2VzIG9mIFZpb2xhdGluZyBUaGVzZSBUZXJtcy5cXG4gICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF9jKFwib2xcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ub3JtYWwgbnVtXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIldlIHJlc2VydmUgdGhlIHJpZ2h0IHRvIHN1c3BlbmQgb3IgdGVybWluYXRlIHlvdXIgYWNjb3VudCBhbmQgcHJldmVudCBhY2Nlc3MgdG8gdGhlIFNlcnZpY2UgZm9yIGFueSByZWFzb24sIGF0IG91ciBkaXNjcmV0aW9uLiBXZSByZXNlcnZlIHRoZSByaWdodCB0byByZWZ1c2UgdG8gcHJvdmlkZSB0aGUgU2VydmljZSB0byB5b3UgaW4gdGhlIGZ1dHVyZS4gVklSVFVBTCBtYXkgcmV2aWV3IGFuZCByZW1vdmUgYW55IG9mIFlvdXIgQ29udGVudCBhdCBhbnkgdGltZSBmb3IgYW55IHJlYXNvbiwgaW5jbHVkaW5nIGFjdGl2aXR5IHdoaWNoLCBpbiBpdHMgc29sZSBqdWRnbWVudDogdmlvbGF0ZXMgdGhlIEVVTEE7IHZpb2xhdGVzIGFwcGxpY2FibGUgbGF3cywgcnVsZXMsIG9yIHJlZ3VsYXRpb25zOyBpcyBhYnVzaXZlLCBkaXNydXB0aXZlLCBvZmZlbnNpdmUgb3IgaWxsZWdhbDsgb3IgdmlvbGF0ZXMgdGhlIHJpZ2h0cyBvZiwgb3IgaGFybXMgb3IgdGhyZWF0ZW5zIHRoZSBzYWZldHkgb2YsIFVzZXJzIG9mIHRoZSBTZXJ2aWNlLiBZb3UgYXJlIHJlc3BvbnNpYmxlIGZvciBhbnkgY2xhaW1zLCBmZWVzLCBmaW5lcywgcGVuYWx0aWVzLCBhbmQgb3RoZXIgbGlhYmlsaXR5IGluY3VycmVkIGJ5IHVzIG9yIG90aGVycyBjYXVzZWQgYnkgb3IgYXJpc2luZyBvdXQgb2YgeW91ciBicmVhY2ggb2YgdGhlIEVVTEEgYW5kIHlvdXIgdXNlIG9mIHRoZSBTZXJ2aWNlLlwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJWSVJUVUFM4oCZcyBMaWFiaWxpdHkuXFxuICAgICAgICAgICAgICAgICAgICBcIiksXG4gICAgICAgICAgICAgIF9jKFwib2xcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ub3JtYWwgbnVtXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIkNoYW5nZXMgdG8gdGhlIFNlcnZpY2UuIFdlIG1heSBjaGFuZ2UsIHN1c3BlbmQsIG9yIGRpc2NvbnRpbnVlIGFueSBhc3BlY3Qgb2YgdGhlIFNlcnZpY2UgYXQgYW55IHRpbWUsIGluY2x1ZGluZyBob3VycyBvZiBvcGVyYXRpb24gb3IgYXZhaWxhYmlsaXR5IG9mIHRoZSBTZXJ2aWNlIG9yIGFueSBmZWF0dXJlLCB3aXRob3V0IG5vdGljZSBvciBsaWFiaWxpdHkuIFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiVXNlciBEaXNwdXRlcy4gV2UgYXJlIG5vdCByZXNwb25zaWJsZSBmb3IgYW55IGRpc3B1dGVzIG9yIGRpc2FncmVlbWVudHMgYmV0d2VlbiB5b3UgYW5kIGFueSB0aGlyZCBwYXJ0eSB5b3UgaW50ZXJhY3Qgd2l0aCB1c2luZyB0aGUgU2VydmljZS4gVGhpcyBpbmNsdWRlcyBkaXNwdXRlcyBiZXR3ZWVuIENsaWVudHMsIHZlbmRvcnMsIGFuZCBjb250cmFjdG9ycy4gWW91IGFzc3VtZSBhbGwgcmlzayBhc3NvY2lhdGVkIHdpdGggZGVhbGluZyB3aXRoIHRoaXJkIHBhcnRpZXMgYW5kIGNvbnRyYWN0b3JzLiBZb3UgYWdyZWUgdG8gcmVzb2x2ZSBkaXNwdXRlcyBkaXJlY3RseSB3aXRoIHRoZSBvdGhlciBwYXJ0eS4gWW91IHJlbGVhc2UgVklSVFVBTCBvZiBhbGwgY2xhaW1zLCBkZW1hbmRzLCBhbmQgZGFtYWdlcyBpbiBkaXNwdXRlcyBhbW9uZyB1c2VycyBvZiB0aGUgU2VydmljZS4gWW91IHNoYWxsIG5vdCBpbnZvbHZlIHVzIGluIHN1Y2ggZGlzcHV0ZXMuIFVzZSBjYXV0aW9uIGFuZCBjb21tb24gc2Vuc2Ugd2hlbiB1c2luZyB0aGUgU2VydmljZS4gSWYgeW91IHBhcnRpY2lwYXRlIGluIGFuIEluc3RhbGxhdGlvbiwgeW91IGFyZSBzb2xlbHkgcmVzcG9uc2libGUgZm9yIHlvdXIgaW50ZXJhY3Rpb25zIHdpdGggb3RoZXIgVXNlcnMuIFlvdSB1bmRlcnN0YW5kIHRoYXQgVklSVFVBTCBkb2VzIG5vdCBjdXJyZW50bHkgY29uZHVjdCBiYWNrZ3JvdW5kIGNoZWNrcywgaW5jbHVkaW5nIGNyaW1pbmFsIGJhY2tncm91bmQgY2hlY2tzLCBvbiBpdHMgVXNlcnMgb3IgVmVuZG9ycy4gVklSVFVBTCBtYWtlcyBubyByZXByZXNlbnRhdGlvbnMgb3Igd2FycmFudGllcyBhcyB0byB0aGUgY29uZHVjdCBvZiBVc2Vycy4gSU4gTk8gRVZFTlQgV0lMTCBUSEUgUkVMRUFTRUQgUEFSVElFUyAoQVMgREVGSU5FRCBCRUxPVykgQkUgTElBQkxFIEZPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSLCBXSEVUSEVSIERJUkVDVCwgSU5ESVJFQ1QsIEdFTkVSQUwsIFNQRUNJQUwsIENPTVBFTlNBVE9SWSwgQ09OU0VRVUVOVElBTCwgQU5EL09SIElOQ0lERU5UQUwsIEFSSVNJTkcgT1VUIE9GIE9SIFJFTEFUSU5HIFRPIFRIRSBDT05EVUNUIE9GIFlPVSBPUiBBTllPTkUgRUxTRSBJTiBDT05ORUNUSU9OIFdJVEggWU9VUiBVU0UgT0YgVEhFIFNFUlZJQ0UsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04sIEJPRElMWSBJTkpVUlksIEVNT1RJT05BTCBESVNUUkVTUywgQU5EL09SIEFOWSBPVEhFUiBEQU1BR0VTIFJFU1VMVElORyBGUk9NIENPTU1VTklDQVRJT05TIE9SIE1FRVRJTkdTIFdJVEggT1RIRVIgVVNFUlMgT0YgVEhJUyBTRVJWSUNFIE9SIFBFUlNPTlMgWU9VIE1FRVQgVEhST1VHSCBUSEUgU0VSVklDRS4gWU9VIEFHUkVFIFRPIFRBS0UgUkVBU09OQUJMRSBQUkVDQVVUSU9OUyBJTiBBTEwgSU5URVJBQ1RJT05TIFdJVEggT1RIRVIgVVNFUlMgT0YgVEhFIFNFUlZJQ0UsIFBBUlRJQ1VMQVJMWSBJRiBZT1UgTUVFVCBPRkZMSU5FIE9SIElOIFBFUlNPTi4gWU9VIEFTU1VNRSBBTEwgUklTSyBXSEVOIEVOR0FHSU5HIFRIRSBTRVJWSUNFUyBPRiBBTlkgT1RIRVIgVVNFUiBBTkQgSU4gQ09OTkVDVElPTiBXSVRIIFVTSU5HIFRIRSBTRVJWSUNFLCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIEFOWSBSSVNLUyBBU1NPQ0lBVEVEIFdJVEggT0JUQUlOSU5HIFNFUlZJQ0VTIEZST00gQU5ZIERFU0lHTkVSIE9SIFBST1ZJRElORyBBTlkgU0VSVklDRVMgVE8gQU5ZIENMSUVOVCwgSU5DTFVESU5HIEFMTCBSSVNLUyBPRiBQSFlTSUNBTCBPUiBFTU9USU9OQUwgSU5KVVJZIE9SIEhBUk0gUkVTVUxUSU5HIEFOWSBXQVkgT1IgQVJJU0lORyBPVVQgT0YgSU5TVEFMTEFUSU9OIFNFUlZJQ0VTIE9SIENMSUVOVFMgT0JUQUlORUQgVEhST1VHSCBUSEUgU0VSVklDRS4gQUxMIFVTRVJTLCBJTkNMVURJTkcgQ0xJRU5UUyBBTkQgREVTSUdORVJTLCBIRVJFQlkgRVhQUkVTU0xZIEFHUkVFIE5PVCBUTyBIT0xEIFRIRSBSRUxFQVNFRCBQQVJUSUVTIExJQUJMRSBGT1IgQU5ZIElOU1RBTExBVElPTiwgSU5TVFJVQ1RJT04sIEFEVklDRSBPUiBTRVJWSUNFUyBERUxJVkVSRUQgV0hJQ0ggT1JJR0lOQVRFRCBUSFJPVUdIIFRIRSBTRVJWSUNFIEFORCBUSEUgUkVMRUFTRUQgUEFSVElFUyBFWFBSRVNTTFkgRElTQ0xBSU0gQU5ZIExJQUJJTElUWSBXSEFUU09FVkVSIEZPUiBBTlkgREFNQUdFLCBTVUlUUywgQ0xBSU1TLCBBTkQvT1IgQ09OVFJPVkVSU0lFUyBUSEFUIEFSSVNFIE9SIFJFTEFURUQgSU4gQU5ZIFdBWSBUTyBUSEUgU0VSVklDRSwgVEhFIElORk9STUFUSU9OIFBST1ZJREVEIFRIUk9VR0ggVEhFIFNFUlZJQ0UgQU5EIFRIRSBTRVJWSUNFUyBQUk9WSURFRCBCWSBPUiBUTyBBTlkgVVNFUiBPRiBUSEUgU0VSVklDRS5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQgQWNjdXJhY3kuIFdlIG1ha2Ugbm8gcmVwcmVzZW50YXRpb25zIGFib3V0IGFjY3VyYWN5LCByZWxpYWJpbGl0eSwgY29tcGxldGVuZXNzLCBvciB0aW1lbGluZXNzIG9mIGFueSBjb250ZW50cyBvZiB0aGUgU2VydmljZSwgaW5jbHVkaW5nIGRlc2lnbnMuIFNpbWlsYXJseSwgd2UgbWFrZSBubyByZXByZXNlbnRhdGlvbnMgYWJvdXQgYWNjdXJhY3ksIHJlbGlhYmlsaXR5LCBjb21wbGV0ZW5lc3MsIG9yIHRpbWVsaW5lc3Mgb2YgYW55IGRhdGEgZnJvbSBhIHRoaXJkLXBhcnR5IHNlcnZpY2UgcHJvdmlkZXIgb3IgdGhlIHF1YWxpdHkgb3IgbmF0dXJlIG9mIHRoaXJkLXBhcnR5IHByb2R1Y3RzIG9yIHNlcnZpY2VzIG9idGFpbmVkIHRocm91Z2ggdGhlIFNlcnZpY2UuIFVzZSB0aGUgU2VydmljZSBhdCB5b3VyIG93biByaXNrLiBcIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIlRoaXJkLVBhcnR5IFdlYnNpdGVzLiBUaGUgU2VydmljZSBtYXkgaW5jbHVkZSBsaW5rcyB0byB0aGlyZCBwYXJ0eSB3ZWJzaXRlcyBhbmQgYXBwbGljYXRpb25zLiBZb3UgYXJlIHJlc3BvbnNpYmxlIGZvciBldmFsdWF0aW5nIHdoZXRoZXIgeW91IHdhbnQgdG8gYWNjZXNzIG9yIHVzZSB0aGVtLiBXZSBhcmUgbm90IHJlc3BvbnNpYmxlIGZvciBhbmQgZG8gbm90IGVuZG9yc2UgYW55IGZlYXR1cmVzLCBjb250ZW50LCBhZHZlcnRpc2luZywgcHJvZHVjdHMsIG9yIG90aGVyIG1hdGVyaWFscyBvbiBvdGhlciB3ZWJzaXRlcyBvciBhcHBsaWNhdGlvbnMuIFlvdSBhc3N1bWUgYWxsIHJpc2sgYW5kIHdlIGRpc2NsYWltIGFsbCBsaWFiaWxpdHkgYXJpc2luZyBmcm9tIHlvdXIgdXNlIG9mIHRoZW0uIFdlIG1ha2Ugbm8gcHJvbWlzZXMgYW5kIGRpc2NsYWltIGFsbCBsaWFiaWxpdHkgb2Ygc3BlY2lmaWMgcmVzdWx0cyBmcm9tIHRoZSB1c2Ugb2YgdGhlIFNlcnZpY2UuIFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJUZXJtaW5hdGlvbi5cXG4gICAgICAgICAgICAgICAgICAgIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IHN0YXRpY0NsYXNzOiBcImZvbnQtd2VpZ2h0LW5vcm1hbCBudW1cIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIEVVTEEgaXMgZWZmZWN0aXZlIHVudGlsIHRlcm1pbmF0ZWQgYnkgeW91IG9yIFZJUlRVQUwuIFlvdXIgcmlnaHRzIHVuZGVyIHRoZSBFVUxBIHdpbGwgdGVybWluYXRlIGF1dG9tYXRpY2FsbHkgd2l0aG91dCBub3RpY2UgZnJvbSBWSVJUVUFMIGlmIHlvdSBmYWlsIHRvIGNvbXBseSB3aXRoIGFueSB0ZXJtKHMpIG9mIHRoZSBFVUxBIChpbmNsdWRpbmcgYnkgdmlvbGF0aW5nIGFueSBsaWNlbnNlIHJlc3RyaWN0aW9uIHByb3ZpZGVkIGhlcmVpbikuIFlvdSBtYXkgdGVybWluYXRlIHRoZSBFVUxBIGJ5IHVuaW5zdGFsbGluZyB0aGUgQXBwIG9yIGNlYXNpbmcgdXNlIG9mIHRoZSBTZXJ2aWNlLiBVcG9uIGFueSB0ZXJtaW5hdGlvbiBvZiB0aGUgRVVMQSwgeW91IG11c3QgaW1tZWRpYXRlbHkgY2Vhc2UgYWxsIHVzZSBvZiB0aGUgU2VydmljZS4gSWYgeW91IGFyZSBhIGNvbnRyYWN0b3IgdGhhdCB3YXMgc2VsZWN0ZWQgYnkgYSB1c2VyIHRvIHBlcmZvcm0gd29yayBhbmQgeW91IHRlcm1pbmF0ZSB5b3VyIGFjY291bnQgYmVmb3JlIHlvdSBoYXZlIGNvbXBsZXRlbHkgZGVsaXZlcmVkIHRoZSBQcm9qZWN0LCB5b3UgbWF5IG5vdCBiZSBhbGxvd2VkIHRvIHVzZSB0aGUgU2VydmljZSBpbiB0aGUgZnV0dXJlLlwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJEaXNjbGFpbWVyLlxcbiAgICAgICAgICAgICAgICAgICAgXCIpLFxuICAgICAgICAgICAgICBfYyhcIm9sXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtbm9ybWFsIG51bVwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgJ1wiUmVsZWFzZWQgUGFydGllc1wiIGluY2x1ZGUgVklSVFVBTCBhbmQgaXRzIGFmZmlsaWF0ZXMsIG9mZmljZXJzLCBlbXBsb3llZXMsIGFnZW50cywgcGFydG5lcnMsIGFuZCBsaWNlbnNvcnMgWU9VIEVYUFJFU1NMWSBVTkRFUlNUQU5EIEFORCBBR1JFRSBUSEFUOiAoQSkgWU9VUiBVU0UgT0YgVEhFIFNFUlZJQ0UgSVMgQVQgWU9VUiBTT0xFIFJJU0ssIEFORCBUSEUgU0VSVklDRSBJUyBQUk9WSURFRCBPTiBBTiBcIkFTIElTXCIgQU5EIFwiQVMgQVZBSUxBQkxFXCIgQkFTSVMgQU5EIFRIRSBSRUxFQVNFRCBQQVJUSUVTIEVYUFJFU1NMWSBESVNDTEFJTSBBTEwgV0FSUkFOVElFUyBPRiBBTlkgS0lORCwgV0hFVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBXQVJSQU5USUVTIEFTIFRPIFBST0RVQ1RTIE9SIFNFUlZJQ0VTIE9GRkVSRUQgQlkgQlVTSU5FU1NFUyBMSVNURUQgT04gVEhFIFNFUlZJQ0UsIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLCBBTkQgTk9OLUlORlJJTkdFTUVOVDsgKEIpIFRIRSBSRUxFQVNFRCBQQVJUSUVTIE1BS0UgTk8gV0FSUkFOVFkgVEhBVCAoaSkgVEhFIFNFUlZJQ0UgV0lMTCBNRUVUIFlPVVIgUkVRVUlSRU1FTlRTLCAoaWkpIFRIRSBTRVJWSUNFIFdJTEwgQkUgVU5JTlRFUlJVUFRFRCwgVElNRUxZLCBTRUNVUkUsIE9SIEVSUk9SLUZSRUUsIChpaWkpIFRIRSBSRVNVTFRTIFRIQVQgTUFZIEJFIE9CVEFJTkVEIEZST00gVEhFIFVTRSBPRiBUSEUgU0VSVklDRSwgSU5DTFVESU5HIERBVEEsIFdJTEwgQkUgQUNDVVJBVEUgT1IgUkVMSUFCTEUsIChpdikgVEhFIFFVQUxJVFkgT0YgQU5ZIEdPT0RTLCBEQVRBIE9SIFNFUlZJQ0UgQVZBSUxBQkxFIE9OIFRIRSBTRVJWSUNFIFdJTEwgTUVFVCBZT1VSIEVYUEVDVEFUSU9OUyBBTkQsIChpdikgQU5ZIEVSUk9SUyBJTiBUSEUgU0VSVklDRSBXSUxMIEJFIENPUlJFQ1RFRDsgQU5EIChDKSBBTlkgTUFURVJJQUwgT0JUQUlORUQgVEhST1VHSCBUSEUgVVNFIE9GIFRIRSBTRVJWSUNFIElTIEFDQ0VTU0VEIEFUIFlPVVIgT1dOIERJU0NSRVRJT04gQU5EIFJJU0ssIEFORCBZT1UgV0lMTCBCRSBTT0xFTFkgUkVTUE9OU0lCTEUgRk9SIEFOWSBEQU1BR0UgVE8gWU9VUiBDT01QVVRFUiBTWVNURU0gT1IgTU9CSUxFIERFVklDRSBPUiBMT1NTIE9GIERBVEEgVEhBVCBSRVNVTFRTIEZST00gVEhFIFVTRSBPRiBBTlkgU1VDSCBNQVRFUklBTC4nXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJMaW1pdGF0aW9uIG9mIExpYWJpbGl0eS5cXG4gICAgICAgICAgICAgICAgICAgIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IHN0YXRpY0NsYXNzOiBcImZvbnQtd2VpZ2h0LW5vcm1hbCBudW1cIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiWU9VIEVYUFJFU1NMWSBVTkRFUlNUQU5EIEFORCBBR1JFRSBUSEFUIFRIRSBSRUxFQVNFRCBQQVJUSUVTIFdJTEwgTk9UIEJFIExJQUJMRSBUTyBZT1UgRk9SIEFOWSBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgQ09OU0VRVUVOVElBTCwgT1IgRVhFTVBMQVJZIERBTUFHRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBEQU1BR0VTIEZPUiBMT1NTIE9GIFBST0ZJVFMsIEdPT0RXSUxMLCBVU0UsIERBVEEgT1IgT1RIRVIgSU5UQU5HSUJMRSBMT1NTRVMgKEVWRU4gSUYgVklSVFVBTCBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRVMpLCBSRVNVTFRJTkcgRlJPTTogKGkpIFRIRSBVU0UgT1IgVEhFIElOQUJJTElUWSBUTyBVU0UgVEhFIFNFUlZJQ0U7IChpaSkgVEhFIENPU1QgT0YgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBBTkQgU0VSVklDRVMgUkVTVUxUSU5HIEZST00gQU5ZIEdPT0RTLCBEQVRBLCBJTkZPUk1BVElPTiBPUiBTRVJWSUNFUyBPQlRBSU5FRCBPUiBNRVNTQUdFUyBSRUNFSVZFRCBPUiBUUkFOU0FDVElPTlMgRU5URVJFRCBJTlRPIFRIUk9VR0gsIEZST00sIE9SIEFTIEEgUkVTVUxUIE9GIFRIRSBTSVRFOyAoaWlpKSBVTkFVVEhPUklaRUQgQUNDRVNTIFRPIE9SIEFMVEVSQVRJT04gT0YgWU9VUiBUUkFOU01JU1NJT05TIE9SIERBVEE7IChpdikgU1RBVEVNRU5UUyBPUiBDT05EVUNUIE9GIEFOWSBVU0VSIE9SIFRISVJEIFBBUlRZIE9OIFRIRSBTRVJWSUNFOyAodikgWU9VUiBSRUxJQU5DRSBPTiBDT05URU5UIE9SIERBVEEgTUFERSBBVkFJTEFCTEUgQlkgVVM7IE9SICh2aSkgQU5ZIE9USEVSIE1BVFRFUiBSRUxBVElORyBUTyBUSEUgU0VSVklDRS4gU09NRSBKVVJJU0RJQ1RJT05TIERPIE5PVCBBTExPVyBUSEUgRVhDTFVTSU9OIE9GIENFUlRBSU4gV0FSUkFOVElFUyBPUiBUSEUgTElNSVRBVElPTiBPUiBFWENMVVNJT04gT0YgTElBQklMSVRZIEZPUiBJTkNJREVOVEFMIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUy4gQUNDT1JESU5HTFksIFNPTUUgT0YgVEhFIEFCT1ZFIExJTUlUQVRJT05TIElOIFRISVMgUEFSQUdSQVBIIE1BWSBOT1QgQVBQTFkgVE8gWU9VLiBUTyBUSEUgRlVMTEVTVCBFWFRFTlQgUE9TU0lCTEUgQlkgTEFXLCBUSEUgUkVMRUFTRUQgUEFSVElFUycgTUFYSU1VTSBMSUFCSUxJVFkgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTRVJWSUNFIE9SIFlPVVIgVVNFIE9GIENPTVBBTlkgQ09OVEVOVCwgUkVHQVJETEVTUyBPRiBUSEUgQ0FVU0UgT0YgQUNUSU9OIChXSEVUSEVSIElOIENPTlRSQUNULCBUT1JULCBCUkVBQ0ggT0YgV0FSUkFOVFksIE9SIE9USEVSV0lTRSksIFdJTEwgTk9UIEVYQ0VFRCBUSEUgR1JFQVRFUiBPRiAoQSksIElGIFlPVSBBUkUgQSBDTElFTlQsIFRIRSBGRUVTIFlPVSBIQVZFIFBBSUQgVE8gVklSVFVBTCwgKEIpIElGIFlPVSBBUkUgQSBERVNJR05FUiwgVEhFIEZFRVMgUEFJRCBCWSBWSVJUVUFMIFRPIFlPVSwgQU5EIChDKSAkMTAwLlwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJJbmRlbW5pdHkuXFxuICAgICAgICAgICAgICAgICAgICBcIiksXG4gICAgICAgICAgICAgIF9jKFwib2xcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ub3JtYWwgbnVtXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIllvdSBhZ3JlZSB0byBkZWZlbmQsIGluZGVtbmlmeSwgYW5kIGhvbGQgaGFybWxlc3MgdGhlIFJlbGVhc2VkIFBhcnRpZXMgZnJvbSBhbmQgYWdhaW5zdCBhbnkgY2xhaW1zLCBhY3Rpb25zLCBvciBkZW1hbmRzLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHJlYXNvbmFibGUgbGVnYWwgYW5kIGFjY291bnRpbmcgZmVlcywgYWxsZWdpbmcgb3IgcmVzdWx0aW5nIGZyb20gKGkpIHlvdXIgdXNlIG9mIG9yIHJlbGlhbmNlIG9uIGFueSBUaGlyZC1QYXJ0eSBDb250ZW50LCAoaWkpIHlvdXIgdXNlIG9mIG9yIHJlbGlhbmNlIG9uIGFueSBWSVJUVUFMIENvbnRlbnQgb3IgZGVzaWducywgb3IgKGlpaSkgeW91ciBicmVhY2ggb2YgdGhlIEVVTEEuIFdlIHdpbGwgcHJvdmlkZSBub3RpY2UgdG8geW91IHByb21wdGx5IG9mIGFueSBzdWNoIGNsYWltLCBzdWl0LCBvciBwcm9jZWVkaW5nLlwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJUaGlyZCBQYXJ0eSBEaXNwdXRlcy5cXG4gICAgICAgICAgICAgICAgICAgIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IHN0YXRpY0NsYXNzOiBcImZvbnQtd2VpZ2h0LW5vcm1hbCBudW1cIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiVklSVFVBTCBJUyBOT1QgQUZGSUxJQVRFRCBXSVRIIEFOWSBTRVJWSUNFIFBST1ZJREVSIE9SIFRISVJEIFBBUlRZIFNFUlZJQ0UsIEFORCBBTlkgRElTUFVURSBZT1UgSEFWRSBXSVRIIEFOWSBTRVJWSUNFIFBST1ZJREVSLCBUSElSRCBQQVJUWSBTRVJWSUNFIE9SIE9USEVSIFRISVJEIFBBUlRZLCBJTkNMVURJTkcsIFdJVEhPVVQgTElNSVRBVElPTiwgQU5ZIE9USEVSIFVTRVIgT0YgVEhFIFNFUlZJQ0UsIElTIERJUkVDVExZIEJFVFdFRU4gWU9VIEFORCBTVUNIIFRISVJEIFBBUlRZLCBBTkQgWU9VIElSUkVWT0NBQkxZIFJFTEVBU0UgVEhFIFJFTEVBU0VEIFBBUlRJRVMgRlJPTSBBTlkgQU5EIEFMTCBDTEFJTVMsIERFTUFORFMgQU5EIERBTUFHRVMgKEFDVFVBTCBBTkQgQ09OU0VRVUVOVElBTCkgT0YgRVZFUlkgS0lORCBBTkQgTkFUVVJFLCBLTk9XTiBBTkQgVU5LTk9XTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQU5ZIFdBWSBDT05ORUNURUQgV0lUSCBTVUNIIERJU1BVVEVTLlwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJDb3B5cmlnaHQgUG9saWN5LlxcbiAgICAgICAgICAgICAgICAgICAgXCIpLFxuICAgICAgICAgICAgICBfYyhcIm9sXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9udC13ZWlnaHQtbm9ybWFsIG51bVwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgJ1RoZSBEaWdpdGFsIE1pbGxlbm5pdW0gQ29weXJpZ2h0IEFjdCBvZiAxOTk4ICh0aGUgXCJETUNBXCIpIHByb3ZpZGVzIHJlY291cnNlIGZvciBjb3B5cmlnaHQgb3duZXJzIHdobyBiZWxpZXZlIHRoYXQgbWF0ZXJpYWwgYXBwZWFyaW5nIG9uIHRoZSBJbnRlcm5ldCBpbmZyaW5nZXMgdGhlaXIgcmlnaHRzIHVuZGVyIFUuUy4gY29weXJpZ2h0IGxhdy4gSWYgeW91IGJlbGlldmUgaW4gZ29vZCBmYWl0aCB0aGF0IG1hdGVyaWFscyBwb3N0ZWQgb24gdGhlIFNlcnZpY2UgaW5mcmluZ2UgeW91ciBjb3B5cmlnaHQsIHlvdSAob3IgeW91ciBhZ2VudCkgbWF5IHNlbmQgVklSVFVBTCBhIFwiTm90aWZpY2F0aW9uIG9mIENsYWltZWQgSW5mcmluZ2VtZW50XCIgcmVxdWVzdGluZyB0aGF0IHRoZSBtYXRlcmlhbCBiZSByZW1vdmVkLCBvciBhY2Nlc3MgdG8gaXQgYmxvY2tlZCBUaGUgbm90aWNlIG11c3QgaW5jbHVkZSB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IGF0dHJzOiB7IHR5cGU6IFwiYVwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkEgcGh5c2ljYWwgb3IgZWxlY3Ryb25pYyBzaWduYXR1cmUgb2YgYSBwZXJzb24gYXV0aG9yaXplZCB0byBhY3Qgb24gYmVoYWxmIG9mIHRoZSBvd25lciBvZiB0aGUgd29ya3MgdGhhdCBoYXZlIGJlZW4gYWxsZWdlZGx5IGluZnJpbmdlZDtcIlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIklkZW50aWZpY2F0aW9uIG9mIHRoZSBjb3B5cmlnaHRlZCB3b3JrIGFsbGVnZWQgdG8gaGF2ZSBiZWVuIGluZnJpbmdlZCAob3IgaWYgbXVsdGlwbGUgY29weXJpZ2h0ZWQgd29ya3MgbG9jYXRlZCBvbiB0aGUgU2VydmljZSBhcmUgY292ZXJlZCBieSBhIHNpbmdsZSBub3RpZmljYXRpb24sIGEgcmVwcmVzZW50YXRpdmUgbGlzdCBvZiBzdWNoIHdvcmtzKTtcIlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIklkZW50aWZpY2F0aW9uIG9mIHRoZSBzcGVjaWZpYyBtYXRlcmlhbCBhbGxlZ2VkIHRvIGJlIGluZnJpbmdpbmcgb3IgdGhlIHN1YmplY3Qgb2YgaW5mcmluZ2luZyBhY3Rpdml0eSwgYW5kIGluZm9ybWF0aW9uIHJlYXNvbmFibHkgc3VmZmljaWVudCB0byBhbGxvdyBWSVJUVUFMIHRvIGxvY2F0ZSB0aGUgbWF0ZXJpYWwgb24gdGhlIFNlcnZpY2U7IFwiXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiWW91ciBuYW1lLCBhZGRyZXNzLCB0ZWxlcGhvbmUgbnVtYmVyLCBhbmQgZW1haWwgYWRkcmVzcyAoaWYgYXZhaWxhYmxlKTtcIlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkEgc3RhdGVtZW50IHRoYXQgeW91IGhhdmUgYSBnb29kIGZhaXRoIGJlbGllZiB0aGF0IHVzZSBvZiB0aGUgbWF0ZXJpYWwgaW4gdGhlIG1hbm5lciBjb21wbGFpbmVkIG9mIGlzIG5vdCBhdXRob3JpemVkIGJ5IHRoZSBjb3B5cmlnaHQgb3duZXIsIGl0cyBhZ2VudCwgb3IgdGhlIGxhdzsgYW5kXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBIHN0YXRlbWVudCB0aGF0IHRoZSBpbmZvcm1hdGlvbiBpbiB0aGUgbm90aWZpY2F0aW9uIGlzIGFjY3VyYXRlLCBhbmQgdW5kZXIgcGVuYWx0eSBvZiBwZXJqdXJ5LCB0aGF0IHRoZSBjb21wbGFpbmluZyBwYXJ0eSBpcyBhdXRob3JpemVkIHRvIGFjdCBvbiBiZWhhbGYgb2YgdGhlIG93bmVyIG9mIGFuIGV4Y2x1c2l2ZSByaWdodCB0aGF0IGlzIGFsbGVnZWRseSBpbmZyaW5nZWQuXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiSWYgeW91IGJlbGlldmUgaW4gZ29vZCBmYWl0aCB0aGF0IGEgbm90aWNlIG9mIGNvcHlyaWdodCBpbmZyaW5nZW1lbnQgaGFzIGJlZW4gd3JvbmdseSBmaWxlZCBhZ2FpbnN0IHlvdSwgdGhlIERNQ0EgcGVybWl0cyB5b3UgdG8gc2VuZCBWSVJUVUFMIGEgY291bnRlci1ub3RpY2UuXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJOb3RpY2VzIGFuZCBjb3VudGVyLW5vdGljZXMgbXVzdCBtZWV0IHRoZSB0aGVuLWN1cnJlbnQgc3RhdHV0b3J5IHJlcXVpcmVtZW50cyBpbXBvc2VkIGJ5IHRoZSBETUNBOyBzZWUgaHR0cDovL3d3dy5sb2MuZ292L2NvcHlyaWdodC8gZm9yIGRldGFpbHMuIElmIHlvdSBiZWxpZXZlIHlvdXIgY29weXJpZ2h0ZWQgY29udGVudCBoYXMgYmVlbiBkaXNwbGF5ZWQgaW5hcHByb3ByaWF0ZWx5IG9uIHRoZSBTZXJ2aWNlLCBwbGVhc2UgY29udGFjdCBvdXIgRGVzaWduYXRlZCBBZ2VudCBhcyBub3RlZCBiZWxvdy4gQ29uc3VsdCB5b3VyIGxlZ2FsIGFkdmlzb3IgYW5kIHNlZSAxNyBVLlMuQy4gwqQ1MTIgYmVmb3JlIGZpbGluZyBhIG5vdGljZSBvciBjb3VudGVyLW5vdGljZSBhcyB0aGVyZSBhcmUgcGVuYWx0aWVzIGZvciBmYWxzZSBjbGFpbXMgdW5kZXIgdGhlIERNQ0E6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX2MoXCJhZGRyZXNzXCIsIHsgc3RhdGljQ2xhc3M6IFwiZC1ibG9jayBwLTNcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVzaWduYXRlZCBDb3B5cmlnaHQgQWdlbnRcIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImJyXCIpLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZJUlRVQUwgU0hPV1JPT00gREVTSUdOIElOQ1wiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF9jKFwiYnJcIiksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwMCBIQVJWRVkgRFIgQVBUICM2NjBcIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImJyXCIpLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdBTE5VVCBDUkVFSyBDQSA5NDU5N1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCB7IHN0YXRpY0NsYXNzOiBcImZvbnQtd2VpZ2h0LWJvbGRcIiB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihcIkRpc3B1dGUgUmVzb2x1dGlvbi5cXG4gICAgICAgICAgICAgICAgICAgIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IHN0YXRpY0NsYXNzOiBcIm51bSBmb250LXdlaWdodC1ub3JtYWxcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIEVVTEEgYW5kIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB5b3UgYW5kIFZJUlRVQUwgd2lsbCBiZSBnb3Zlcm5lZCBieSB0aGUgbGF3cyBvZiB0aGUgU3RhdGUgb2YgQ2FsaWZvcm5pYS4gWW91IGFuZCBWSVJUVUFMIGFncmVlIHRvIHN1Ym1pdCB0byB0aGUgcGVyc29uYWwgYW5kIGV4Y2x1c2l2ZSBhcmJpdHJhdGlvbiBvZiBhbnkgZGlzcHV0ZXMgcmVsYXRpbmcgdG8geW91ciB1c2Ugb2YgdGhlIFNlcnZpY2UgdW5kZXIgdGhlIHJ1bGVzIG9mIHRoZSBBbWVyaWNhbiBBcmJpdHJhdGlvbiBBc3NvY2lhdGlvbi4gQW55IHN1Y2ggYXJiaXRyYXRpb24sIHRvIHRoZSBleHRlbnQgbmVjZXNzYXJ5LCBzaGFsbCBiZSBjb25kdWN0ZWQgaW4gQ29udHJhIENvc3RhIENvdW50eSBpbiB0aGUgU3RhdGUgb2YgQ2FsaWZvcm5pYS4gWW91IGNvdmVuYW50IG5vdCB0byBzdWUgVklSVFVBTCBpbiBhbnkgb3RoZXIgZm9ydW0uIFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiWW91IGFsc28gYWNrbm93bGVkZ2UgYW5kIHVuZGVyc3RhbmQgdGhhdCwgd2l0aCByZXNwZWN0IHRvIGFueSBkaXNwdXRlIHdpdGggdGhlIFJlbGVhc2VkIFBhcnRpZXMgYXJpc2luZyBvdXQgb2Ygb3IgcmVsYXRpbmcgdG8geW91ciB1c2Ugb2YgdGhlIFNlcnZpY2Ugb3IgdGhlIEVVTEE6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX2MoXCJvbFwiLCB7IGF0dHJzOiB7IHR5cGU6IFwiYVwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIllPVSBBUkUgR0lWSU5HIFVQIFlPVVIgUklHSFQgVE8gSEFWRSBBIFRSSUFMIEJZIEpVUlk7XCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJZT1UgQVJFIEdJVklORyBVUCBZT1VSIFJJR0hUIFRPIFNFUlZFIEFTIEEgUkVQUkVTRU5UQVRJVkUsIEFTIEEgUFJJVkFURSBBVFRPUk5FWSBHRU5FUkFMLCBPUiBJTiBBTlkgT1RIRVIgUkVQUkVTRU5UQVRJVkUgQ0FQQUNJVFksIE9SIFRPIFBBUlRJQ0lQQVRFIEFTIEEgTUVNQkVSIE9GIEEgQ0xBU1MgT0YgQ0xBSU1BTlRTLCBJTiBBTlkgTEFXU1VJVCBJTlZPTFZJTkcgQU5ZIFNVQ0ggRElTUFVURTsgQU5EXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJZT1UgTVVTVCBGSUxFIEFOWSBDTEFJTSBXSVRISU4gT05FICgxKSBZRUFSIEFGVEVSIFNVQ0ggQ0xBSU0gQVJPU0UgT1IgSVQgSVMgRk9SRVZFUiBCQVJSRUQuXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LXdlaWdodC1ib2xkXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJSZXR1cm4gUG9saWN5LlxcbiAgICAgICAgICAgICAgICAgICAgXCIpLFxuICAgICAgICAgICAgICBfYyhcIm9sXCIsIHsgc3RhdGljQ2xhc3M6IFwibnVtIGZvbnQtd2VpZ2h0LW5vcm1hbFwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIkZvciBDdXN0b21lcnM6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwib2xcIiwgeyBhdHRyczogeyB0eXBlOiBcImFcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJDdXN0b21lcnMgaGF2ZSB1cCB0byAxMiBkYXlzIHRvIHJldHVybiBhbnkgaXRlbS5cIlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkN1c3RvbWVycyBtdXN0IHNoaXAgdGhlIGl0ZW0gZGlyZWN0bHkgdG8gdmVuZG9yIGF0IHRoZWlyIGNvc3QuXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGUgaW5pdGlhbCBjb3N0IHRvIHNoaXAgdGhlIHJldHVybmVkIGl0ZW0gd2lsbCBiZSBkZWR1Y3RlZCBmcm9tIHRoZSBDdXN0b21lcnMgcmVmdW5kLiBUaGlzIGlzIHRvIGJlIGNvbnNpZGVyZWQgYSDigJxyZXN0b2NraW5n4oCdIGZlZS5cIlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlJlZnVuZHMgb25seSBmb3IgdGhlIGl0ZW0ocykgdGhlbXNlbHZlcyB3aWxsIGJlIGNyZWRpdGVkIGJhY2sgdG8gY3VzdG9tZXJzJyBjcmVkaXQvZGViaXQgY2FyZHMgdXBvbiB0aGUgdmVuZG9yIHJlY2VpcHQgb2YgYSByZXR1cm5lZCBpdGVtLlwiXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiRm9yIFZlbmRvcnM6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwib2xcIiwgeyBhdHRyczogeyB0eXBlOiBcImFcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJWZW5kb3JzIGhhdmUgMzAgZGF5cyB0byBhcHBseSBhIGN1c3RvbWVy4oCZcyByZWZ1bmQgb25jZSBhbiBpdGVtIGhhcyBiZWVuIHJldHVybmVkIGJ5IEN1c3RvbWVyLlwiXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU2hvdWxkIGEgY3VzdG9tZXIgcmV0dXJuIGFuIGl0ZW0sIG9ubHkgdGhlIGNvc3Qgb2YgdGhlIGl0ZW0gaXRzZWxmIG5lZWQgYmUgcmVpbWJ1cnNlZC5cIlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkFsbCBzaGlwcGluZyBjb3N0cywgaW5jbHVkaW5nIHRoZSB2ZW5kb3JzIGluaXRpYWwgY29zdCB0byBzaGlwIGFuIGl0ZW0gd2lsbCBiZSBwYWlkLCBpbiBmdWxsLCBwcmlvciB0byBhIHJlZnVuZCBiZWluZyBpbml0aWF0ZWQuIFRoaXMgY29zdCB3aWxsIGJlIGRlZHVjdGVkIGF1dG9tYXRpY2FsbHkgZnJvbSB0aGUgY3VzdG9tZXLigJlzIHJlZnVuZC5cIlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlRoZSByZWltYnVyc2VtZW50IG9mIHRoZSBpbml0aWFsIGNvc3QgdG8gc2hpcCBhbiBpdGVtIHNoYWxsIGJlIGNvbnNpZGVyZWQgYSDigJxyZXN0b2NraW5n4oCdIGZlZSBhbmQgd2lsbCBiZSBzZW50IHRvIHRoZSBWZW5kb3IgYXMgc3VjaC5cIlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCB7IHN0YXRpY0NsYXNzOiBcImZvbnQtd2VpZ2h0LWJvbGRcIiB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihcIk1pc2NlbGxhbmVvdXMuXFxuICAgICAgICAgICAgICAgICAgICBcIiksXG4gICAgICAgICAgICAgIF9jKFwib2xcIiwgeyBzdGF0aWNDbGFzczogXCJudW0gZm9udC13ZWlnaHQtbm9ybWFsXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJ1XCIsIFtfdm0uX3YoXCJBc3NpZ25tZW50LlwiKV0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIiBZb3UgbWF5IG5vdCBhc3NpZ24gdGhpcyBFVUxBIG9yIGFueSBvZiB0aGUgcmlnaHRzIG9yIGxpY2Vuc2VzIGdyYW50ZWQgaGVyZXVuZGVyLCBkaXJlY3RseSBvciBpbmRpcmVjdGx5LCBpbmNsdWRpbmcgYnkgc2FsZSwgbWVyZ2VyLCBjaGFuZ2Ugb2YgY29udHJvbCwgb3BlcmF0aW9uIG9mIGxhdyBvciBvdGhlcndpc2UsIHdpdGhvdXQgdGhlIHByaW9yIHdyaXR0ZW4gY29uc2VudCBvZiBWSVJUVUFMLiBWSVJUVUFMIG1heSBhc3NpZ24gdGhlIEVVTEEsIGluY2x1ZGluZyBhbGwgaXRzIHJpZ2h0cyBoZXJldW5kZXIsIHdpdGhvdXQgcmVzdHJpY3Rpb24uXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwidVwiLCBbX3ZtLl92KFwiU3Vydml2YWwuXCIpXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiIFRoZSBwcm92aXNpb25zIG9mIHRoZSBFVUxBIHRoYXQgYXJlIGludGVuZGVkIHRvIHN1cnZpdmUgdGhlIHRlcm1pbmF0aW9uIG9mIHRoZSBFVUxBIGJ5IHRoZWlyIG5hdHVyZSB3aWxsIHN1cnZpdmUgdGhlIHRlcm1pbmF0aW9uIG9mIHRoZSBFVUxBLCBpbmNsdWRpbmcsIGJ1dCBub3QgbGltaXRlZCB0bywgU2VjdGlvbnMgMiAoR2VuZXJhbCksIDUgKENvbnRlbnQgWW91IFN1Ym1pdDsgTGljZW5zZSBHcmFudHMgZnJvbSBZb3UpLCA4IChUaGlyZCBQYXJ0eSBTb2Z0d2FyZSksIDkgKFlvdXIgVXNlIG9mIHRoZSBTZXJ2aWNlIGFuZCBTZXJ2aWNlIENvbnRlbnQpLCAxMCAoQ29uc2VudCB0byBVc2Ugb2YgRGF0YSksIDExIChPd25lcnNoaXApLCAxMiAoRmVlZGJhY2spLCAxNCAoVklSVFVBTCdzIExpYWJpbGl0eSksIDE1IChUZXJtaW5hdGlvbiksIDE2IChEaXNjbGFpbWVyKSwgMTcgKExpbWl0YXRpb24gb2YgTGlhYmlsaXR5KSwgMTggKEluZGVtbml0eSksIDE5IChUaGlyZCBQYXJ0eSBEaXNwdXRlcyksIDIwIChDb3B5cmlnaHQgUG9saWN5KSwgMjEgKERpc3B1dGUgUmVzb2x1dGlvbiksIGFuZCAyMiAoTWlzY2VsbGFuZW91cykuXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJDb25zZW50IHRvIEVsZWN0cm9uaWMgQ29tbXVuaWNhdGlvbnMuIEJ5IHVzaW5nIHRoZSBTZXJ2aWNlLCB5b3UgY29uc2VudCB0byByZWNlaXZpbmcgY2VydGFpbiBlbGVjdHJvbmljIGNvbW11bmljYXRpb25zIGZyb20gdXMgYXMgZnVydGhlciBkZXNjcmliZWQgaW4gb3VyIFByaXZhY3kgUG9saWN5LiBQbGVhc2UgcmVhZCBvdXIgUHJpdmFjeSBQb2xpY3kgdG8gbGVhcm4gbW9yZSBhYm91dCB5b3VyIGNob2ljZXMgcmVnYXJkaW5nIG91ciBlbGVjdHJvbmljIGNvbW11bmljYXRpb25zIHByYWN0aWNlcy4gWW91IGFncmVlIHRoYXQgYW55IG5vdGljZXMsIGFncmVlbWVudHMsIGRpc2Nsb3N1cmVzLCBvciBvdGhlciBjb21tdW5pY2F0aW9ucyB0aGF0IHdlIHNlbmQgdG8geW91IGVsZWN0cm9uaWNhbGx5IHdpbGwgc2F0aXNmeSBhbnkgbGVnYWwgY29tbXVuaWNhdGlvbiByZXF1aXJlbWVudHMsIGluY2x1ZGluZyB0aGF0IHN1Y2ggY29tbXVuaWNhdGlvbnMgYmUgaW4gd3JpdGluZy5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBFVUxBLCB0b2dldGhlciB3aXRoIHRoZSBQcml2YWN5IFBvbGljeSBhbmQgYW55IG90aGVyIGFncmVlbWVudHMgZXhwcmVzc2x5IGluY29ycG9yYXRlZCBieSByZWZlcmVuY2UgaGVyZWluLCBjb25zdGl0dXRlIHRoZSBlbnRpcmUgYW5kIGV4Y2x1c2l2ZSB1bmRlcnN0YW5kaW5nIGFuZCBhZ3JlZW1lbnQgYmV0d2VlbiB5b3UgYW5kIFZJUlRVQUwgcmVnYXJkaW5nIHlvdXIgdXNlIG9mIGFuZCBhY2Nlc3MgdG8gdGhlIFNlcnZpY2UsIGFuZCwgZXhjZXB0IGFzIGV4cHJlc3NseSBwZXJtaXR0ZWQgYWJvdmUsIG1heSBiZSBhbWVuZGVkIG9ubHkgYnkgYSB3cml0dGVuIGFncmVlbWVudCBzaWduZWQgYnkgYXV0aG9yaXplZCByZXByZXNlbnRhdGl2ZXMgb2YgYWxsIHBhcnRpZXMgdG8gdGhlIEVVTEEuIFRoZSBmYWlsdXJlIHRvIHJlcXVpcmUgcGVyZm9ybWFuY2Ugb2YgYW55IHByb3Zpc2lvbiB3aWxsIG5vdCBhZmZlY3Qgb3VyIHJpZ2h0IHRvIHJlcXVpcmUgcGVyZm9ybWFuY2UgYXQgYW55IHRpbWUgdGhlcmVhZnRlciwgbm9yIHdpbGwgYSB3YWl2ZXIgb2YgYW55IGJyZWFjaCBvciBkZWZhdWx0IG9mIHRoZSBFVUxBIG9yIGFueSBwcm92aXNpb24gb2YgdGhlIEVVTEEgY29uc3RpdHV0ZSBhIHdhaXZlciBvZiBhbnkgc3Vic2VxdWVudCBicmVhY2ggb3IgZGVmYXVsdCBvciBhIHdhaXZlciBvZiB0aGUgcHJvdmlzaW9uIGl0c2VsZi4gVXNlIG9mIHNlY3Rpb24gaGVhZGVycyBpbiB0aGUgRVVMQSBpcyBmb3IgY29udmVuaWVuY2Ugb25seSBhbmQgd2lsbCBub3QgaGF2ZSBhbnkgaW1wYWN0IG9uIHRoZSBpbnRlcnByZXRhdGlvbiBvZiBwYXJ0aWN1bGFyIHByb3Zpc2lvbnMuIEluIHRoZSBldmVudCB0aGF0IGFueSBwYXJ0IG9mIHRoZSBFVUxBIGlzIGhlbGQgdG8gYmUgaW52YWxpZCBvciB1bmVuZm9yY2VhYmxlLCB0aGUgdW5lbmZvcmNlYWJsZSBwYXJ0IHNoYWxsIGJlIGdpdmVuIGVmZmVjdCB0byB0aGUgZ3JlYXRlc3QgZXh0ZW50IHBvc3NpYmxlIGFuZCB0aGUgcmVtYWluaW5nIHBhcnRzIHdpbGwgcmVtYWluIGluIGZ1bGwgZm9yY2UgYW5kIGVmZmVjdC4gWW91IGFncmVlIHRoYXQgbm8gam9pbnQgdmVudHVyZSwgcGFydG5lcnNoaXAsIGVtcGxveW1lbnQsIG9yIGFnZW5jeSByZWxhdGlvbnNoaXAgZXhpc3RzIGJldHdlZW4geW91IGFuZCBWSVJUVUFMIGFzIGEgcmVzdWx0IG9mIHRoZSBFVUxBIG9yIHVzZSBvZiB0aGUgU2VydmljZS5cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcIkNvbnRhY3RpbmcgVklSVFVBTC4gWW91IGNhbiBjb250YWN0IFZpcnR1YWwgYXRcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfYyhcImFkZHJlc3NcIiwgeyBzdGF0aWNDbGFzczogXCJkLWJsb2NrIGZvbnQtd2VpZ2h0LWJvbGRcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVklSVFVBTCBTSE9XUk9PTSBERVNJR04gSU5DXCJcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJiclwiKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDAwIEhBUlZFWSBEUiBBUFQgIzY2MFwiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF9jKFwiYnJcIiksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV0FMTlVUIENSRUVLIENBIDk0NTk3XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1Rlcm1zX2NvbmRpdGlvbnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTBlYzZhOWY5JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1Rlcm1zX2NvbmRpdGlvbnMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9UZXJtc19jb25kaXRpb25zLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRjpcXFxccHJvZ3JhbW1pbmdcXFxcd2FtcDY0XFxcXHd3d1xcXFx1bml0ZWQtc2NyYXBcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMGVjNmE5ZjknKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMGVjNmE5ZjknLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMGVjNmE5ZjknLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1Rlcm1zX2NvbmRpdGlvbnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTBlYzZhOWY5JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzBlYzZhOWY5Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJyZXNvdXJjZXMvanMvcGFnZXMvVGVybXNfY29uZGl0aW9ucy52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTQtMCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1Rlcm1zX2NvbmRpdGlvbnMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTQtMCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1Rlcm1zX2NvbmRpdGlvbnMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNC0wIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz9yZWYtLTYhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UZXJtc19jb25kaXRpb25zLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wZWM2YTlmOSZcIiJdLCJzb3VyY2VSb290IjoiIn0=